[{"id":0,"href":"/twilio-apis/api/conversations/conversations/","title":"Conversations","parent":"Conversations","content":"Create and manage conversations.\nCreate    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/create-conversation.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#create-conversation [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-conversation [data-query-params]\") .append(createKeyValuePair(\"create-conversation\")) }) document .querySelector(\"#create-conversation [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-conversation [data-request-headers]\") .append(createKeyValuePair(\"create-conversation\")) }) document.querySelector(\"#create-conversation [data-url]\").value = postmanParams.url document.querySelector(\"#create-conversation [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#create-conversation [data-query-params]\") .append( createKeyValuePair(\"create-conversation\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#create-conversation [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#create-conversation [data-request-path]\") .append( createKeyValuePair(\"create-conversation\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#create-conversation [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#create-conversation [data-request-headers]\") .append( createKeyValuePair( \"create-conversation\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#create-conversation [data-request-auth]\") .append( createKeyValuePair(\"create-conversation\", authParam.key, authParam.value) ) }) document .querySelector(\"#create-conversation [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create-conversation [data-method]\").value auth = keyValuePairsToObjects( \"create-conversation\", document.querySelector(\"#create-conversation [data-request-auth]\") ) path = keyValuePairsToObjects( \"create-conversation\", document.querySelector(\"#create-conversation [data-request-path]\") ) headers = keyValuePairsToObjects( \"create-conversation\", document.querySelector(\"#create-conversation [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create-conversation\", document.querySelector(\"#create-conversation [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create-conversation\", document.querySelector(\"#create-conversation [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create-conversation [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#create-conversation [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create-conversation [data-response-section]\")` ) document .querySelector(\"#create-conversation [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create-conversation\", response.status) updateResponseBody(\"create-conversation\", response.data) updateRequestBody(\"create-conversation\", myRequest) }) .then(() = { document.querySelector(\"#create-conversation [data-json-response-body]\") document.querySelector(\"#create-conversation [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   List    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/list-conversations.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#list-conversations [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list-conversations [data-query-params]\") .append(createKeyValuePair(\"list-conversations\")) }) document .querySelector(\"#list-conversations [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list-conversations [data-request-headers]\") .append(createKeyValuePair(\"list-conversations\")) }) document.querySelector(\"#list-conversations [data-url]\").value = postmanParams.url document.querySelector(\"#list-conversations [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#list-conversations [data-query-params]\") .append( createKeyValuePair(\"list-conversations\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#list-conversations [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#list-conversations [data-request-path]\") .append( createKeyValuePair(\"list-conversations\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#list-conversations [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#list-conversations [data-request-headers]\") .append( createKeyValuePair( \"list-conversations\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#list-conversations [data-request-auth]\") .append( createKeyValuePair(\"list-conversations\", authParam.key, authParam.value) ) }) document .querySelector(\"#list-conversations [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#list-conversations [data-method]\").value auth = keyValuePairsToObjects( \"list-conversations\", document.querySelector(\"#list-conversations [data-request-auth]\") ) path = keyValuePairsToObjects( \"list-conversations\", document.querySelector(\"#list-conversations [data-request-path]\") ) headers = keyValuePairsToObjects( \"list-conversations\", document.querySelector(\"#list-conversations [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"list-conversations\", document.querySelector(\"#list-conversations [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"list-conversations\", document.querySelector(\"#list-conversations [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#list-conversations [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#list-conversations [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#list-conversations [data-response-section]\")` ) document .querySelector(\"#list-conversations [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"list-conversations\", response.status) updateResponseBody(\"list-conversations\", response.data) updateRequestBody(\"list-conversations\", myRequest) }) .then(() = { document.querySelector(\"#list-conversations [data-json-response-body]\") document.querySelector(\"#list-conversations [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Fetch    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/fetch-conversation.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#fetch-conversation [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-conversation [data-query-params]\") .append(createKeyValuePair(\"fetch-conversation\")) }) document .querySelector(\"#fetch-conversation [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-conversation [data-request-headers]\") .append(createKeyValuePair(\"fetch-conversation\")) }) document.querySelector(\"#fetch-conversation [data-url]\").value = postmanParams.url document.querySelector(\"#fetch-conversation [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#fetch-conversation [data-query-params]\") .append( createKeyValuePair(\"fetch-conversation\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#fetch-conversation [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#fetch-conversation [data-request-path]\") .append( createKeyValuePair(\"fetch-conversation\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#fetch-conversation [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#fetch-conversation [data-request-headers]\") .append( createKeyValuePair( \"fetch-conversation\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#fetch-conversation [data-request-auth]\") .append( createKeyValuePair(\"fetch-conversation\", authParam.key, authParam.value) ) }) document .querySelector(\"#fetch-conversation [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#fetch-conversation [data-method]\").value auth = keyValuePairsToObjects( \"fetch-conversation\", document.querySelector(\"#fetch-conversation [data-request-auth]\") ) path = keyValuePairsToObjects( \"fetch-conversation\", document.querySelector(\"#fetch-conversation [data-request-path]\") ) headers = keyValuePairsToObjects( \"fetch-conversation\", document.querySelector(\"#fetch-conversation [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"fetch-conversation\", document.querySelector(\"#fetch-conversation [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"fetch-conversation\", document.querySelector(\"#fetch-conversation [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#fetch-conversation [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#fetch-conversation [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#fetch-conversation [data-response-section]\")` ) document .querySelector(\"#fetch-conversation [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"fetch-conversation\", response.status) updateResponseBody(\"fetch-conversation\", response.data) updateRequestBody(\"fetch-conversation\", myRequest) }) .then(() = { document.querySelector(\"#fetch-conversation [data-json-response-body]\") document.querySelector(\"#fetch-conversation [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Update    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/update-conversation.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#update-conversation [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update-conversation [data-query-params]\") .append(createKeyValuePair(\"update-conversation\")) }) document .querySelector(\"#update-conversation [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update-conversation [data-request-headers]\") .append(createKeyValuePair(\"update-conversation\")) }) document.querySelector(\"#update-conversation [data-url]\").value = postmanParams.url document.querySelector(\"#update-conversation [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#update-conversation [data-query-params]\") .append( createKeyValuePair(\"update-conversation\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#update-conversation [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#update-conversation [data-request-path]\") .append( createKeyValuePair(\"update-conversation\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#update-conversation [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#update-conversation [data-request-headers]\") .append( createKeyValuePair( \"update-conversation\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#update-conversation [data-request-auth]\") .append( createKeyValuePair(\"update-conversation\", authParam.key, authParam.value) ) }) document .querySelector(\"#update-conversation [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#update-conversation [data-method]\").value auth = keyValuePairsToObjects( \"update-conversation\", document.querySelector(\"#update-conversation [data-request-auth]\") ) path = keyValuePairsToObjects( \"update-conversation\", document.querySelector(\"#update-conversation [data-request-path]\") ) headers = keyValuePairsToObjects( \"update-conversation\", document.querySelector(\"#update-conversation [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"update-conversation\", document.querySelector(\"#update-conversation [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"update-conversation\", document.querySelector(\"#update-conversation [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#update-conversation [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#update-conversation [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#update-conversation [data-response-section]\")` ) document .querySelector(\"#update-conversation [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"update-conversation\", response.status) updateResponseBody(\"update-conversation\", response.data) updateRequestBody(\"update-conversation\", myRequest) }) .then(() = { document.querySelector(\"#update-conversation [data-json-response-body]\") document.querySelector(\"#update-conversation [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Delete    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/delete-conversation.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#delete-conversation [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete-conversation [data-query-params]\") .append(createKeyValuePair(\"delete-conversation\")) }) document .querySelector(\"#delete-conversation [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete-conversation [data-request-headers]\") .append(createKeyValuePair(\"delete-conversation\")) }) document.querySelector(\"#delete-conversation [data-url]\").value = postmanParams.url document.querySelector(\"#delete-conversation [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#delete-conversation [data-query-params]\") .append( createKeyValuePair(\"delete-conversation\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#delete-conversation [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#delete-conversation [data-request-path]\") .append( createKeyValuePair(\"delete-conversation\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#delete-conversation [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#delete-conversation [data-request-headers]\") .append( createKeyValuePair( \"delete-conversation\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#delete-conversation [data-request-auth]\") .append( createKeyValuePair(\"delete-conversation\", authParam.key, authParam.value) ) }) document .querySelector(\"#delete-conversation [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#delete-conversation [data-method]\").value auth = keyValuePairsToObjects( \"delete-conversation\", document.querySelector(\"#delete-conversation [data-request-auth]\") ) path = keyValuePairsToObjects( \"delete-conversation\", document.querySelector(\"#delete-conversation [data-request-path]\") ) headers = keyValuePairsToObjects( \"delete-conversation\", document.querySelector(\"#delete-conversation [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"delete-conversation\", document.querySelector(\"#delete-conversation [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"delete-conversation\", document.querySelector(\"#delete-conversation [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#delete-conversation [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#delete-conversation [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#delete-conversation [data-response-section]\")` ) document .querySelector(\"#delete-conversation [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"delete-conversation\", response.status) updateResponseBody(\"delete-conversation\", response.data) updateRequestBody(\"delete-conversation\", myRequest) }) .then(() = { document.querySelector(\"#delete-conversation [data-json-response-body]\") document.querySelector(\"#delete-conversation [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":1,"href":"/twilio-apis/sdk/curl/","title":"curl","parent":"SDKs","content":"Marian Menschig curl scripts     ############################### ## Message Resource ############################### # Send Message curl -v -X POST \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Messages.json\u0026#39; \\ --data-urlencode \u0026#34;From=+17207069111\u0026#34; \\ --data-urlencode $\u0026#39;Body=This is a line.\\nThis is another line.\\nOne last newline.\u0026#39; \\ --data-urlencode \u0026#34;To=+14158190280\u0026#34; \\ --data-urlencode \u0026#34;StatusCallback=https://webhook.site/a245fcb5-06c5-4ee1-94b3-0ccffa783133/callback\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; # Send Message (Simple)  curl -v -X POST \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Messages.json\u0026#39; \\ --data-urlencode \u0026#34;From=MG865943ec14fec68bc28a15ee294b144f\u0026#34; \\ --data-urlencode \u0026#34;Body=BodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBodyBody\u0026#34; \\ --data-urlencode \u0026#34;To=+18323109635\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; # Delete Message curl -v -X DELETE \u0026#34;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Messages/SM0e21e7c901dc469aae15944d67967adc.json\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; ############################### ## Account Endpoint ############################### # Read a list of countries for AvailablePhoneNumbers curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/AvailablePhoneNumbers.json?PageSize=20\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; # Get Account Balance curl -s -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Balance.json\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Get Account Usage curl -s -G \u0026#34;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Usage/Records/LastMonth.json\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; ############################### ## Account Usage ############################### # Get Monthly Usage  curl -s -G \u0026#34;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Usage/Records/Monthly.json\u0026#34; \\ -d \u0026#34;Category=sms\u0026#34; \\ -d \u0026#34;StartDate=2022-01-01\u0026#34; \\ -d \u0026#34;EndDate=2022-05-04\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Get Account Usage (SMS) curl -s -G \u0026#34;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Usage/Records.json\u0026#34; \\ -d \u0026#34;Category=sms\u0026#34; \\ -d \u0026#34;StartDate=2022-04-20\u0026#34; \\ -d \u0026#34;EndDate=2022-04-20\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; | less # List Messages (Same period as above) curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/\u0026#39;$TWILIO_ACCOUNT_SID\u0026#39;/Messages.json?DateSent%3E=2022-04-20T00%3A00%3A00Z\u0026amp;DateSent%3C=2022-04-20T23%3A59%3A59Z\u0026amp;PageSize=20\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; | less # List Messages (as above, only datestamp - no time portion) curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/\u0026#39;$TWILIO_ACCOUNT_SID\u0026#39;/Messages.json?DateSent%3E=2022-04-20\u0026amp;DateSent%3C=2022-04-21\u0026amp;PageSize=20\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; | less # Get Active numbers curl -s -X GET \u0026#34;https://preview.twilio.com/Numbers/ActiveNumbers\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; ############################### ## Verify ############################### # Create a verification service curl -s -vvv -X POST https://verify.twilio.com/v2/Services \\ -H \u0026#34;Content-Type: text/plain\u0026#34; \\ --data-urlencode \u0026#34;FriendlyName=My Second Verify Service\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; ############################### ## Event Streams ############################### # List EventStream sinks curl -X GET \u0026#39;https://events.twilio.com/v1/Sinks?PageSize=20\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Read EventStream subscription curl -s -X GET \u0026#39;https://events.twilio.com/v1/Subscriptions?PageSize=20\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Delete Eventstream subscription curl -s -X DELETE \u0026#34;https://events.twilio.com/v1/Subscriptions/DF7e5e8ea8b38e4cff4fe8925f9de9a47f\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Delete Eventstream sink curl -s -X DELETE \u0026#34;https://events.twilio.com/v1/Sinks/DG116dc48dc1250d119bec20d63fa4b9d6\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Sending message with unsupported TLS version # ERROR EXPECTED curl -X POST \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Messages.json\u0026#39; \\ --data-urlencode \u0026#34;From=+17207069111\u0026#34; \\ --data-urlencode \u0026#34;Body=Omg this works.\\\\\\nThis is another line.\\\\\\nOne last newline.\u0026#34; \\ --data-urlencode \u0026#34;To=+18323109635\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; \\ --tlsv1.0 --tls-max 1.0 # Send WhatsApp Message curl -X POST \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Messages.json\u0026#39; \\ --data-urlencode \u0026#34;From=whatsapp:+14155238886\u0026#34; \\ --data-urlencode \u0026#34;Body=Cool cool I sent this throug the API. \u0026#34; \\ --data-urlencode \u0026#34;To=whatsapp:+14159712378\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; # Send MMS curl -X POST \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Messages.json\u0026#39; \\ --data-urlencode \u0026#34;From=+17207069111\u0026#34; \\ --data-urlencode \u0026#34;Body=MMS Test\u0026#34; \\ --data-urlencode \u0026#34;MediaUrl=https://www.fillmurray.com/640/360\u0026#34; \\ --data-urlencode \u0026#34;To=+18323109635\u0026#34; \\ --data-urlencode \u0026#34;StatusCallback=https://webhook.site/c7917a52-43cc-4287-9149-738a2f59992a\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; # Test X-Twilio-Signature Header existence for MediaURL retrieval curl -X POST \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Messages.json\u0026#39; \\ --data-urlencode \u0026#34;From=+17207069111\u0026#34; \\ --data-urlencode \u0026#34;Body=MMS Test\u0026#34; \\ --data-urlencode \u0026#34;MediaUrl=https://webhook.site/ed2a599d-2a9f-44ae-8b62-56444d049bb9\u0026#34; \\ --data-urlencode \u0026#34;To=+18323109635\u0026#34; \\ --data-urlencode \u0026#34;StatusCallback=https://webhook.site/ed2a599d-2a9f-44ae-8b62-56444d049bb9\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; # Fetch Message curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Messages/SM0b94cee214c4d01f1f4c021c3c745909.json\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; # Fetch Messages Sent in a timeframe curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Messages.json?DateSent%3E=2021-9-01T01%3A23%3A45Z\u0026amp;DateSent%3C=2021-9-28T01%3A23%3A45Z\u0026amp;PageSize=500\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; # Check available phone numbers curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/AvailablePhoneNumbers/US/Local.json?postal_code=%2B\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; # Create a Video Room curl -s -X POST https://video.twilio.com/v1/Rooms \\ --data-urlencode \u0026#34;UniqueName=Test1\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; # Complete a room curl -s -X POST https://video.twilio.com/v1/Rooms/RMe80505b73c6ec7b07f1a82bc54c2df95 \\ --data-urlencode \u0026#34;Status=completed\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Create Room with 100 Participans (expected to fail - not part of the 100 participant Beta) curl -X POST https://video.twilio.com/v1/Rooms \\ --data-urlencode \u0026#34;UniqueName=AlejandroTest\u0026#34; \\ --data-urlencode \u0026#34;StatusCallback=https://webhook.site/1ab4cbac-e770-40d2-833b-35a75eb0221c\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Fetch a room curl -X GET \u0026#39;https://video.twilio.com/v1/Rooms/RM3e3dc9bbb9e7d43b730dc5233ad1a5a2\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; | less # Fetch rooms by Status curl -X GET \u0026#39;https://video.twilio.com/v1/Rooms?Status=completed\u0026amp;PageSize=500\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; | less # Fetch Participants curl -X GET \u0026#39;https://video.twilio.com/v1/Rooms/RMcc96b00a73e53d4453fba0f5939ef0ba/Participants\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; | less # Fetch a Room Participant curl -G \u0026#39;https://video.twilio.com/v1/Rooms/Jhhh/Participants/Marian3\u0026#39; \\ -u \u0026#39;SK5d60bd8a002cb8649c0a72614231ec38:tzxD8Z4tsmYiMknKPRczFWO1DTvtS8Kl\u0026#39; # List connected participants curl -G \u0026#39;https://video.twilio.com/v1/Rooms/DailyStandup/Participants/\u0026#39; \\  -u \u0026#39;SKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:your_api_key_secret\u0026#39; \\  -d \u0026#39;Status=connected\u0026#39; # Create Sync List curl -X POST https://sync.twilio.com/v1/Services/IS925fa32d9c2c239fea444b98d1964eee/Lists \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; # View Usage curl -G https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Usage/Records/LastMonth.json \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; # Update Phone number sms_url curl -s -X POST https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/IncomingPhoneNumbers/PN5b781e9aee700b0a188335a0aac5d9b1.json \\ --data-urlencode \u0026#34;SmsUrl=https://www.google.com\u0026#34; \\ --data-urlencode \u0026#34;FriendlyName=Marian Test 2\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Create SMS Binding curl -X POST https://notify.twilio.com/v1/Services/IS54150add1149ce37f9dd146d8d9ce021/Bindings \\ --data-urlencode \u0026#34;Identity=marian\u0026#34; \\ --data-urlencode \u0026#34;BindingType=sms\u0026#34; \\ --data-urlencode \u0026#34;Address=+18323109635\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Send SMS Notification curl -X POST https://notify.twilio.com/v1/Services/IS54150add1149ce37f9dd146d8d9ce021/Notifications \\ -d \u0026#39;Identity=marian\u0026#39; \\ -d \u0026#39;Body=Hello User again!\u0026#39; \\ -d \u0026#39;DeliveryCallbackUrl=https://webhook.site/04f53593-6616-4fb1-a928-49269b5e6955\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Read Flow Executions curl -X GET \u0026#39;https://studio.twilio.com/v2/Flows/FW32bbf550b19a7e00544aaaac7a7791fd/Executions?PageSize=20\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Fetch Flow Execution curl -X GET \u0026#39;https://studio.twilio.com/v2/Flows/FW32bbf550b19a7e00544aaaac7a7791fd/Executions/FNd88bf200db97e9791905b31fea5f1116\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Fetch Flow Steps curl -X GET \u0026#39;https://studio.twilio.com/v2/Flows/FW32bbf550b19a7e00544aaaac7a7791fd/Executions/FNb88643a8bed053ec79d2b510fb24c127/Steps?PageSize=50\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Create Asset (Step 1) curl -X POST \u0026#34;https://serverless.twilio.com/v1/Services/ZS853d2b467d5df131b5b31fdd29238efc/Assets\u0026#34; \\ --data-urlencode \u0026#34;FriendlyName=MyFriendlyName\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Create Asset Version (Step 2) curl -s -X POST \u0026#34;https://serverless-upload.twilio.com/v1/Services/ZS853d2b467d5df131b5b31fdd29238efc/Assets/ZHf0bedcf14c47b90a657cf8046992a5d2/Versions\u0026#34; \\ -F \u0026#34;Content=@/Users/mmenschig/Desktop/funnycountryflag.png; type=image/png\u0026#34; \\ -F \u0026#34;Path=/asset2\u0026#34; \\ -F \u0026#34;Visibility=public\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Lookups a number curl -X GET \u0026#39;https://lookups.twilio.com/v1/PhoneNumbers/+18323109636\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Move phone number to another account curl -s -X POST \u0026#34;https://api.twilio.com/2010-04-01/Accounts/AC77eb45761046abf604b5d76e5c244a77/IncomingPhoneNumbers/PN1d54675608bff7f403e42a3d2975d9c7.json\u0026#34; \\ --data-urlencode \u0026#34;AccountSid=ACbd010c3006bb82fcaa99bee8371644b6\u0026#34; \\ -u \u0026#34;AC77eb45761046abf604b5d76e5c244a77:secret\u0026#34; | jq \u0026#39;.\u0026#39; # Lookup Account Balance curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Balance.json\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Trigger Studio Flow via REST API PARAMETERS=$(cat \u0026lt;\u0026lt; EOF { \u0026#34;question\u0026#34;: \u0026#34;Please rate your stay\u0026#34; } EOF ) curl -X POST \u0026#34;https://studio.twilio.com/v2/Flows/FW3289d376f766269df5cca3f7a742e85e/Executions\u0026#34; \\ --data-urlencode \u0026#34;To=+18323109635\u0026#34; \\ --data-urlencode \u0026#34;From=+17207069111\u0026#34; \\ --data-urlencode \u0026#34;Parameters=$PARAMETERS\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # List Phone numbers by Area Code curl -s -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/AvailablePhoneNumbers/US/Local.json?AreaCode=720\u0026amp;PageSize=20\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Get Calls curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Calls.json?PageSize=20\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Get Call Event curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Calls/CA5960185bc10b22071967911e856886d3/Events.json?PageSize=20\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Create Call curl -X POST https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Calls.json \\ --data-urlencode \u0026#34;Method=GET\u0026#34; \\ --data-urlencode \u0026#34;StatusCallback=https://webhook.site/04f53593-6616-4fb1-a928-49269b5e6955\u0026#34; \\ --data-urlencode \u0026#34;StatusCallbackMethod=POST\u0026#34; \\ --data-urlencode \u0026#34;Url=http://demo.twilio.com/docs/voice.xml\u0026#34; \\ --data-urlencode \u0026#34;To=+18323109635\u0026#34; \\ --data-urlencode \u0026#34;From=+17207069111\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Fetch Message Media URL curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Messages/MMd892f924c51263aeafd3c25036940e68/Media.json\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Fetch Message Media curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Messages/MMd892f924c51263aeafd3c25036940e68/Media/ME2d4e89bb21708855c99e4fe6bec92a56.json\u0026#39; \\  # Fetch Message based on Number curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Messages.json?DateSent%3E=2021-09-23T00%3A00%3A00Z\u0026amp;From=%2B14159693849\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Download the Media object (image) wget --http-user=\u0026#34;ACbd010c3006bb82fcaa99bee8371644b6\u0026#34; --http-password=\u0026#34;aa9d643eb66c38aa053a738f53b12aa2\u0026#34; \u0026#34;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Messages/MMd892f924c51263aeafd3c25036940e68/Media/ME2d4e89bb21708855c99e4fe6bec92a56\u0026#34; -O mediaimage.png # Update IncomingPhoneNumber curl -X POST \u0026#34;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/IncomingPhoneNumbers/PN5b781e9aee700b0a188335a0aac5d9b1.json\u0026#34; \\ --data-urlencode \u0026#34;EmergencyStatus=Enabled\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Make Service UI-editable curl -X POST https://serverless.twilio.com/v1/Services/ZSf4ad009ea16d6dcd443dcd4820634af8 \\ --data-urlencode \u0026#34;UiEditable=True\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Send Whatsapp message curl -X POST https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Messages.json \\ --data-urlencode \u0026#34;From=whatsapp:+17207069111\u0026#34; \\ --data-urlencode \u0026#34;Body=Hello there Marian\u0026#34; \\ --data-urlencode \u0026#34;To=whatsapp:+18323109635\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Send Notify via SMS curl -X POST https://notify.twilio.com/v1/Services/IS54150add1149ce37f9dd146d8d9ce021/Notifications \\ --data-urlencode \u0026#39;ToBinding={\u0026#34;binding_type\u0026#34;:\u0026#34;sms\u0026#34;, \u0026#34;address\u0026#34;:\u0026#34;+18323109635\u0026#34;}\u0026#39; \\ -d \u0026#39;Sms={\u0026#34;status_callback\u0026#34;: \u0026#34;https://webhook.site/4c862785-84c8-4bb4-be49-4a6f6619c6d0/statusCallback\u0026#34;}\u0026#39; \\ --data-urlencode \u0026#39;Body=Knock knock!\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # See Usage records curl \u0026#34;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Usage/Records.json\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; while true; do now=$( date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) res=$( curl -s -X GET https://us2.vss.twilio.com ) echo \u0026#34;$now:: $res\u0026#34; sleep 60 done # Record Call CALL_SID=CAd237fec718383a0863bc1d0bc8094c22 curl -X POST \u0026#34;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Calls/${CALL_SID}/Recordings.json\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Create Conversation curl -X POST https://conversations.twilio.com/v1/Services/IS2781cc05ffda43bd827254b5c62362b1/Conversations \\ --data-urlencode \u0026#34;FriendlyName=Conversation 1\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Add Conversation Participant (Chat) curl -X POST https://conversations.twilio.com/v1/Services/IS2781cc05ffda43bd827254b5c62362b1/Conversations/CHebfae1fb0f1442759dba34755ad8b0d1/Participants \\ --data-urlencode \u0026#34;Identity=testPineApple\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Usage category for SMS last 30 days curl -s -X GET https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/Usage/Records.json \\  --data-urlencode \u0026#34;Category=sms\u0026#34; \\  -d \u0026#34;StartDate=2021-08-01\u0026#34; \\  -d \u0026#34;EndDate=2021-09-30\u0026#34; \\  -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; | less # List all Twilio number SIDs for your account numbers=$( curl -s -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/IncomingPhoneNumbers.json?PageSize=20\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq -r \u0026#39;.incoming_phone_numbers[] | (.sid)\u0026#39; ) IFS=$\u0026#39;\\n\u0026#39;; while read num; do curl -s -X GET \u0026#34;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/IncomingPhoneNumbers/${num}.json\u0026#34; -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; sleep 1 done \u0026lt; \u0026lt;( echo $numbers ) # Fetch Incoming Phone Number resource curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/IncomingPhoneNumbers/PN5b781e9aee700b0a188335a0aac5d9b1.json\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # List IncomingPhoneNumbers in Account curl -s -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts/ACbd010c3006bb82fcaa99bee8371644b6/IncomingPhoneNumbers.json?PageSize=20\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq -r \u0026#39;.incoming_phone_numbers[] | {sid, origin, phone_number, friendly_name}\u0026#39; # List all accounts curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts.json?PageSize=20\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Chat: Create Media Resource curl -X POST \u0026#34;https://mcs.us1.twilio.com/v1/Services/IS25fd9f13eaa44561b6e0d946a4a4331f/Media\u0026#34; \\ -H \u0026#34;Content-Type: multipart/form-data\u0026#34; \\ -F \u0026#34;media=@/Users/mmenschig/Downloads/TwilioHero.png;type=image/png\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Chat: Retrieve a Media resource curl -X GET \u0026#34;https://mcs.us1.twilio.com/v1/Services/IS25fd9f13eaa44561b6e0d946a4a4331f/Media/MEe5b8116e7cb9922db6617cafaeca2fee\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Update Phone Number curl -X POST \u0026#34;https://api.twilio.com/2010-04-01/Accounts/$TWILIO_ACCOUNT_SID/IncomingPhoneNumbers/PN5b781e9aee700b0a188335a0aac5d9b1.json\u0026#34; \\ --data-urlencode \u0026#34;EmergencyStatus=Inactive\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Create Studio Flow DEFINITION=$(cat \u0026lt;\u0026lt; EOF { \u0026#34;description\u0026#34;: \u0026#34;Created via rest\u0026#34;, \u0026#34;flags\u0026#34;: { \u0026#34;allow_concurrent_calls\u0026#34;: true }, \u0026#34;initial_state\u0026#34;: \u0026#34;Trigger\u0026#34;, \u0026#34;states\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Trigger\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;offset\u0026#34;: { \u0026#34;x\u0026#34;: 0, \u0026#34;y\u0026#34;: 0 } }, \u0026#34;transitions\u0026#34;: [], \u0026#34;type\u0026#34;: \u0026#34;trigger\u0026#34; } ] } EOF ) curl -X POST https://studio.twilio.com/v2/Flows \\ --data-urlencode \u0026#34;CommitMessage=First draft\u0026#34; \\ --data-urlencode \u0026#34;FriendlyName=CREATED VIA REST v1\u0026#34; \\ --data-urlencode \u0026#34;Status=draft\u0026#34; \\ --data-urlencode \u0026#34;Definition=$DEFINITION\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Delete Messaging Service curl -X DELETE \u0026#34;https://messaging.twilio.com/v1/Services/MGf34bc16c5e13f0a7584d27ed5e7d786d\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Fetch Rooms curl -X GET \u0026#39;https://video.twilio.com/v1/Rooms?Status=in-progress\u0026amp;UniqueName=test1\u0026amp;PageSize=20\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Get Room Participants curl -G \u0026#39;https://video.twilio.com/v1/Rooms/test1/Participants/\u0026#39; \\  -u \u0026#39;SK7e0a5f93d2aafa98013bafe016cb3f2e:yhvweXF7Oj8NrWIIDLkWrD5PFwAz1gz9\u0026#39; \\  -d \u0026#39;Status=connected\u0026#39; | jq \u0026#39;.\u0026#39; curl -s -X POST \u0026#34;https://api.twilio.com/2010-04-01/Accounts/${TWILIO_ACCOUNT_SID}/Tokens.json\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Generate NTS Token curl -X POST \u0026#34;https://api.twilio.com/2010-04-01/Accounts/${TWILIO_ACCOUNT_SID}/Tokens.json\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Custom Job curl -X POST https://bulkexports.twilio.com/v1/Exports/Messages/Jobs \\ --data-urlencode \u0026#34;Email=mmenschig@twilio.com\u0026#34; \\ --data-urlencode \u0026#34;WebhookMethod=POST\u0026#34; \\ --data-urlencode \u0026#34;WebhookUrl=https://webhook.site/1ab4cbac-e770-40d2-833b-35a75eb0221c\u0026#34; \\ --data-urlencode \u0026#34;StartDay=2021-11-01\u0026#34; \\ --data-urlencode \u0026#34;EndDay=2021-12-05\u0026#34; \\ --data-urlencode \u0026#34;FriendlyName=Export1\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Export day curl -X GET \u0026#39;https://bulkexports.twilio.com/v1/Exports/Messages/Days/2021-11-29\u0026#39; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Create Proxy Service curl -X POST \u0026#34;https://proxy.twilio.com/v1/Services\u0026#34; \\ --data-urlencode \u0026#34;UniqueName=Proxy_Demo\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Add Phone number to Proxy Service curl -s -X POST \u0026#34;https://proxy.twilio.com/v1/Services/KSde3c424c7d19857cc86490a65e716c33/PhoneNumbers\u0026#34; \\ --data-urlencode \u0026#34;Sid=PN225556ffdcf5c99ed294a261d3084358\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Create Session in Proxy Service curl -X POST \u0026#34;https://proxy.twilio.com/v1/Services/KSde3c424c7d19857cc86490a65e716c33/Sessions\u0026#34; \\ --data-urlencode \u0026#34;UniqueName=MyFirstSession\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Create Participant 1 and add to Proxy Service Session curl -s -X POST \u0026#34;https://proxy.twilio.com/v1/Services/KSde3c424c7d19857cc86490a65e716c33/Sessions/KC4f9d17677d14ffe4de5f72332de6d1e3/Participants\u0026#34; \\ --data-urlencode \u0026#34;FriendlyName=Mariana\u0026#34; \\ --data-urlencode \u0026#34;Identifier=+14158190280\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Initiate a text based conversation in Proxy curl -s -X POST \u0026#34;https://proxy.twilio.com/v1/Services/KSde3c424c7d19857cc86490a65e716c33/Sessions/KC4f9d17677d14ffe4de5f72332de6d1e3/Participants/KP6410763b307501ec84f85dc0a10dcb94/MessageInteractions\u0026#34; \\ --data-urlencode \u0026#34;Body=Reply to this message to chat with your Owl Taxis driver.\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # Delete A session curl -X DELETE \u0026#34;https://proxy.twilio.com/v1/Services/KSde3c424c7d19857cc86490a65e716c33/Sessions/KC4f9d17677d14ffe4de5f72332de6d1e3\u0026#34; \\ -u \u0026#34;ACbd010c3006bb82fcaa99bee8371644b6:${TWILIO_AUTH_TOKEN}\u0026#34; | jq \u0026#39;.\u0026#39; # MANUALLY CREATE TWILIO SIGNATURE echo -n \u0026#34;https://mycompany.com/myapp.php?foo=1\u0026amp;bar=2Caller+14158675310CallSidCA1234567890ABCDEDigits1234From+14158675310To+18005551212\u0026#34; | openssl dgst -sha1 -hmac \u0026#34;12345\u0026#34; -binary | base64 "},{"id":2,"href":"/twilio-apis/api/lookup/lookup-v1/","title":"Lookup v1","parent":"Lookup","content":"The Lookup API provides a way to retrieve additional information about a phone number.\nNUMBER  Performs basic phone number validation and conversion from regional formatting to E.164 (free).\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/lookup\\/number.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#number [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#number [data-query-params]\") .append(createKeyValuePair(\"number\")) }) document .querySelector(\"#number [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#number [data-request-headers]\") .append(createKeyValuePair(\"number\")) }) document.querySelector(\"#number [data-url]\").value = postmanParams.url document.querySelector(\"#number [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#number [data-query-params]\") .append( createKeyValuePair(\"number\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#number [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#number [data-request-path]\") .append( createKeyValuePair(\"number\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#number [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#number [data-request-headers]\") .append( createKeyValuePair( \"number\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#number [data-request-auth]\") .append( createKeyValuePair(\"number\", authParam.key, authParam.value) ) }) document .querySelector(\"#number [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#number [data-method]\").value auth = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-request-auth]\") ) path = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-request-path]\") ) headers = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#number [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#number [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#number [data-response-section]\")` ) document .querySelector(\"#number [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"number\", response.status) updateResponseBody(\"number\", response.data) updateRequestBody(\"number\", myRequest) }) .then(() = { document.querySelector(\"#number [data-json-response-body]\") document.querySelector(\"#number [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   CARRIER  Provides carrier info and type (mobile, landline or voip). Costs $0.005 per lookup.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/lookup\\/carrier.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#carrier [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#carrier [data-query-params]\") .append(createKeyValuePair(\"carrier\")) }) document .querySelector(\"#carrier [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#carrier [data-request-headers]\") .append(createKeyValuePair(\"carrier\")) }) document.querySelector(\"#carrier [data-url]\").value = postmanParams.url document.querySelector(\"#carrier [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#carrier [data-query-params]\") .append( createKeyValuePair(\"carrier\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#carrier [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#carrier [data-request-path]\") .append( createKeyValuePair(\"carrier\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#carrier [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#carrier [data-request-headers]\") .append( createKeyValuePair( \"carrier\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#carrier [data-request-auth]\") .append( createKeyValuePair(\"carrier\", authParam.key, authParam.value) ) }) document .querySelector(\"#carrier [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#carrier [data-method]\").value auth = keyValuePairsToObjects( \"carrier\", document.querySelector(\"#carrier [data-request-auth]\") ) path = keyValuePairsToObjects( \"carrier\", document.querySelector(\"#carrier [data-request-path]\") ) headers = keyValuePairsToObjects( \"carrier\", document.querySelector(\"#carrier [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"carrier\", document.querySelector(\"#carrier [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"carrier\", document.querySelector(\"#carrier [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#carrier [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#carrier [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#carrier [data-response-section]\")` ) document .querySelector(\"#carrier [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"carrier\", response.status) updateResponseBody(\"carrier\", response.data) updateRequestBody(\"carrier\", myRequest) }) .then(() = { document.querySelector(\"#carrier [data-json-response-body]\") document.querySelector(\"#carrier [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   CALLER NAME  Provides Caller Name and type (BUSINESS or CONSUMER). Currently available only in the US and costs $0.01 per lookup.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/lookup\\/caller-name.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#caller-name [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#caller-name [data-query-params]\") .append(createKeyValuePair(\"caller-name\")) }) document .querySelector(\"#caller-name [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#caller-name [data-request-headers]\") .append(createKeyValuePair(\"caller-name\")) }) document.querySelector(\"#caller-name [data-url]\").value = postmanParams.url document.querySelector(\"#caller-name [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#caller-name [data-query-params]\") .append( createKeyValuePair(\"caller-name\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#caller-name [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#caller-name [data-request-path]\") .append( createKeyValuePair(\"caller-name\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#caller-name [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#caller-name [data-request-headers]\") .append( createKeyValuePair( \"caller-name\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#caller-name [data-request-auth]\") .append( createKeyValuePair(\"caller-name\", authParam.key, authParam.value) ) }) document .querySelector(\"#caller-name [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#caller-name [data-method]\").value auth = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-request-auth]\") ) path = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-request-path]\") ) headers = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#caller-name [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#caller-name [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#caller-name [data-response-section]\")` ) document .querySelector(\"#caller-name [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"caller-name\", response.status) updateResponseBody(\"caller-name\", response.data) updateRequestBody(\"caller-name\", myRequest) }) .then(() = { document.querySelector(\"#caller-name [data-json-response-body]\") document.querySelector(\"#caller-name [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":3,"href":"/twilio-apis/api/numbers/phone-numbers-v1/","title":"Numbers v1","parent":"Numbers","content":"Phone Numbers API lets you search for available numbers, purchase and manage numbers.\nACTIVE  List all active phone numbers.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/phone-numbers\\/incoming.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#active [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active [data-query-params]\") .append(createKeyValuePair(\"active\")) }) document .querySelector(\"#active [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active [data-request-headers]\") .append(createKeyValuePair(\"active\")) }) document.querySelector(\"#active [data-url]\").value = postmanParams.url document.querySelector(\"#active [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#active [data-query-params]\") .append( createKeyValuePair(\"active\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#active [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#active [data-request-path]\") .append( createKeyValuePair(\"active\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#active [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#active [data-request-headers]\") .append( createKeyValuePair( \"active\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#active [data-request-auth]\") .append( createKeyValuePair(\"active\", authParam.key, authParam.value) ) }) document .querySelector(\"#active [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active [data-method]\").value auth = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-request-auth]\") ) path = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-request-path]\") ) headers = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#active [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active [data-response-section]\")` ) document .querySelector(\"#active [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active\", response.status) updateResponseBody(\"active\", response.data) updateRequestBody(\"active\", myRequest) }) .then(() = { document.querySelector(\"#active [data-json-response-body]\") document.querySelector(\"#active [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   TYPES  List available phone number types by country.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/phone-numbers\\/available-country.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#country [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#country [data-query-params]\") .append(createKeyValuePair(\"country\")) }) document .querySelector(\"#country [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#country [data-request-headers]\") .append(createKeyValuePair(\"country\")) }) document.querySelector(\"#country [data-url]\").value = postmanParams.url document.querySelector(\"#country [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#country [data-query-params]\") .append( createKeyValuePair(\"country\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#country [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#country [data-request-path]\") .append( createKeyValuePair(\"country\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#country [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#country [data-request-headers]\") .append( createKeyValuePair( \"country\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#country [data-request-auth]\") .append( createKeyValuePair(\"country\", authParam.key, authParam.value) ) }) document .querySelector(\"#country [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#country [data-method]\").value auth = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-request-auth]\") ) path = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-request-path]\") ) headers = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#country [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#country [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#country [data-response-section]\")` ) document .querySelector(\"#country [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"country\", response.status) updateResponseBody(\"country\", response.data) updateRequestBody(\"country\", myRequest) }) .then(() = { document.querySelector(\"#country [data-json-response-body]\") document.querySelector(\"#country [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   LOCAL  List available local phone numbers by country.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/phone-numbers\\/available-local.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#local [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#local [data-query-params]\") .append(createKeyValuePair(\"local\")) }) document .querySelector(\"#local [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#local [data-request-headers]\") .append(createKeyValuePair(\"local\")) }) document.querySelector(\"#local [data-url]\").value = postmanParams.url document.querySelector(\"#local [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#local [data-query-params]\") .append( createKeyValuePair(\"local\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#local [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#local [data-request-path]\") .append( createKeyValuePair(\"local\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#local [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#local [data-request-headers]\") .append( createKeyValuePair( \"local\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#local [data-request-auth]\") .append( createKeyValuePair(\"local\", authParam.key, authParam.value) ) }) document .querySelector(\"#local [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#local [data-method]\").value auth = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-request-auth]\") ) path = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-request-path]\") ) headers = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#local [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#local [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#local [data-response-section]\")` ) document .querySelector(\"#local [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"local\", response.status) updateResponseBody(\"local\", response.data) updateRequestBody(\"local\", myRequest) }) .then(() = { document.querySelector(\"#local [data-json-response-body]\") document.querySelector(\"#local [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   TOLL FREE  List available toll-free phone numbers by country.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/phone-numbers\\/available-tollfree.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#tollfree [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#tollfree [data-query-params]\") .append(createKeyValuePair(\"tollfree\")) }) document .querySelector(\"#tollfree [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#tollfree [data-request-headers]\") .append(createKeyValuePair(\"tollfree\")) }) document.querySelector(\"#tollfree [data-url]\").value = postmanParams.url document.querySelector(\"#tollfree [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#tollfree [data-query-params]\") .append( createKeyValuePair(\"tollfree\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#tollfree [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#tollfree [data-request-path]\") .append( createKeyValuePair(\"tollfree\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#tollfree [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#tollfree [data-request-headers]\") .append( createKeyValuePair( \"tollfree\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#tollfree [data-request-auth]\") .append( createKeyValuePair(\"tollfree\", authParam.key, authParam.value) ) }) document .querySelector(\"#tollfree [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#tollfree [data-method]\").value auth = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-request-auth]\") ) path = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-request-path]\") ) headers = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#tollfree [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#tollfree [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#tollfree [data-response-section]\")` ) document .querySelector(\"#tollfree [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"tollfree\", response.status) updateResponseBody(\"tollfree\", response.data) updateRequestBody(\"tollfree\", myRequest) }) .then(() = { document.querySelector(\"#tollfree [data-json-response-body]\") document.querySelector(\"#tollfree [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   MOBILE  List available mobile phone numbers by country.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/phone-numbers\\/available-mobile.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#mobile [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#mobile [data-query-params]\") .append(createKeyValuePair(\"mobile\")) }) document .querySelector(\"#mobile [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#mobile [data-request-headers]\") .append(createKeyValuePair(\"mobile\")) }) document.querySelector(\"#mobile [data-url]\").value = postmanParams.url document.querySelector(\"#mobile [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#mobile [data-query-params]\") .append( createKeyValuePair(\"mobile\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#mobile [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#mobile [data-request-path]\") .append( createKeyValuePair(\"mobile\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#mobile [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#mobile [data-request-headers]\") .append( createKeyValuePair( \"mobile\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#mobile [data-request-auth]\") .append( createKeyValuePair(\"mobile\", authParam.key, authParam.value) ) }) document .querySelector(\"#mobile [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#mobile [data-method]\").value auth = keyValuePairsToObjects( \"mobile\", document.querySelector(\"#mobile [data-request-auth]\") ) path = keyValuePairsToObjects( \"mobile\", document.querySelector(\"#mobile [data-request-path]\") ) headers = keyValuePairsToObjects( \"mobile\", document.querySelector(\"#mobile [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"mobile\", document.querySelector(\"#mobile [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"mobile\", document.querySelector(\"#mobile [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#mobile [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#mobile [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#mobile [data-response-section]\")` ) document .querySelector(\"#mobile [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"mobile\", response.status) updateResponseBody(\"mobile\", response.data) updateRequestBody(\"mobile\", myRequest) }) .then(() = { document.querySelector(\"#mobile [data-json-response-body]\") document.querySelector(\"#mobile [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":4,"href":"/twilio-apis/sdk/send-message/","title":"Send Message","parent":"SDKs","content":"How to send messages with the Twilio Messaging API.\nCLI  twilio api:core:messages:create \\ --to=$MOBILE_NUMBER \\ --from=$TWILIO_NUMBER \\ --body=\u0026#34;This is the ship that made the Kessel Run in fourteen parsecs?\u0026#34; \\ --media-url=\u0026#34;https://c1.staticflickr.com/3/2899/14341091933_1e92e62d12_b.jpg\u0026#34; \\ -o json | jq  Curl  curl -X POST \u0026#34;https://api.twilio.com/2010-04-01/Accounts/$TWILIO_ACCOUNT_SID/Messages.json\u0026#34; \\ -d \u0026#34;To=$MOBILE_NUMBER\u0026#34; \\ -d \u0026#34;From=$TWILIO_NUMBER\u0026#34; \\ -d \u0026#34;Body=This is the ship that made the Kessel Run in fourteen parsecs?\u0026#34; \\ -d \u0026#34;MediaUrl=https://c1.staticflickr.com/3/2899/14341091933_1e92e62d12_b.jpg\u0026#34; \\ -u $TWILIO_ACCOUNT_SID:$TWILIO_AUTH_TOKEN \\ | jq   Node  // Twilio Credentials // To set up environmental variables, see http://twil.io/secure const accountSid = process.env.TWILIO_ACCOUNT_SID; const authToken = process.env.TWILIO_AUTH_TOKEN; // require the Twilio module and create a REST client const client = require(\u0026#39;twilio\u0026#39;)(accountSid, authToken); client.messages .create({ to: \u0026#39;+15558675310\u0026#39;, from: \u0026#39;+15017122661\u0026#39;, body: \u0026#39;This is the ship that made the Kessel Run in fourteen parsecs?\u0026#39;, mediaUrl: \u0026#39;https://c1.staticflickr.com/3/2899/14341091933_1e92e62d12_b.jpg\u0026#39;, }) .then(message =\u0026gt; console.log(message.sid));   Python  import os from twilio.rest import Client # put your own credentials here # To set up environmental variables, see http://twil.io/secure account_sid = os.environ[\u0026#39;TWILIO_ACCOUNT_SID\u0026#39;] auth_token = os.environ[\u0026#39;TWILIO_AUTH_TOKEN\u0026#39;] client = Client(account_sid, auth_token) client.messages.create( to=\u0026#34;+15558675310\u0026#34;, from_=\u0026#34;+15017122661\u0026#34;, body=\u0026#34;This is the ship that made the Kessel Run in fourteen parsecs?\u0026#34;, media_url=\u0026#34;https://c1.staticflickr.com/3/2899/14341091933_1e92e62d12_b.jpg\u0026#34; )   Ruby  require \u0026#39;twilio-ruby\u0026#39; # put your own credentials here # To set up environmental variables, see http://twil.io/secure account_sid = ENV[\u0026#39;TWILIO_ACCOUNT_SID\u0026#39;] auth_token = ENV[\u0026#39;TWILIO_AUTH_TOKEN\u0026#39;] # set up a client to talk to the Twilio REST API @client = Twilio::REST::Client.new(account_sid, auth_token) @message = @client.messages.create( from: \u0026#39;+15017122661\u0026#39;, to: \u0026#39;+15558675310\u0026#39;, body: \u0026#39;This is the ship that made the Kessel Run in fourteen parsecs?\u0026#39;, media_url: \u0026#39;https://c1.staticflickr.com/3/2899/14341091933_1e92e62d12_b.jpg\u0026#39; ) puts @message.subresource_uris   C#  // Download the twilio-csharp library from twilio.com/docs/libraries/csharp using System; using Twilio; using Twilio.Rest.Api.V2010.Account; using Twilio.Types; using System.Collections.Generic; class Example { static void Main(string[] args) { // Find your Account Sid and Auth Token at twilio.com/console // To set up environmental variables, see http://twil.io/secure const string accountSid = Environment.GetEnvironmentVariable(\u0026#34;TWILIO_ACCOUNT_SID\u0026#34;); const string authToken = Environment.GetEnvironmentVariable(\u0026#34;TWILIO_AUTH_TOKEN\u0026#34;); TwilioClient.Init(accountSid, authToken); var mediaUrl = new List\u0026lt;Uri\u0026gt;() { new Uri( \u0026#34;https://c1.staticflickr.com/3/2899/14341091933_1e92e62d12_b.jpg\u0026#34; ) }; var to = new PhoneNumber(\u0026#34;+15017122661\u0026#34;); var message = MessageResource.Create( to, from: new PhoneNumber(\u0026#34;+15558675310\u0026#34;), body: \u0026#34;This is the ship that made the Kessel Run in fourteen parsecs?\u0026#34;, mediaUrl: mediaUrl); Console.WriteLine(message.Sid); } }   Java  // Install the Java helper library from twilio.com/docs/java/install import com.twilio.Twilio; import com.twilio.rest.api.v2010.account.Message; import com.twilio.type.PhoneNumber; public class Example { // Get your Account SID and Auth Token from https://twilio.com/console  // To set up environment variables, see http://twil.io/secure  public static final String ACCOUNT_SID = System.getenv(\u0026#34;TWILIO_ACCOUNT_SID\u0026#34;); public static final String AUTH_TOKEN = System.getenv(\u0026#34;TWILIO_AUTH_TOKEN\u0026#34;); public static void main(String[] args) { Twilio.init(ACCOUNT_SID, AUTH_TOKEN); Message message = Message .creator(new PhoneNumber(\u0026#34;+15558675310\u0026#34;), new PhoneNumber(\u0026#34;+15017122661\u0026#34;), \u0026#34;This is the ship that made the Kessel Run in fourteen parsecs?\u0026#34;) .setMediaUrl(\u0026#34;https://c1.staticflickr.com/3/2899/14341091933_1e92e62d12_b.jpg\u0026#34;) .create(); System.out.println(message.getSid()); } }   PHP  \u0026lt;?php // Get the PHP helper library from https://twilio.com/docs/libraries/php require_once \u0026#39;/path/to/vendor/autoload.php\u0026#39;; // Loads the library use Twilio\\Rest\\Client; // Your Account Sid and Auth Token from twilio.com/user/account // To set up environmental variables, see http://twil.io/secure $sid = getenv(\u0026#39;TWILIO_ACCOUNT_SID\u0026#39;); $token = getenv(\u0026#39;TWILIO_AUTH_TOKEN\u0026#39;); $client = new Client($sid, $token); $client-\u0026gt;messages-\u0026gt;create( \u0026#34;+15558675310\u0026#34;, array( \u0026#39;from\u0026#39; =\u0026gt; \u0026#39;+15017122661\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#34;This is the ship that made the Kessel Run in fourteen parsecs?\u0026#34;, \u0026#39;mediaUrl\u0026#39; =\u0026gt; \u0026#34;https://c1.staticflickr.com/3/2899/14341091933_1e92e62d12_b.jpg\u0026#34;, ) );    Example response     { \u0026#34;sid\u0026#34;: \u0026#34;MMc781610ec0b3400c9e0cab8e757da937\u0026#34;, \u0026#34;date_created\u0026#34;: \u0026#34;Mon, 19 Oct 2015 07:07:03 +0000\u0026#34;, \u0026#34;date_updated\u0026#34;: \u0026#34;Mon, 19 Oct 2015 07:07:03 +0000\u0026#34;, \u0026#34;date_sent\u0026#34;: null, \u0026#34;account_sid\u0026#34;: \u0026#34;ACXXXXXXXXX\u0026#34;, \u0026#34;to\u0026#34;: \u0026#34;+15558675310\u0026#34;, \u0026#34;from\u0026#34;: \u0026#34;+15017122661\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;This is the ship that made the Kessel Run in fourteen parsecs?\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;queued\u0026#34;, \u0026#34;num_segments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;num_media\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;direction\u0026#34;: \u0026#34;outbound-api\u0026#34;, \u0026#34;api_version\u0026#34;: \u0026#34;2010-04-01\u0026#34;, \u0026#34;price\u0026#34;: null, \u0026#34;price_unit\u0026#34;: \u0026#34;USD\u0026#34;, \u0026#34;error_code\u0026#34;: null, \u0026#34;error_message\u0026#34;: null, \u0026#34;uri\u0026#34;: \u0026#34;/2010-04-01/Accounts/ACXXXXXXXXX/Messages/MMc781610ec0b3400c9e0cab8e757da937.json\u0026#34;, \u0026#34;subresource_uris\u0026#34;: { \u0026#34;media\u0026#34;: \u0026#34;/2010-04-01/Accounts/ACXXXXXXXXX/Messages/MMc781610ec0b3400c9e0cab8e757da937/Media.json\u0026#34; } }  "},{"id":5,"href":"/twilio-apis/api/lookup/lookup-v2/","title":"Lookup v2","parent":"Lookup","content":"The Lookup v2 API provides a way to retrieve additional information about a phone number.\nNUMBER  Performs basic phone number validation and conversion from regional formatting to E.164 (free).\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/lookup-v2\\/number.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#number [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#number [data-query-params]\") .append(createKeyValuePair(\"number\")) }) document .querySelector(\"#number [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#number [data-request-headers]\") .append(createKeyValuePair(\"number\")) }) document.querySelector(\"#number [data-url]\").value = postmanParams.url document.querySelector(\"#number [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#number [data-query-params]\") .append( createKeyValuePair(\"number\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#number [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#number [data-request-path]\") .append( createKeyValuePair(\"number\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#number [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#number [data-request-headers]\") .append( createKeyValuePair( \"number\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#number [data-request-auth]\") .append( createKeyValuePair(\"number\", authParam.key, authParam.value) ) }) document .querySelector(\"#number [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#number [data-method]\").value auth = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-request-auth]\") ) path = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-request-path]\") ) headers = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#number [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#number [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#number [data-response-section]\")` ) document .querySelector(\"#number [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"number\", response.status) updateResponseBody(\"number\", response.data) updateRequestBody(\"number\", myRequest) }) .then(() = { document.querySelector(\"#number [data-json-response-body]\") document.querySelector(\"#number [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   INVALID  Performs basic phone number validation and conversion from regional formatting to E.164 (free).\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/lookup-v2\\/invalid-number.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#invalid-number [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#invalid-number [data-query-params]\") .append(createKeyValuePair(\"invalid-number\")) }) document .querySelector(\"#invalid-number [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#invalid-number [data-request-headers]\") .append(createKeyValuePair(\"invalid-number\")) }) document.querySelector(\"#invalid-number [data-url]\").value = postmanParams.url document.querySelector(\"#invalid-number [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#invalid-number [data-query-params]\") .append( createKeyValuePair(\"invalid-number\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#invalid-number [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#invalid-number [data-request-path]\") .append( createKeyValuePair(\"invalid-number\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#invalid-number [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#invalid-number [data-request-headers]\") .append( createKeyValuePair( \"invalid-number\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#invalid-number [data-request-auth]\") .append( createKeyValuePair(\"invalid-number\", authParam.key, authParam.value) ) }) document .querySelector(\"#invalid-number [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#invalid-number [data-method]\").value auth = keyValuePairsToObjects( \"invalid-number\", document.querySelector(\"#invalid-number [data-request-auth]\") ) path = keyValuePairsToObjects( \"invalid-number\", document.querySelector(\"#invalid-number [data-request-path]\") ) headers = keyValuePairsToObjects( \"invalid-number\", document.querySelector(\"#invalid-number [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"invalid-number\", document.querySelector(\"#invalid-number [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"invalid-number\", document.querySelector(\"#invalid-number [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#invalid-number [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#invalid-number [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#invalid-number [data-response-section]\")` ) document .querySelector(\"#invalid-number [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"invalid-number\", response.status) updateResponseBody(\"invalid-number\", response.data) updateRequestBody(\"invalid-number\", myRequest) }) .then(() = { document.querySelector(\"#invalid-number [data-json-response-body]\") document.querySelector(\"#invalid-number [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   LINE TYPE  Provides carrier info and type (mobile, landline or voip). Costs $0.005 per lookup.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/lookup-v2\\/line-type.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#line-type [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#line-type [data-query-params]\") .append(createKeyValuePair(\"line-type\")) }) document .querySelector(\"#line-type [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#line-type [data-request-headers]\") .append(createKeyValuePair(\"line-type\")) }) document.querySelector(\"#line-type [data-url]\").value = postmanParams.url document.querySelector(\"#line-type [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#line-type [data-query-params]\") .append( createKeyValuePair(\"line-type\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#line-type [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#line-type [data-request-path]\") .append( createKeyValuePair(\"line-type\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#line-type [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#line-type [data-request-headers]\") .append( createKeyValuePair( \"line-type\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#line-type [data-request-auth]\") .append( createKeyValuePair(\"line-type\", authParam.key, authParam.value) ) }) document .querySelector(\"#line-type [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#line-type [data-method]\").value auth = keyValuePairsToObjects( \"line-type\", document.querySelector(\"#line-type [data-request-auth]\") ) path = keyValuePairsToObjects( \"line-type\", document.querySelector(\"#line-type [data-request-path]\") ) headers = keyValuePairsToObjects( \"line-type\", document.querySelector(\"#line-type [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"line-type\", document.querySelector(\"#line-type [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"line-type\", document.querySelector(\"#line-type [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#line-type [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#line-type [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#line-type [data-response-section]\")` ) document .querySelector(\"#line-type [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"line-type\", response.status) updateResponseBody(\"line-type\", response.data) updateRequestBody(\"line-type\", myRequest) }) .then(() = { document.querySelector(\"#line-type [data-json-response-body]\") document.querySelector(\"#line-type [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   CALLER NAME  Provides Caller Name and type (BUSINESS or CONSUMER). Currently available only in the US and costs $0.01 per lookup.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/lookup-v2\\/caller-name.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#caller-name [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#caller-name [data-query-params]\") .append(createKeyValuePair(\"caller-name\")) }) document .querySelector(\"#caller-name [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#caller-name [data-request-headers]\") .append(createKeyValuePair(\"caller-name\")) }) document.querySelector(\"#caller-name [data-url]\").value = postmanParams.url document.querySelector(\"#caller-name [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#caller-name [data-query-params]\") .append( createKeyValuePair(\"caller-name\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#caller-name [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#caller-name [data-request-path]\") .append( createKeyValuePair(\"caller-name\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#caller-name [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#caller-name [data-request-headers]\") .append( createKeyValuePair( \"caller-name\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#caller-name [data-request-auth]\") .append( createKeyValuePair(\"caller-name\", authParam.key, authParam.value) ) }) document .querySelector(\"#caller-name [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#caller-name [data-method]\").value auth = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-request-auth]\") ) path = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-request-path]\") ) headers = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#caller-name [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#caller-name [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#caller-name [data-response-section]\")` ) document .querySelector(\"#caller-name [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"caller-name\", response.status) updateResponseBody(\"caller-name\", response.data) updateRequestBody(\"caller-name\", myRequest) }) .then(() = { document.querySelector(\"#caller-name [data-json-response-body]\") document.querySelector(\"#caller-name [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   MULTIPLE FIELDS  A comma-separated list of fields to return. Possible values are caller_name, sim_swap, call_forwarding, live_activity, enhanced_line_type or line_type_intelligence.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/lookup-v2\\/multiple.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#multiple [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#multiple [data-query-params]\") .append(createKeyValuePair(\"multiple\")) }) document .querySelector(\"#multiple [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#multiple [data-request-headers]\") .append(createKeyValuePair(\"multiple\")) }) document.querySelector(\"#multiple [data-url]\").value = postmanParams.url document.querySelector(\"#multiple [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#multiple [data-query-params]\") .append( createKeyValuePair(\"multiple\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#multiple [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#multiple [data-request-path]\") .append( createKeyValuePair(\"multiple\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#multiple [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#multiple [data-request-headers]\") .append( createKeyValuePair( \"multiple\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#multiple [data-request-auth]\") .append( createKeyValuePair(\"multiple\", authParam.key, authParam.value) ) }) document .querySelector(\"#multiple [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#multiple [data-method]\").value auth = keyValuePairsToObjects( \"multiple\", document.querySelector(\"#multiple [data-request-auth]\") ) path = keyValuePairsToObjects( \"multiple\", document.querySelector(\"#multiple [data-request-path]\") ) headers = keyValuePairsToObjects( \"multiple\", document.querySelector(\"#multiple [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"multiple\", document.querySelector(\"#multiple [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"multiple\", document.querySelector(\"#multiple [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#multiple [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#multiple [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#multiple [data-response-section]\")` ) document .querySelector(\"#multiple [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"multiple\", response.status) updateResponseBody(\"multiple\", response.data) updateRequestBody(\"multiple\", myRequest) }) .then(() = { document.querySelector(\"#multiple [data-json-response-body]\") document.querySelector(\"#multiple [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":6,"href":"/twilio-apis/api/numbers/available-numbers-v2-available/","title":"Numbers v2 - Available","parent":"Numbers","content":"The new Global Phone Numbers Catalog API lets you search for available numbers to purchase and to manage active numbers.\nTYPE  Search for available phone numbers by type (e.g. local, mobile, tollfree, shortcode.)\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/phone-numbers-v2\\/available-type.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#available-type [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#available-type [data-query-params]\") .append(createKeyValuePair(\"available-type\")) }) document .querySelector(\"#available-type [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#available-type [data-request-headers]\") .append(createKeyValuePair(\"available-type\")) }) document.querySelector(\"#available-type [data-url]\").value = postmanParams.url document.querySelector(\"#available-type [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#available-type [data-query-params]\") .append( createKeyValuePair(\"available-type\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#available-type [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#available-type [data-request-path]\") .append( createKeyValuePair(\"available-type\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#available-type [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#available-type [data-request-headers]\") .append( createKeyValuePair( \"available-type\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#available-type [data-request-auth]\") .append( createKeyValuePair(\"available-type\", authParam.key, authParam.value) ) }) document .querySelector(\"#available-type [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#available-type [data-method]\").value auth = keyValuePairsToObjects( \"available-type\", document.querySelector(\"#available-type [data-request-auth]\") ) path = keyValuePairsToObjects( \"available-type\", document.querySelector(\"#available-type [data-request-path]\") ) headers = keyValuePairsToObjects( \"available-type\", document.querySelector(\"#available-type [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"available-type\", document.querySelector(\"#available-type [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"available-type\", document.querySelector(\"#available-type [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#available-type [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#available-type [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#available-type [data-response-section]\")` ) document .querySelector(\"#available-type [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"available-type\", response.status) updateResponseBody(\"available-type\", response.data) updateRequestBody(\"available-type\", myRequest) }) .then(() = { document.querySelector(\"#available-type [data-json-response-body]\") document.querySelector(\"#available-type [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   USE CASE  Search for available phone numbers by use case (e.g. twilio.use-case.conversations.sms, twilio.use-case.marketing.sms, twilio.use-case.notifications.sms, twilio.use-case.verifications.sms, twilio.use-case.contact-centers.sms.)\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/phone-numbers-v2\\/available-use-case.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#available-use-case [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#available-use-case [data-query-params]\") .append(createKeyValuePair(\"available-use-case\")) }) document .querySelector(\"#available-use-case [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#available-use-case [data-request-headers]\") .append(createKeyValuePair(\"available-use-case\")) }) document.querySelector(\"#available-use-case [data-url]\").value = postmanParams.url document.querySelector(\"#available-use-case [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#available-use-case [data-query-params]\") .append( createKeyValuePair(\"available-use-case\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#available-use-case [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#available-use-case [data-request-path]\") .append( createKeyValuePair(\"available-use-case\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#available-use-case [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#available-use-case [data-request-headers]\") .append( createKeyValuePair( \"available-use-case\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#available-use-case [data-request-auth]\") .append( createKeyValuePair(\"available-use-case\", authParam.key, authParam.value) ) }) document .querySelector(\"#available-use-case [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#available-use-case [data-method]\").value auth = keyValuePairsToObjects( \"available-use-case\", document.querySelector(\"#available-use-case [data-request-auth]\") ) path = keyValuePairsToObjects( \"available-use-case\", document.querySelector(\"#available-use-case [data-request-path]\") ) headers = keyValuePairsToObjects( \"available-use-case\", document.querySelector(\"#available-use-case [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"available-use-case\", document.querySelector(\"#available-use-case [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"available-use-case\", document.querySelector(\"#available-use-case [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#available-use-case [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#available-use-case [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#available-use-case [data-response-section]\")` ) document .querySelector(\"#available-use-case [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"available-use-case\", response.status) updateResponseBody(\"available-use-case\", response.data) updateRequestBody(\"available-use-case\", myRequest) }) .then(() = { document.querySelector(\"#available-use-case [data-json-response-body]\") document.querySelector(\"#available-use-case [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   CAPABILITIES    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/phone-numbers-v2\\/available-capabilities.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#available-capabilities [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#available-capabilities [data-query-params]\") .append(createKeyValuePair(\"available-capabilities\")) }) document .querySelector(\"#available-capabilities [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#available-capabilities [data-request-headers]\") .append(createKeyValuePair(\"available-capabilities\")) }) document.querySelector(\"#available-capabilities [data-url]\").value = postmanParams.url document.querySelector(\"#available-capabilities [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#available-capabilities [data-query-params]\") .append( createKeyValuePair(\"available-capabilities\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#available-capabilities [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#available-capabilities [data-request-path]\") .append( createKeyValuePair(\"available-capabilities\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#available-capabilities [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#available-capabilities [data-request-headers]\") .append( createKeyValuePair( \"available-capabilities\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#available-capabilities [data-request-auth]\") .append( createKeyValuePair(\"available-capabilities\", authParam.key, authParam.value) ) }) document .querySelector(\"#available-capabilities [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#available-capabilities [data-method]\").value auth = keyValuePairsToObjects( \"available-capabilities\", document.querySelector(\"#available-capabilities [data-request-auth]\") ) path = keyValuePairsToObjects( \"available-capabilities\", document.querySelector(\"#available-capabilities [data-request-path]\") ) headers = keyValuePairsToObjects( \"available-capabilities\", document.querySelector(\"#available-capabilities [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"available-capabilities\", document.querySelector(\"#available-capabilities [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"available-capabilities\", document.querySelector(\"#available-capabilities [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#available-capabilities [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#available-capabilities [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#available-capabilities [data-response-section]\")` ) document .querySelector(\"#available-capabilities [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"available-capabilities\", response.status) updateResponseBody(\"available-capabilities\", response.data) updateRequestBody(\"available-capabilities\", myRequest) }) .then(() = { document.querySelector(\"#available-capabilities [data-json-response-body]\") document.querySelector(\"#available-capabilities [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":7,"href":"/twilio-apis/api/conversations/participants/","title":"Participants","parent":"Conversations","content":"Add/remove participants to/from a conversation.\nAdd SMS Participant    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/create-sms-participant.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#create-sms-participant [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-sms-participant [data-query-params]\") .append(createKeyValuePair(\"create-sms-participant\")) }) document .querySelector(\"#create-sms-participant [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-sms-participant [data-request-headers]\") .append(createKeyValuePair(\"create-sms-participant\")) }) document.querySelector(\"#create-sms-participant [data-url]\").value = postmanParams.url document.querySelector(\"#create-sms-participant [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#create-sms-participant [data-query-params]\") .append( createKeyValuePair(\"create-sms-participant\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#create-sms-participant [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#create-sms-participant [data-request-path]\") .append( createKeyValuePair(\"create-sms-participant\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#create-sms-participant [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#create-sms-participant [data-request-headers]\") .append( createKeyValuePair( \"create-sms-participant\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#create-sms-participant [data-request-auth]\") .append( createKeyValuePair(\"create-sms-participant\", authParam.key, authParam.value) ) }) document .querySelector(\"#create-sms-participant [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create-sms-participant [data-method]\").value auth = keyValuePairsToObjects( \"create-sms-participant\", document.querySelector(\"#create-sms-participant [data-request-auth]\") ) path = keyValuePairsToObjects( \"create-sms-participant\", document.querySelector(\"#create-sms-participant [data-request-path]\") ) headers = keyValuePairsToObjects( \"create-sms-participant\", document.querySelector(\"#create-sms-participant [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create-sms-participant\", document.querySelector(\"#create-sms-participant [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create-sms-participant\", document.querySelector(\"#create-sms-participant [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create-sms-participant [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#create-sms-participant [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create-sms-participant [data-response-section]\")` ) document .querySelector(\"#create-sms-participant [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create-sms-participant\", response.status) updateResponseBody(\"create-sms-participant\", response.data) updateRequestBody(\"create-sms-participant\", myRequest) }) .then(() = { document.querySelector(\"#create-sms-participant [data-json-response-body]\") document.querySelector(\"#create-sms-participant [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Add Chat Participant    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/create-chat-participant.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#create-chat-participant [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-chat-participant [data-query-params]\") .append(createKeyValuePair(\"create-chat-participant\")) }) document .querySelector(\"#create-chat-participant [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-chat-participant [data-request-headers]\") .append(createKeyValuePair(\"create-chat-participant\")) }) document.querySelector(\"#create-chat-participant [data-url]\").value = postmanParams.url document.querySelector(\"#create-chat-participant [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#create-chat-participant [data-query-params]\") .append( createKeyValuePair(\"create-chat-participant\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#create-chat-participant [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#create-chat-participant [data-request-path]\") .append( createKeyValuePair(\"create-chat-participant\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#create-chat-participant [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#create-chat-participant [data-request-headers]\") .append( createKeyValuePair( \"create-chat-participant\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#create-chat-participant [data-request-auth]\") .append( createKeyValuePair(\"create-chat-participant\", authParam.key, authParam.value) ) }) document .querySelector(\"#create-chat-participant [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create-chat-participant [data-method]\").value auth = keyValuePairsToObjects( \"create-chat-participant\", document.querySelector(\"#create-chat-participant [data-request-auth]\") ) path = keyValuePairsToObjects( \"create-chat-participant\", document.querySelector(\"#create-chat-participant [data-request-path]\") ) headers = keyValuePairsToObjects( \"create-chat-participant\", document.querySelector(\"#create-chat-participant [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create-chat-participant\", document.querySelector(\"#create-chat-participant [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create-chat-participant\", document.querySelector(\"#create-chat-participant [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create-chat-participant [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#create-chat-participant [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create-chat-participant [data-response-section]\")` ) document .querySelector(\"#create-chat-participant [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create-chat-participant\", response.status) updateResponseBody(\"create-chat-participant\", response.data) updateRequestBody(\"create-chat-participant\", myRequest) }) .then(() = { document.querySelector(\"#create-chat-participant [data-json-response-body]\") document.querySelector(\"#create-chat-participant [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   List    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/list-participants.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#list-participants [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list-participants [data-query-params]\") .append(createKeyValuePair(\"list-participants\")) }) document .querySelector(\"#list-participants [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list-participants [data-request-headers]\") .append(createKeyValuePair(\"list-participants\")) }) document.querySelector(\"#list-participants [data-url]\").value = postmanParams.url document.querySelector(\"#list-participants [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#list-participants [data-query-params]\") .append( createKeyValuePair(\"list-participants\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#list-participants [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#list-participants [data-request-path]\") .append( createKeyValuePair(\"list-participants\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#list-participants [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#list-participants [data-request-headers]\") .append( createKeyValuePair( \"list-participants\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#list-participants [data-request-auth]\") .append( createKeyValuePair(\"list-participants\", authParam.key, authParam.value) ) }) document .querySelector(\"#list-participants [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#list-participants [data-method]\").value auth = keyValuePairsToObjects( \"list-participants\", document.querySelector(\"#list-participants [data-request-auth]\") ) path = keyValuePairsToObjects( \"list-participants\", document.querySelector(\"#list-participants [data-request-path]\") ) headers = keyValuePairsToObjects( \"list-participants\", document.querySelector(\"#list-participants [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"list-participants\", document.querySelector(\"#list-participants [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"list-participants\", document.querySelector(\"#list-participants [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#list-participants [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#list-participants [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#list-participants [data-response-section]\")` ) document .querySelector(\"#list-participants [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"list-participants\", response.status) updateResponseBody(\"list-participants\", response.data) updateRequestBody(\"list-participants\", myRequest) }) .then(() = { document.querySelector(\"#list-participants [data-json-response-body]\") document.querySelector(\"#list-participants [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Fetch    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/fetch-participant.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#fetch-participant [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-participant [data-query-params]\") .append(createKeyValuePair(\"fetch-participant\")) }) document .querySelector(\"#fetch-participant [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-participant [data-request-headers]\") .append(createKeyValuePair(\"fetch-participant\")) }) document.querySelector(\"#fetch-participant [data-url]\").value = postmanParams.url document.querySelector(\"#fetch-participant [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#fetch-participant [data-query-params]\") .append( createKeyValuePair(\"fetch-participant\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#fetch-participant [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#fetch-participant [data-request-path]\") .append( createKeyValuePair(\"fetch-participant\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#fetch-participant [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#fetch-participant [data-request-headers]\") .append( createKeyValuePair( \"fetch-participant\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#fetch-participant [data-request-auth]\") .append( createKeyValuePair(\"fetch-participant\", authParam.key, authParam.value) ) }) document .querySelector(\"#fetch-participant [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#fetch-participant [data-method]\").value auth = keyValuePairsToObjects( \"fetch-participant\", document.querySelector(\"#fetch-participant [data-request-auth]\") ) path = keyValuePairsToObjects( \"fetch-participant\", document.querySelector(\"#fetch-participant [data-request-path]\") ) headers = keyValuePairsToObjects( \"fetch-participant\", document.querySelector(\"#fetch-participant [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"fetch-participant\", document.querySelector(\"#fetch-participant [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"fetch-participant\", document.querySelector(\"#fetch-participant [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#fetch-participant [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#fetch-participant [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#fetch-participant [data-response-section]\")` ) document .querySelector(\"#fetch-participant [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"fetch-participant\", response.status) updateResponseBody(\"fetch-participant\", response.data) updateRequestBody(\"fetch-participant\", myRequest) }) .then(() = { document.querySelector(\"#fetch-participant [data-json-response-body]\") document.querySelector(\"#fetch-participant [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Update    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/update-participant.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#update-participant [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update-participant [data-query-params]\") .append(createKeyValuePair(\"update-participant\")) }) document .querySelector(\"#update-participant [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update-participant [data-request-headers]\") .append(createKeyValuePair(\"update-participant\")) }) document.querySelector(\"#update-participant [data-url]\").value = postmanParams.url document.querySelector(\"#update-participant [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#update-participant [data-query-params]\") .append( createKeyValuePair(\"update-participant\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#update-participant [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#update-participant [data-request-path]\") .append( createKeyValuePair(\"update-participant\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#update-participant [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#update-participant [data-request-headers]\") .append( createKeyValuePair( \"update-participant\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#update-participant [data-request-auth]\") .append( createKeyValuePair(\"update-participant\", authParam.key, authParam.value) ) }) document .querySelector(\"#update-participant [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#update-participant [data-method]\").value auth = keyValuePairsToObjects( \"update-participant\", document.querySelector(\"#update-participant [data-request-auth]\") ) path = keyValuePairsToObjects( \"update-participant\", document.querySelector(\"#update-participant [data-request-path]\") ) headers = keyValuePairsToObjects( \"update-participant\", document.querySelector(\"#update-participant [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"update-participant\", document.querySelector(\"#update-participant [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"update-participant\", document.querySelector(\"#update-participant [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#update-participant [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#update-participant [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#update-participant [data-response-section]\")` ) document .querySelector(\"#update-participant [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"update-participant\", response.status) updateResponseBody(\"update-participant\", response.data) updateRequestBody(\"update-participant\", myRequest) }) .then(() = { document.querySelector(\"#update-participant [data-json-response-body]\") document.querySelector(\"#update-participant [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Delete    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/delete-participant.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#delete-participant [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete-participant [data-query-params]\") .append(createKeyValuePair(\"delete-participant\")) }) document .querySelector(\"#delete-participant [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete-participant [data-request-headers]\") .append(createKeyValuePair(\"delete-participant\")) }) document.querySelector(\"#delete-participant [data-url]\").value = postmanParams.url document.querySelector(\"#delete-participant [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#delete-participant [data-query-params]\") .append( createKeyValuePair(\"delete-participant\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#delete-participant [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#delete-participant [data-request-path]\") .append( createKeyValuePair(\"delete-participant\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#delete-participant [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#delete-participant [data-request-headers]\") .append( createKeyValuePair( \"delete-participant\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#delete-participant [data-request-auth]\") .append( createKeyValuePair(\"delete-participant\", authParam.key, authParam.value) ) }) document .querySelector(\"#delete-participant [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#delete-participant [data-method]\").value auth = keyValuePairsToObjects( \"delete-participant\", document.querySelector(\"#delete-participant [data-request-auth]\") ) path = keyValuePairsToObjects( \"delete-participant\", document.querySelector(\"#delete-participant [data-request-path]\") ) headers = keyValuePairsToObjects( \"delete-participant\", document.querySelector(\"#delete-participant [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"delete-participant\", document.querySelector(\"#delete-participant [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"delete-participant\", document.querySelector(\"#delete-participant [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#delete-participant [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#delete-participant [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#delete-participant [data-response-section]\")` ) document .querySelector(\"#delete-participant [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"delete-participant\", response.status) updateResponseBody(\"delete-participant\", response.data) updateRequestBody(\"delete-participant\", myRequest) }) .then(() = { document.querySelector(\"#delete-participant [data-json-response-body]\") document.querySelector(\"#delete-participant [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":8,"href":"/twilio-apis/api/conversations/messages/","title":"Messages","parent":"Conversations","content":"Add messages to a conversation.\nCreate    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/create-message.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#create-message [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-message [data-query-params]\") .append(createKeyValuePair(\"create-message\")) }) document .querySelector(\"#create-message [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-message [data-request-headers]\") .append(createKeyValuePair(\"create-message\")) }) document.querySelector(\"#create-message [data-url]\").value = postmanParams.url document.querySelector(\"#create-message [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#create-message [data-query-params]\") .append( createKeyValuePair(\"create-message\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#create-message [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#create-message [data-request-path]\") .append( createKeyValuePair(\"create-message\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#create-message [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#create-message [data-request-headers]\") .append( createKeyValuePair( \"create-message\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#create-message [data-request-auth]\") .append( createKeyValuePair(\"create-message\", authParam.key, authParam.value) ) }) document .querySelector(\"#create-message [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create-message [data-method]\").value auth = keyValuePairsToObjects( \"create-message\", document.querySelector(\"#create-message [data-request-auth]\") ) path = keyValuePairsToObjects( \"create-message\", document.querySelector(\"#create-message [data-request-path]\") ) headers = keyValuePairsToObjects( \"create-message\", document.querySelector(\"#create-message [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create-message\", document.querySelector(\"#create-message [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create-message\", document.querySelector(\"#create-message [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create-message [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#create-message [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create-message [data-response-section]\")` ) document .querySelector(\"#create-message [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create-message\", response.status) updateResponseBody(\"create-message\", response.data) updateRequestBody(\"create-message\", myRequest) }) .then(() = { document.querySelector(\"#create-message [data-json-response-body]\") document.querySelector(\"#create-message [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   List    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/list-messages.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#list-messages [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list-messages [data-query-params]\") .append(createKeyValuePair(\"list-messages\")) }) document .querySelector(\"#list-messages [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list-messages [data-request-headers]\") .append(createKeyValuePair(\"list-messages\")) }) document.querySelector(\"#list-messages [data-url]\").value = postmanParams.url document.querySelector(\"#list-messages [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#list-messages [data-query-params]\") .append( createKeyValuePair(\"list-messages\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#list-messages [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#list-messages [data-request-path]\") .append( createKeyValuePair(\"list-messages\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#list-messages [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#list-messages [data-request-headers]\") .append( createKeyValuePair( \"list-messages\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#list-messages [data-request-auth]\") .append( createKeyValuePair(\"list-messages\", authParam.key, authParam.value) ) }) document .querySelector(\"#list-messages [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#list-messages [data-method]\").value auth = keyValuePairsToObjects( \"list-messages\", document.querySelector(\"#list-messages [data-request-auth]\") ) path = keyValuePairsToObjects( \"list-messages\", document.querySelector(\"#list-messages [data-request-path]\") ) headers = keyValuePairsToObjects( \"list-messages\", document.querySelector(\"#list-messages [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"list-messages\", document.querySelector(\"#list-messages [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"list-messages\", document.querySelector(\"#list-messages [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#list-messages [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#list-messages [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#list-messages [data-response-section]\")` ) document .querySelector(\"#list-messages [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"list-messages\", response.status) updateResponseBody(\"list-messages\", response.data) updateRequestBody(\"list-messages\", myRequest) }) .then(() = { document.querySelector(\"#list-messages [data-json-response-body]\") document.querySelector(\"#list-messages [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Fetch    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/fetch-message.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#fetch-message [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-message [data-query-params]\") .append(createKeyValuePair(\"fetch-message\")) }) document .querySelector(\"#fetch-message [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-message [data-request-headers]\") .append(createKeyValuePair(\"fetch-message\")) }) document.querySelector(\"#fetch-message [data-url]\").value = postmanParams.url document.querySelector(\"#fetch-message [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#fetch-message [data-query-params]\") .append( createKeyValuePair(\"fetch-message\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#fetch-message [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#fetch-message [data-request-path]\") .append( createKeyValuePair(\"fetch-message\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#fetch-message [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#fetch-message [data-request-headers]\") .append( createKeyValuePair( \"fetch-message\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#fetch-message [data-request-auth]\") .append( createKeyValuePair(\"fetch-message\", authParam.key, authParam.value) ) }) document .querySelector(\"#fetch-message [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#fetch-message [data-method]\").value auth = keyValuePairsToObjects( \"fetch-message\", document.querySelector(\"#fetch-message [data-request-auth]\") ) path = keyValuePairsToObjects( \"fetch-message\", document.querySelector(\"#fetch-message [data-request-path]\") ) headers = keyValuePairsToObjects( \"fetch-message\", document.querySelector(\"#fetch-message [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"fetch-message\", document.querySelector(\"#fetch-message [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"fetch-message\", document.querySelector(\"#fetch-message [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#fetch-message [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#fetch-message [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#fetch-message [data-response-section]\")` ) document .querySelector(\"#fetch-message [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"fetch-message\", response.status) updateResponseBody(\"fetch-message\", response.data) updateRequestBody(\"fetch-message\", myRequest) }) .then(() = { document.querySelector(\"#fetch-message [data-json-response-body]\") document.querySelector(\"#fetch-message [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Update    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/update-message.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#update-message [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update-message [data-query-params]\") .append(createKeyValuePair(\"update-message\")) }) document .querySelector(\"#update-message [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update-message [data-request-headers]\") .append(createKeyValuePair(\"update-message\")) }) document.querySelector(\"#update-message [data-url]\").value = postmanParams.url document.querySelector(\"#update-message [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#update-message [data-query-params]\") .append( createKeyValuePair(\"update-message\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#update-message [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#update-message [data-request-path]\") .append( createKeyValuePair(\"update-message\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#update-message [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#update-message [data-request-headers]\") .append( createKeyValuePair( \"update-message\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#update-message [data-request-auth]\") .append( createKeyValuePair(\"update-message\", authParam.key, authParam.value) ) }) document .querySelector(\"#update-message [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#update-message [data-method]\").value auth = keyValuePairsToObjects( \"update-message\", document.querySelector(\"#update-message [data-request-auth]\") ) path = keyValuePairsToObjects( \"update-message\", document.querySelector(\"#update-message [data-request-path]\") ) headers = keyValuePairsToObjects( \"update-message\", document.querySelector(\"#update-message [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"update-message\", document.querySelector(\"#update-message [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"update-message\", document.querySelector(\"#update-message [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#update-message [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#update-message [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#update-message [data-response-section]\")` ) document .querySelector(\"#update-message [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"update-message\", response.status) updateResponseBody(\"update-message\", response.data) updateRequestBody(\"update-message\", myRequest) }) .then(() = { document.querySelector(\"#update-message [data-json-response-body]\") document.querySelector(\"#update-message [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Delete    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/delete-message.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#delete-message [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete-message [data-query-params]\") .append(createKeyValuePair(\"delete-message\")) }) document .querySelector(\"#delete-message [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete-message [data-request-headers]\") .append(createKeyValuePair(\"delete-message\")) }) document.querySelector(\"#delete-message [data-url]\").value = postmanParams.url document.querySelector(\"#delete-message [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#delete-message [data-query-params]\") .append( createKeyValuePair(\"delete-message\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#delete-message [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#delete-message [data-request-path]\") .append( createKeyValuePair(\"delete-message\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#delete-message [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#delete-message [data-request-headers]\") .append( createKeyValuePair( \"delete-message\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#delete-message [data-request-auth]\") .append( createKeyValuePair(\"delete-message\", authParam.key, authParam.value) ) }) document .querySelector(\"#delete-message [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#delete-message [data-method]\").value auth = keyValuePairsToObjects( \"delete-message\", document.querySelector(\"#delete-message [data-request-auth]\") ) path = keyValuePairsToObjects( \"delete-message\", document.querySelector(\"#delete-message [data-request-path]\") ) headers = keyValuePairsToObjects( \"delete-message\", document.querySelector(\"#delete-message [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"delete-message\", document.querySelector(\"#delete-message [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"delete-message\", document.querySelector(\"#delete-message [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#delete-message [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#delete-message [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#delete-message [data-response-section]\")` ) document .querySelector(\"#delete-message [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"delete-message\", response.status) updateResponseBody(\"delete-message\", response.data) updateRequestBody(\"delete-message\", myRequest) }) .then(() = { document.querySelector(\"#delete-message [data-json-response-body]\") document.querySelector(\"#delete-message [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":9,"href":"/twilio-apis/api/numbers/phone-numbers-v2-active/","title":"Numbers v2 - Active","parent":"Numbers","content":"The new Global Phone Numbers Catalog API lets you search for available numbers to purchase and to manage active numbers.\nLIST  List all active phone numbers. Optionally filter by PhoneNumber, Geography, and Type (e.g. local, mobile, tollfree, shortcode.)\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/phone-numbers-v2\\/active-list.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#active-list [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-list [data-query-params]\") .append(createKeyValuePair(\"active-list\")) }) document .querySelector(\"#active-list [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-list [data-request-headers]\") .append(createKeyValuePair(\"active-list\")) }) document.querySelector(\"#active-list [data-url]\").value = postmanParams.url document.querySelector(\"#active-list [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#active-list [data-query-params]\") .append( createKeyValuePair(\"active-list\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#active-list [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#active-list [data-request-path]\") .append( createKeyValuePair(\"active-list\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#active-list [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#active-list [data-request-headers]\") .append( createKeyValuePair( \"active-list\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#active-list [data-request-auth]\") .append( createKeyValuePair(\"active-list\", authParam.key, authParam.value) ) }) document .querySelector(\"#active-list [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active-list [data-method]\").value auth = keyValuePairsToObjects( \"active-list\", document.querySelector(\"#active-list [data-request-auth]\") ) path = keyValuePairsToObjects( \"active-list\", document.querySelector(\"#active-list [data-request-path]\") ) headers = keyValuePairsToObjects( \"active-list\", document.querySelector(\"#active-list [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active-list\", document.querySelector(\"#active-list [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active-list\", document.querySelector(\"#active-list [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active-list [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#active-list [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active-list [data-response-section]\")` ) document .querySelector(\"#active-list [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active-list\", response.status) updateResponseBody(\"active-list\", response.data) updateRequestBody(\"active-list\", myRequest) }) .then(() = { document.querySelector(\"#active-list [data-json-response-body]\") document.querySelector(\"#active-list [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   GET    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/phone-numbers-v2\\/active-get.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#active-get [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-get [data-query-params]\") .append(createKeyValuePair(\"active-get\")) }) document .querySelector(\"#active-get [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-get [data-request-headers]\") .append(createKeyValuePair(\"active-get\")) }) document.querySelector(\"#active-get [data-url]\").value = postmanParams.url document.querySelector(\"#active-get [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#active-get [data-query-params]\") .append( createKeyValuePair(\"active-get\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#active-get [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#active-get [data-request-path]\") .append( createKeyValuePair(\"active-get\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#active-get [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#active-get [data-request-headers]\") .append( createKeyValuePair( \"active-get\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#active-get [data-request-auth]\") .append( createKeyValuePair(\"active-get\", authParam.key, authParam.value) ) }) document .querySelector(\"#active-get [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active-get [data-method]\").value auth = keyValuePairsToObjects( \"active-get\", document.querySelector(\"#active-get [data-request-auth]\") ) path = keyValuePairsToObjects( \"active-get\", document.querySelector(\"#active-get [data-request-path]\") ) headers = keyValuePairsToObjects( \"active-get\", document.querySelector(\"#active-get [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active-get\", document.querySelector(\"#active-get [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active-get\", document.querySelector(\"#active-get [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active-get [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#active-get [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active-get [data-response-section]\")` ) document .querySelector(\"#active-get [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active-get\", response.status) updateResponseBody(\"active-get\", response.data) updateRequestBody(\"active-get\", myRequest) }) .then(() = { document.querySelector(\"#active-get [data-json-response-body]\") document.querySelector(\"#active-get [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   PURCHASE    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/phone-numbers-v2\\/active-purchase.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#active-purchase [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-purchase [data-query-params]\") .append(createKeyValuePair(\"active-purchase\")) }) document .querySelector(\"#active-purchase [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-purchase [data-request-headers]\") .append(createKeyValuePair(\"active-purchase\")) }) document.querySelector(\"#active-purchase [data-url]\").value = postmanParams.url document.querySelector(\"#active-purchase [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#active-purchase [data-query-params]\") .append( createKeyValuePair(\"active-purchase\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#active-purchase [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#active-purchase [data-request-path]\") .append( createKeyValuePair(\"active-purchase\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#active-purchase [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#active-purchase [data-request-headers]\") .append( createKeyValuePair( \"active-purchase\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#active-purchase [data-request-auth]\") .append( createKeyValuePair(\"active-purchase\", authParam.key, authParam.value) ) }) document .querySelector(\"#active-purchase [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active-purchase [data-method]\").value auth = keyValuePairsToObjects( \"active-purchase\", document.querySelector(\"#active-purchase [data-request-auth]\") ) path = keyValuePairsToObjects( \"active-purchase\", document.querySelector(\"#active-purchase [data-request-path]\") ) headers = keyValuePairsToObjects( \"active-purchase\", document.querySelector(\"#active-purchase [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active-purchase\", document.querySelector(\"#active-purchase [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active-purchase\", document.querySelector(\"#active-purchase [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active-purchase [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#active-purchase [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active-purchase [data-response-section]\")` ) document .querySelector(\"#active-purchase [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active-purchase\", response.status) updateResponseBody(\"active-purchase\", response.data) updateRequestBody(\"active-purchase\", myRequest) }) .then(() = { document.querySelector(\"#active-purchase [data-json-response-body]\") document.querySelector(\"#active-purchase [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   CONFIG    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/phone-numbers-v2\\/active-config.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#active-config [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-config [data-query-params]\") .append(createKeyValuePair(\"active-config\")) }) document .querySelector(\"#active-config [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-config [data-request-headers]\") .append(createKeyValuePair(\"active-config\")) }) document.querySelector(\"#active-config [data-url]\").value = postmanParams.url document.querySelector(\"#active-config [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#active-config [data-query-params]\") .append( createKeyValuePair(\"active-config\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#active-config [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#active-config [data-request-path]\") .append( createKeyValuePair(\"active-config\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#active-config [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#active-config [data-request-headers]\") .append( createKeyValuePair( \"active-config\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#active-config [data-request-auth]\") .append( createKeyValuePair(\"active-config\", authParam.key, authParam.value) ) }) document .querySelector(\"#active-config [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active-config [data-method]\").value auth = keyValuePairsToObjects( \"active-config\", document.querySelector(\"#active-config [data-request-auth]\") ) path = keyValuePairsToObjects( \"active-config\", document.querySelector(\"#active-config [data-request-path]\") ) headers = keyValuePairsToObjects( \"active-config\", document.querySelector(\"#active-config [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active-config\", document.querySelector(\"#active-config [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active-config\", document.querySelector(\"#active-config [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active-config [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#active-config [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active-config [data-response-section]\")` ) document .querySelector(\"#active-config [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active-config\", response.status) updateResponseBody(\"active-config\", response.data) updateRequestBody(\"active-config\", myRequest) }) .then(() = { document.querySelector(\"#active-config [data-json-response-body]\") document.querySelector(\"#active-config [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   TRANSFER    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/phone-numbers-v2\\/active-transfer.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#active-transfer [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-transfer [data-query-params]\") .append(createKeyValuePair(\"active-transfer\")) }) document .querySelector(\"#active-transfer [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-transfer [data-request-headers]\") .append(createKeyValuePair(\"active-transfer\")) }) document.querySelector(\"#active-transfer [data-url]\").value = postmanParams.url document.querySelector(\"#active-transfer [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#active-transfer [data-query-params]\") .append( createKeyValuePair(\"active-transfer\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#active-transfer [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#active-transfer [data-request-path]\") .append( createKeyValuePair(\"active-transfer\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#active-transfer [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#active-transfer [data-request-headers]\") .append( createKeyValuePair( \"active-transfer\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#active-transfer [data-request-auth]\") .append( createKeyValuePair(\"active-transfer\", authParam.key, authParam.value) ) }) document .querySelector(\"#active-transfer [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active-transfer [data-method]\").value auth = keyValuePairsToObjects( \"active-transfer\", document.querySelector(\"#active-transfer [data-request-auth]\") ) path = keyValuePairsToObjects( \"active-transfer\", document.querySelector(\"#active-transfer [data-request-path]\") ) headers = keyValuePairsToObjects( \"active-transfer\", document.querySelector(\"#active-transfer [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active-transfer\", document.querySelector(\"#active-transfer [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active-transfer\", document.querySelector(\"#active-transfer [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active-transfer [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#active-transfer [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active-transfer [data-response-section]\")` ) document .querySelector(\"#active-transfer [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active-transfer\", response.status) updateResponseBody(\"active-transfer\", response.data) updateRequestBody(\"active-transfer\", myRequest) }) .then(() = { document.querySelector(\"#active-transfer [data-json-response-body]\") document.querySelector(\"#active-transfer [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   DELETE    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/phone-numbers-v2\\/active-delete.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#active-delete [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-delete [data-query-params]\") .append(createKeyValuePair(\"active-delete\")) }) document .querySelector(\"#active-delete [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-delete [data-request-headers]\") .append(createKeyValuePair(\"active-delete\")) }) document.querySelector(\"#active-delete [data-url]\").value = postmanParams.url document.querySelector(\"#active-delete [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#active-delete [data-query-params]\") .append( createKeyValuePair(\"active-delete\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#active-delete [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#active-delete [data-request-path]\") .append( createKeyValuePair(\"active-delete\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#active-delete [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#active-delete [data-request-headers]\") .append( createKeyValuePair( \"active-delete\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#active-delete [data-request-auth]\") .append( createKeyValuePair(\"active-delete\", authParam.key, authParam.value) ) }) document .querySelector(\"#active-delete [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active-delete [data-method]\").value auth = keyValuePairsToObjects( \"active-delete\", document.querySelector(\"#active-delete [data-request-auth]\") ) path = keyValuePairsToObjects( \"active-delete\", document.querySelector(\"#active-delete [data-request-path]\") ) headers = keyValuePairsToObjects( \"active-delete\", document.querySelector(\"#active-delete [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active-delete\", document.querySelector(\"#active-delete [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active-delete\", document.querySelector(\"#active-delete [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active-delete [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#active-delete [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active-delete [data-response-section]\")` ) document .querySelector(\"#active-delete [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active-delete\", response.status) updateResponseBody(\"active-delete\", response.data) updateRequestBody(\"active-delete\", myRequest) }) .then(() = { document.querySelector(\"#active-delete [data-json-response-body]\") document.querySelector(\"#active-delete [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":10,"href":"/twilio-apis/api/conversations/participant-conversations/","title":"Participant Conversations","parent":"Conversations","content":"Fetch conversations by participant.\nFetch SMS Conversations    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/fetch-sms-conversations.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#fetch-sms-conversations [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-sms-conversations [data-query-params]\") .append(createKeyValuePair(\"fetch-sms-conversations\")) }) document .querySelector(\"#fetch-sms-conversations [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-sms-conversations [data-request-headers]\") .append(createKeyValuePair(\"fetch-sms-conversations\")) }) document.querySelector(\"#fetch-sms-conversations [data-url]\").value = postmanParams.url document.querySelector(\"#fetch-sms-conversations [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#fetch-sms-conversations [data-query-params]\") .append( createKeyValuePair(\"fetch-sms-conversations\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#fetch-sms-conversations [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#fetch-sms-conversations [data-request-path]\") .append( createKeyValuePair(\"fetch-sms-conversations\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#fetch-sms-conversations [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#fetch-sms-conversations [data-request-headers]\") .append( createKeyValuePair( \"fetch-sms-conversations\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#fetch-sms-conversations [data-request-auth]\") .append( createKeyValuePair(\"fetch-sms-conversations\", authParam.key, authParam.value) ) }) document .querySelector(\"#fetch-sms-conversations [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#fetch-sms-conversations [data-method]\").value auth = keyValuePairsToObjects( \"fetch-sms-conversations\", document.querySelector(\"#fetch-sms-conversations [data-request-auth]\") ) path = keyValuePairsToObjects( \"fetch-sms-conversations\", document.querySelector(\"#fetch-sms-conversations [data-request-path]\") ) headers = keyValuePairsToObjects( \"fetch-sms-conversations\", document.querySelector(\"#fetch-sms-conversations [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"fetch-sms-conversations\", document.querySelector(\"#fetch-sms-conversations [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"fetch-sms-conversations\", document.querySelector(\"#fetch-sms-conversations [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#fetch-sms-conversations [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#fetch-sms-conversations [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#fetch-sms-conversations [data-response-section]\")` ) document .querySelector(\"#fetch-sms-conversations [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"fetch-sms-conversations\", response.status) updateResponseBody(\"fetch-sms-conversations\", response.data) updateRequestBody(\"fetch-sms-conversations\", myRequest) }) .then(() = { document.querySelector(\"#fetch-sms-conversations [data-json-response-body]\") document.querySelector(\"#fetch-sms-conversations [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Fetch Chat Conversations    console.log(\"POSTMAN PARAMS: ..\\/..\\/..\\/_includes\\/conversations\\/fetch-chat-conversations.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#fetch-chat-conversations [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-chat-conversations [data-query-params]\") .append(createKeyValuePair(\"fetch-chat-conversations\")) }) document .querySelector(\"#fetch-chat-conversations [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-chat-conversations [data-request-headers]\") .append(createKeyValuePair(\"fetch-chat-conversations\")) }) document.querySelector(\"#fetch-chat-conversations [data-url]\").value = postmanParams.url document.querySelector(\"#fetch-chat-conversations [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#fetch-chat-conversations [data-query-params]\") .append( createKeyValuePair(\"fetch-chat-conversations\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#fetch-chat-conversations [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#fetch-chat-conversations [data-request-path]\") .append( createKeyValuePair(\"fetch-chat-conversations\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#fetch-chat-conversations [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#fetch-chat-conversations [data-request-headers]\") .append( createKeyValuePair( \"fetch-chat-conversations\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#fetch-chat-conversations [data-request-auth]\") .append( createKeyValuePair(\"fetch-chat-conversations\", authParam.key, authParam.value) ) }) document .querySelector(\"#fetch-chat-conversations [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#fetch-chat-conversations [data-method]\").value auth = keyValuePairsToObjects( \"fetch-chat-conversations\", document.querySelector(\"#fetch-chat-conversations [data-request-auth]\") ) path = keyValuePairsToObjects( \"fetch-chat-conversations\", document.querySelector(\"#fetch-chat-conversations [data-request-path]\") ) headers = keyValuePairsToObjects( \"fetch-chat-conversations\", document.querySelector(\"#fetch-chat-conversations [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"fetch-chat-conversations\", document.querySelector(\"#fetch-chat-conversations [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"fetch-chat-conversations\", document.querySelector(\"#fetch-chat-conversations [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#fetch-chat-conversations [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#fetch-chat-conversations [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#fetch-chat-conversations [data-response-section]\")` ) document .querySelector(\"#fetch-chat-conversations [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"fetch-chat-conversations\", response.status) updateResponseBody(\"fetch-chat-conversations\", response.data) updateRequestBody(\"fetch-chat-conversations\", myRequest) }) .then(() = { document.querySelector(\"#fetch-chat-conversations [data-json-response-body]\") document.querySelector(\"#fetch-chat-conversations [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":11,"href":"/twilio-apis/api/","title":"API","parent":"Twilio API Explorer","content":"    Conversations      Conversations      Participants      Messages      Participant Conversations        Feedback      Lookup      Lookup v1      Lookup v2        Messages      Numbers      Numbers v1      Numbers v2 - Available      Numbers v2 - Active        Test Credentials      "},{"id":12,"href":"/twilio-apis/tags/api/","title":"api","parent":"Tags","content":""},{"id":13,"href":"/twilio-apis/tags/cli/","title":"cli","parent":"Tags","content":""},{"id":14,"href":"/twilio-apis/api/conversations/","title":"Conversations","parent":"API","content":"    Conversations      Participants      Messages      Participant Conversations      "},{"id":15,"href":"/twilio-apis/tags/conversations/","title":"conversations","parent":"Tags","content":""},{"id":16,"href":"/twilio-apis/tags/curl/","title":"curl","parent":"Tags","content":""},{"id":17,"href":"/twilio-apis/tags/environment/","title":"environment","parent":"Tags","content":""},{"id":18,"href":"/twilio-apis/api/feedback/","title":"Feedback","parent":"API","content":"How to send and fetch messages with the Twilio Messaging API.\nPROVIDE FEEDABACK  Send an SMS for which to provide feedback with ProvideFeedback=true param.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/_includes\\/feedback\\/create.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#create [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-query-params]\") .append(createKeyValuePair(\"create\")) }) document .querySelector(\"#create [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-request-headers]\") .append(createKeyValuePair(\"create\")) }) document.querySelector(\"#create [data-url]\").value = postmanParams.url document.querySelector(\"#create [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#create [data-query-params]\") .append( createKeyValuePair(\"create\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#create [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#create [data-request-path]\") .append( createKeyValuePair(\"create\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#create [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#create [data-request-headers]\") .append( createKeyValuePair( \"create\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#create [data-request-auth]\") .append( createKeyValuePair(\"create\", authParam.key, authParam.value) ) }) document .querySelector(\"#create [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create [data-method]\").value auth = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-auth]\") ) path = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-path]\") ) headers = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#create [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create [data-response-section]\")` ) document .querySelector(\"#create [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create\", response.status) updateResponseBody(\"create\", response.data) updateRequestBody(\"create\", myRequest) }) .then(() = { document.querySelector(\"#create [data-json-response-body]\") document.querySelector(\"#create [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   CONFIRM FEEDBACK  Send Delivery Confirmation Feedack with with MessageSid + Outcome=confirmed params.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/_includes\\/feedback\\/confirm.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#confirm [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#confirm [data-query-params]\") .append(createKeyValuePair(\"confirm\")) }) document .querySelector(\"#confirm [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#confirm [data-request-headers]\") .append(createKeyValuePair(\"confirm\")) }) document.querySelector(\"#confirm [data-url]\").value = postmanParams.url document.querySelector(\"#confirm [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#confirm [data-query-params]\") .append( createKeyValuePair(\"confirm\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#confirm [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#confirm [data-request-path]\") .append( createKeyValuePair(\"confirm\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#confirm [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#confirm [data-request-headers]\") .append( createKeyValuePair( \"confirm\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#confirm [data-request-auth]\") .append( createKeyValuePair(\"confirm\", authParam.key, authParam.value) ) }) document .querySelector(\"#confirm [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#confirm [data-method]\").value auth = keyValuePairsToObjects( \"confirm\", document.querySelector(\"#confirm [data-request-auth]\") ) path = keyValuePairsToObjects( \"confirm\", document.querySelector(\"#confirm [data-request-path]\") ) headers = keyValuePairsToObjects( \"confirm\", document.querySelector(\"#confirm [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"confirm\", document.querySelector(\"#confirm [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"confirm\", document.querySelector(\"#confirm [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#confirm [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#confirm [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#confirm [data-response-section]\")` ) document .querySelector(\"#confirm [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"confirm\", response.status) updateResponseBody(\"confirm\", response.data) updateRequestBody(\"confirm\", myRequest) }) .then(() = { document.querySelector(\"#confirm [data-json-response-body]\") document.querySelector(\"#confirm [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":19,"href":"/twilio-apis/tags/feedback/","title":"feedback","parent":"Tags","content":""},{"id":20,"href":"/twilio-apis/api/lookup/","title":"Lookup","parent":"API","content":"    Lookup v1      Lookup v2      "},{"id":21,"href":"/twilio-apis/tags/lookup/","title":"lookup","parent":"Tags","content":""},{"id":22,"href":"/twilio-apis/api/messages/","title":"Messages","parent":"API","content":"How to send and fetch messages with the Twilio Messaging API.\nSMS    console.log(\"POSTMAN PARAMS: ..\\/..\\/postman-params\\/messages\\/create.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#create [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-query-params]\") .append(createKeyValuePair(\"create\")) }) document .querySelector(\"#create [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-request-headers]\") .append(createKeyValuePair(\"create\")) }) document.querySelector(\"#create [data-url]\").value = postmanParams.url document.querySelector(\"#create [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#create [data-query-params]\") .append( createKeyValuePair(\"create\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#create [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#create [data-request-path]\") .append( createKeyValuePair(\"create\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#create [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#create [data-request-headers]\") .append( createKeyValuePair( \"create\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#create [data-request-auth]\") .append( createKeyValuePair(\"create\", authParam.key, authParam.value) ) }) document .querySelector(\"#create [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create [data-method]\").value auth = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-auth]\") ) path = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-path]\") ) headers = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#create [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create [data-response-section]\")` ) document .querySelector(\"#create [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create\", response.status) updateResponseBody(\"create\", response.data) updateRequestBody(\"create\", myRequest) }) .then(() = { document.querySelector(\"#create [data-json-response-body]\") document.querySelector(\"#create [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   WHATSAPP    console.log(\"POSTMAN PARAMS: ..\\/..\\/postman-params\\/messages\\/whatsapp.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#whatsapp [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#whatsapp [data-query-params]\") .append(createKeyValuePair(\"whatsapp\")) }) document .querySelector(\"#whatsapp [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#whatsapp [data-request-headers]\") .append(createKeyValuePair(\"whatsapp\")) }) document.querySelector(\"#whatsapp [data-url]\").value = postmanParams.url document.querySelector(\"#whatsapp [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#whatsapp [data-query-params]\") .append( createKeyValuePair(\"whatsapp\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#whatsapp [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#whatsapp [data-request-path]\") .append( createKeyValuePair(\"whatsapp\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#whatsapp [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#whatsapp [data-request-headers]\") .append( createKeyValuePair( \"whatsapp\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#whatsapp [data-request-auth]\") .append( createKeyValuePair(\"whatsapp\", authParam.key, authParam.value) ) }) document .querySelector(\"#whatsapp [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#whatsapp [data-method]\").value auth = keyValuePairsToObjects( \"whatsapp\", document.querySelector(\"#whatsapp [data-request-auth]\") ) path = keyValuePairsToObjects( \"whatsapp\", document.querySelector(\"#whatsapp [data-request-path]\") ) headers = keyValuePairsToObjects( \"whatsapp\", document.querySelector(\"#whatsapp [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"whatsapp\", document.querySelector(\"#whatsapp [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"whatsapp\", document.querySelector(\"#whatsapp [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#whatsapp [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#whatsapp [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#whatsapp [data-response-section]\")` ) document .querySelector(\"#whatsapp [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"whatsapp\", response.status) updateResponseBody(\"whatsapp\", response.data) updateRequestBody(\"whatsapp\", myRequest) }) .then(() = { document.querySelector(\"#whatsapp [data-json-response-body]\") document.querySelector(\"#whatsapp [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   LIST    console.log(\"POSTMAN PARAMS: ..\\/..\\/postman-params\\/messages\\/list.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#list [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list [data-query-params]\") .append(createKeyValuePair(\"list\")) }) document .querySelector(\"#list [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list [data-request-headers]\") .append(createKeyValuePair(\"list\")) }) document.querySelector(\"#list [data-url]\").value = postmanParams.url document.querySelector(\"#list [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#list [data-query-params]\") .append( createKeyValuePair(\"list\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#list [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#list [data-request-path]\") .append( createKeyValuePair(\"list\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#list [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#list [data-request-headers]\") .append( createKeyValuePair( \"list\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#list [data-request-auth]\") .append( createKeyValuePair(\"list\", authParam.key, authParam.value) ) }) document .querySelector(\"#list [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#list [data-method]\").value auth = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-auth]\") ) path = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-path]\") ) headers = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#list [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#list [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#list [data-response-section]\")` ) document .querySelector(\"#list [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"list\", response.status) updateResponseBody(\"list\", response.data) updateRequestBody(\"list\", myRequest) }) .then(() = { document.querySelector(\"#list [data-json-response-body]\") document.querySelector(\"#list [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   READ    console.log(\"POSTMAN PARAMS: ..\\/..\\/postman-params\\/messages\\/read.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#read [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#read [data-query-params]\") .append(createKeyValuePair(\"read\")) }) document .querySelector(\"#read [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#read [data-request-headers]\") .append(createKeyValuePair(\"read\")) }) document.querySelector(\"#read [data-url]\").value = postmanParams.url document.querySelector(\"#read [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#read [data-query-params]\") .append( createKeyValuePair(\"read\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#read [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#read [data-request-path]\") .append( createKeyValuePair(\"read\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#read [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#read [data-request-headers]\") .append( createKeyValuePair( \"read\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#read [data-request-auth]\") .append( createKeyValuePair(\"read\", authParam.key, authParam.value) ) }) document .querySelector(\"#read [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#read [data-method]\").value auth = keyValuePairsToObjects( \"read\", document.querySelector(\"#read [data-request-auth]\") ) path = keyValuePairsToObjects( \"read\", document.querySelector(\"#read [data-request-path]\") ) headers = keyValuePairsToObjects( \"read\", document.querySelector(\"#read [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"read\", document.querySelector(\"#read [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"read\", document.querySelector(\"#read [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#read [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#read [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#read [data-response-section]\")` ) document .querySelector(\"#read [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"read\", response.status) updateResponseBody(\"read\", response.data) updateRequestBody(\"read\", myRequest) }) .then(() = { document.querySelector(\"#read [data-json-response-body]\") document.querySelector(\"#read [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   UPDATE  To redact a message-body from a post-flight message, post an empty body to the message instance resource.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/postman-params\\/messages\\/update.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#update [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update [data-query-params]\") .append(createKeyValuePair(\"update\")) }) document .querySelector(\"#update [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update [data-request-headers]\") .append(createKeyValuePair(\"update\")) }) document.querySelector(\"#update [data-url]\").value = postmanParams.url document.querySelector(\"#update [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#update [data-query-params]\") .append( createKeyValuePair(\"update\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#update [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#update [data-request-path]\") .append( createKeyValuePair(\"update\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#update [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#update [data-request-headers]\") .append( createKeyValuePair( \"update\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#update [data-request-auth]\") .append( createKeyValuePair(\"update\", authParam.key, authParam.value) ) }) document .querySelector(\"#update [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#update [data-method]\").value auth = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-request-auth]\") ) path = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-request-path]\") ) headers = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#update [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#update [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#update [data-response-section]\")` ) document .querySelector(\"#update [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"update\", response.status) updateResponseBody(\"update\", response.data) updateRequestBody(\"update\", myRequest) }) .then(() = { document.querySelector(\"#update [data-json-response-body]\") document.querySelector(\"#update [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   DELETE    console.log(\"POSTMAN PARAMS: ..\\/..\\/postman-params\\/messages\\/delete.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#delete [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete [data-query-params]\") .append(createKeyValuePair(\"delete\")) }) document .querySelector(\"#delete [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete [data-request-headers]\") .append(createKeyValuePair(\"delete\")) }) document.querySelector(\"#delete [data-url]\").value = postmanParams.url document.querySelector(\"#delete [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#delete [data-query-params]\") .append( createKeyValuePair(\"delete\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#delete [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#delete [data-request-path]\") .append( createKeyValuePair(\"delete\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#delete [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#delete [data-request-headers]\") .append( createKeyValuePair( \"delete\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#delete [data-request-auth]\") .append( createKeyValuePair(\"delete\", authParam.key, authParam.value) ) }) document .querySelector(\"#delete [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#delete [data-method]\").value auth = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-auth]\") ) path = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-path]\") ) headers = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#delete [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#delete [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#delete [data-response-section]\")` ) document .querySelector(\"#delete [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"delete\", response.status) updateResponseBody(\"delete\", response.data) updateRequestBody(\"delete\", myRequest) }) .then(() = { document.querySelector(\"#delete [data-json-response-body]\") document.querySelector(\"#delete [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":23,"href":"/twilio-apis/tags/messaging/","title":"messaging","parent":"Tags","content":""},{"id":24,"href":"/twilio-apis/api/numbers/","title":"Numbers","parent":"API","content":"    Numbers v1      Numbers v2 - Available      Numbers v2 - Active      "},{"id":25,"href":"/twilio-apis/tags/phone-numbers/","title":"phone-numbers","parent":"Tags","content":""},{"id":26,"href":"/twilio-apis/tags/postman/","title":"postman","parent":"Tags","content":""},{"id":27,"href":"/twilio-apis/tags/preferences/","title":"preferences","parent":"Tags","content":""},{"id":28,"href":"/twilio-apis/tags/sdk/","title":"sdk","parent":"Tags","content":""},{"id":29,"href":"/twilio-apis/sdk/","title":"SDKs","parent":"Twilio API Explorer","content":"    curl      Send Message      Libraries \u0026amp; Tools      Twilio Console - API Explorer  Twilo Console Postman-like app   Twilio SDKs  node, python, ruby, java, c#, php   Twilio CLI  Provides access to all APIs from the command line   Open API  Swagger Spec   Postman  Beta. Limited methods: find phone number, buy phone number, send message, fetch message.    "},{"id":30,"href":"/twilio-apis/settings/","title":"Settings","parent":"Twilio API Explorer","content":"Enter key/value environment variables to use in Postman API requests.\n Cancel Save   Required Environment Variables Add Account SID Variable Add Auth Token Variable Add Username Variable Add Password Variable   Custom Environment Variables Add Custom Environment Variable      Delete      const newEnvVarDialog = document.getElementById(\"newEnvVarDialog\") let keyElement = newEnvVarDialog.querySelector(\"[modal-data-key]\") let valueElement = newEnvVarDialog.querySelector(\"[modal-data-value]\") const keys = Object.keys(localStorage) let envVars = [] let envObj = {} keys.forEach((key) = { envObj = {} envObj.key = key envObj.value = localStorage[key] envVars.push(envObj) }) if (keys.includes(\"AccountSid\")) { document.querySelector(\"#acctSid\").classList.add(\"d-none\") } if (keys.includes(\"AuthToken\")) { document.querySelector(\"#authToken\").classList.add(\"d-none\") } if (keys.includes(\"Username\")) { document.querySelector(\"#username\").classList.add(\"d-none\") } if (keys.includes(\"Password\")) { document.querySelector(\"#password\").classList.add(\"d-none\") } envVars.forEach((envVar) = { document .querySelector(\"#settings [data-query-params]\") .append(createKeyValuePair(\"settings\", envVar.key, envVar.value)) }) document .querySelectorAll(\"#settings [data-add-query-param-btn]\") .forEach((btn) = { btn.addEventListener(\"click\", function onOpen() { if (typeof newEnvVarDialog.showModal === \"function\") { newEnvVarDialog.showModal() if (btn.id === \"addAcctSidBtn\") { keyElement.value = \"AccountSid\" keyElement.disabled = true } else if (btn.id === \"addAuthTokenBtn\") { keyElement.value = \"AuthToken\" keyElement.disabled = true } else if (btn.id === \"addUsernameBtn\") { keyElement.value = \"Username\" keyElement.disabled = true } else if (btn.id === \"addPasswordBtn\") { keyElement.value = \"Password\" keyElement.disabled = true } } else { outputBox.value = \"Sorry, the  API is not supported by this browser.\" } }) }) newEnvVarDialog.addEventListener(\"keydown\", (e) = { if (e.code === \"Enter\") { console.log(\"${e.code} === Enter\") setLocalStorage() } }) newEnvVarDialog.addEventListener(\"close\", function onClose() { if (newEnvVarDialog.returnValue !== \"cancel\") { setLocalStorage() } }) function setLocalStorage() { if (keyElement.value !== \"\" \u0026\u0026 valueElement.value !== \"\") { localStorage.setItem(keyElement.value, valueElement.value) window.location = window.location.href } }  "},{"id":31,"href":"/twilio-apis/tags/settings/","title":"settings","parent":"Tags","content":""},{"id":32,"href":"/twilio-apis/tags/","title":"Tags","parent":"Twilio API Explorer","content":""},{"id":33,"href":"/twilio-apis/api/test/","title":"Test Credentials","parent":"API","content":"How to send messages with test credentials to simulate different responses. This API uses the test credentials and test phone numbers described here.\nSUCCESS    console.log(\"POSTMAN PARAMS: ..\\/..\\/_includes\\/test\\/success.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#success [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#success [data-query-params]\") .append(createKeyValuePair(\"success\")) }) document .querySelector(\"#success [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#success [data-request-headers]\") .append(createKeyValuePair(\"success\")) }) document.querySelector(\"#success [data-url]\").value = postmanParams.url document.querySelector(\"#success [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#success [data-query-params]\") .append( createKeyValuePair(\"success\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#success [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#success [data-request-path]\") .append( createKeyValuePair(\"success\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#success [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#success [data-request-headers]\") .append( createKeyValuePair( \"success\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#success [data-request-auth]\") .append( createKeyValuePair(\"success\", authParam.key, authParam.value) ) }) document .querySelector(\"#success [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#success [data-method]\").value auth = keyValuePairsToObjects( \"success\", document.querySelector(\"#success [data-request-auth]\") ) path = keyValuePairsToObjects( \"success\", document.querySelector(\"#success [data-request-path]\") ) headers = keyValuePairsToObjects( \"success\", document.querySelector(\"#success [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"success\", document.querySelector(\"#success [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"success\", document.querySelector(\"#success [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#success [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#success [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#success [data-response-section]\")` ) document .querySelector(\"#success [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"success\", response.status) updateResponseBody(\"success\", response.data) updateRequestBody(\"success\", myRequest) }) .then(() = { document.querySelector(\"#success [data-json-response-body]\") document.querySelector(\"#success [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   UNSUBSCRIBED  Error Code 21610 - The To phone number is blocked (opted-out) for your account.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/_includes\\/test\\/unsubscribed.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#unsubscribed [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#unsubscribed [data-query-params]\") .append(createKeyValuePair(\"unsubscribed\")) }) document .querySelector(\"#unsubscribed [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#unsubscribed [data-request-headers]\") .append(createKeyValuePair(\"unsubscribed\")) }) document.querySelector(\"#unsubscribed [data-url]\").value = postmanParams.url document.querySelector(\"#unsubscribed [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#unsubscribed [data-query-params]\") .append( createKeyValuePair(\"unsubscribed\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#unsubscribed [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#unsubscribed [data-request-path]\") .append( createKeyValuePair(\"unsubscribed\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#unsubscribed [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#unsubscribed [data-request-headers]\") .append( createKeyValuePair( \"unsubscribed\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#unsubscribed [data-request-auth]\") .append( createKeyValuePair(\"unsubscribed\", authParam.key, authParam.value) ) }) document .querySelector(\"#unsubscribed [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#unsubscribed [data-method]\").value auth = keyValuePairsToObjects( \"unsubscribed\", document.querySelector(\"#unsubscribed [data-request-auth]\") ) path = keyValuePairsToObjects( \"unsubscribed\", document.querySelector(\"#unsubscribed [data-request-path]\") ) headers = keyValuePairsToObjects( \"unsubscribed\", document.querySelector(\"#unsubscribed [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"unsubscribed\", document.querySelector(\"#unsubscribed [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"unsubscribed\", document.querySelector(\"#unsubscribed [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#unsubscribed [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#unsubscribed [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#unsubscribed [data-response-section]\")` ) document .querySelector(\"#unsubscribed [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"unsubscribed\", response.status) updateResponseBody(\"unsubscribed\", response.data) updateRequestBody(\"unsubscribed\", myRequest) }) .then(() = { document.querySelector(\"#unsubscribed [data-json-response-body]\") document.querySelector(\"#unsubscribed [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   INVALID TO  Error Code 21212 - The To phone number is invalid.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/_includes\\/test\\/invalid-to.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#invalid-to [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#invalid-to [data-query-params]\") .append(createKeyValuePair(\"invalid-to\")) }) document .querySelector(\"#invalid-to [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#invalid-to [data-request-headers]\") .append(createKeyValuePair(\"invalid-to\")) }) document.querySelector(\"#invalid-to [data-url]\").value = postmanParams.url document.querySelector(\"#invalid-to [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#invalid-to [data-query-params]\") .append( createKeyValuePair(\"invalid-to\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#invalid-to [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#invalid-to [data-request-path]\") .append( createKeyValuePair(\"invalid-to\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#invalid-to [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#invalid-to [data-request-headers]\") .append( createKeyValuePair( \"invalid-to\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#invalid-to [data-request-auth]\") .append( createKeyValuePair(\"invalid-to\", authParam.key, authParam.value) ) }) document .querySelector(\"#invalid-to [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#invalid-to [data-method]\").value auth = keyValuePairsToObjects( \"invalid-to\", document.querySelector(\"#invalid-to [data-request-auth]\") ) path = keyValuePairsToObjects( \"invalid-to\", document.querySelector(\"#invalid-to [data-request-path]\") ) headers = keyValuePairsToObjects( \"invalid-to\", document.querySelector(\"#invalid-to [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"invalid-to\", document.querySelector(\"#invalid-to [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"invalid-to\", document.querySelector(\"#invalid-to [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#invalid-to [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#invalid-to [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#invalid-to [data-response-section]\")` ) document .querySelector(\"#invalid-to [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"invalid-to\", response.status) updateResponseBody(\"invalid-to\", response.data) updateRequestBody(\"invalid-to\", myRequest) }) .then(() = { document.querySelector(\"#invalid-to [data-json-response-body]\") document.querySelector(\"#invalid-to [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   INVALID REGION  Error Code 21408 - Your account doesn’t have the international permissions necessary to SMS this number.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/_includes\\/test\\/invalid-region.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#invalid-region [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#invalid-region [data-query-params]\") .append(createKeyValuePair(\"invalid-region\")) }) document .querySelector(\"#invalid-region [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#invalid-region [data-request-headers]\") .append(createKeyValuePair(\"invalid-region\")) }) document.querySelector(\"#invalid-region [data-url]\").value = postmanParams.url document.querySelector(\"#invalid-region [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#invalid-region [data-query-params]\") .append( createKeyValuePair(\"invalid-region\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#invalid-region [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#invalid-region [data-request-path]\") .append( createKeyValuePair(\"invalid-region\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#invalid-region [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#invalid-region [data-request-headers]\") .append( createKeyValuePair( \"invalid-region\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#invalid-region [data-request-auth]\") .append( createKeyValuePair(\"invalid-region\", authParam.key, authParam.value) ) }) document .querySelector(\"#invalid-region [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#invalid-region [data-method]\").value auth = keyValuePairsToObjects( \"invalid-region\", document.querySelector(\"#invalid-region [data-request-auth]\") ) path = keyValuePairsToObjects( \"invalid-region\", document.querySelector(\"#invalid-region [data-request-path]\") ) headers = keyValuePairsToObjects( \"invalid-region\", document.querySelector(\"#invalid-region [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"invalid-region\", document.querySelector(\"#invalid-region [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"invalid-region\", document.querySelector(\"#invalid-region [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#invalid-region [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#invalid-region [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#invalid-region [data-response-section]\")` ) document .querySelector(\"#invalid-region [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"invalid-region\", response.status) updateResponseBody(\"invalid-region\", response.data) updateRequestBody(\"invalid-region\", myRequest) }) .then(() = { document.querySelector(\"#invalid-region [data-json-response-body]\") document.querySelector(\"#invalid-region [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   QUEUE FULL  Status Code 429, Error Code 21611 - This number has an SMS message queue that is full.\n  console.log(\"POSTMAN PARAMS: ..\\/..\\/_includes\\/test\\/queue-full.js\", postmanParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request    Response Status:        \u0026minus;      document .querySelector(\"#queue-full [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#queue-full [data-query-params]\") .append(createKeyValuePair(\"queue-full\")) }) document .querySelector(\"#queue-full [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#queue-full [data-request-headers]\") .append(createKeyValuePair(\"queue-full\")) }) document.querySelector(\"#queue-full [data-url]\").value = postmanParams.url document.querySelector(\"#queue-full [data-method]\").value = postmanParams.method postmanParams.queryParams.forEach((queryParam) = { document .querySelector(\"#queue-full [data-query-params]\") .append( createKeyValuePair(\"queue-full\", queryParam.key, queryParam.value) ) }) if (postmanParams.queryParams.length  0) { document .querySelector(\"#queue-full [data-query-params-section]\") .classList.remove(\"d-none\") } postmanParams.pathParams.forEach((pathParam) = { document .querySelector(\"#queue-full [data-request-path]\") .append( createKeyValuePair(\"queue-full\", pathParam.key, pathParam.value) ) }) if (postmanParams.pathParams.length  0) { document .querySelector(\"#queue-full [data-request-path-section]\") .classList.remove(\"d-none\") } postmanParams.headerParams.forEach((headerParam) = { document .querySelector(\"#queue-full [data-request-headers]\") .append( createKeyValuePair( \"queue-full\", headerParam.key, headerParam.value ) ) }) postmanParams.authParams.forEach((authParam) = { document .querySelector(\"#queue-full [data-request-auth]\") .append( createKeyValuePair(\"queue-full\", authParam.key, authParam.value) ) }) document .querySelector(\"#queue-full [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#queue-full [data-method]\").value auth = keyValuePairsToObjects( \"queue-full\", document.querySelector(\"#queue-full [data-request-auth]\") ) path = keyValuePairsToObjects( \"queue-full\", document.querySelector(\"#queue-full [data-request-path]\") ) headers = keyValuePairsToObjects( \"queue-full\", document.querySelector(\"#queue-full [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"queue-full\", document.querySelector(\"#queue-full [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"queue-full\", document.querySelector(\"#queue-full [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#queue-full [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) myRequest = { url, method, path_params: path, query_params: params, } document .querySelector(\"#queue-full [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#queue-full [data-response-section]\")` ) document .querySelector(\"#queue-full [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"queue-full\", response.status) updateResponseBody(\"queue-full\", response.data) updateRequestBody(\"queue-full\", myRequest) }) .then(() = { document.querySelector(\"#queue-full [data-json-response-body]\") document.querySelector(\"#queue-full [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":34,"href":"/twilio-apis/tags/twilio/","title":"twilio","parent":"Tags","content":""},{"id":35,"href":"/twilio-apis/","title":"Twilio API Explorer","parent":"","content":"    API      Conversations      Conversations      Participants      Messages      Participant Conversations        Feedback      Lookup      Lookup v1      Lookup v2        Messages      Numbers      Numbers v1      Numbers v2 - Available      Numbers v2 - Active        Test Credentials        SDKs      curl      Send Message        "},{"id":36,"href":"/twilio-apis/tags/variables/","title":"variables","parent":"Tags","content":""},{"id":37,"href":"/twilio-apis/webhook/event-streams/","title":"Webhook - Event Streams","parent":"Webhooks","content":""},{"id":38,"href":"/twilio-apis/webhook/flex/","title":"Webhook - Flex Event Streams","parent":"Webhooks","content":""},{"id":39,"href":"/twilio-apis/webhook/incoming-msg/","title":"Webhook - Incoming Message","parent":"Webhooks","content":""},{"id":40,"href":"/twilio-apis/webhook/outgoing-msg/","title":"Webhook - Outgoing Message","parent":"Webhooks","content":""},{"id":41,"href":"/twilio-apis/webhook/voice/","title":"Webhook - Voice","parent":"Webhooks","content":""},{"id":42,"href":"/twilio-apis/webhook/","title":"Webhooks","parent":"Twilio API Explorer","content":""}]