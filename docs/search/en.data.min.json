[{"id":0,"href":"/twilio-apis/api/accounts/accounts/","title":"Accounts","parent":"Accounts","content":"Manage Accounts and Subaccounts.\nCREATE  Create a new Account instance resource as a subaccount of the one used to make the request\n  console.log(\"API PARAMS: ..\\/params\\/accounts\\/create.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#create [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-query-params]\") .append(createKeyValuePair(\"create\")) }) document .querySelector(\"#create [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-request-headers]\") .append(createKeyValuePair(\"create\")) }) document.querySelector(\"#create [data-url]\").value = apiParams.url document.querySelector(\"#create [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#create [data-query-params]\") .append( createKeyValuePair( \"create\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#create [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#create [data-request-path]\") .append( createKeyValuePair( \"create\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#create [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#create [data-request-headers]\") .append( createKeyValuePair( \"create\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#create [data-request-auth]\") .append( createKeyValuePair( \"create\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#create [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create [data-method]\").value auth = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-auth]\") ) path = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-path]\") ) headers = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#create [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#create [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create\", response.status) updateResponseBody(\"create\", response.data) updateRequestBody(\"create\", myRequest) }) .then(() = { document.querySelector(\"#create [data-json-response-body]\") document.querySelector(\"#create [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   LIST  Show all accounts.\n  console.log(\"API PARAMS: ..\\/params\\/accounts\\/list.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#list [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list [data-query-params]\") .append(createKeyValuePair(\"list\")) }) document .querySelector(\"#list [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list [data-request-headers]\") .append(createKeyValuePair(\"list\")) }) document.querySelector(\"#list [data-url]\").value = apiParams.url document.querySelector(\"#list [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#list [data-query-params]\") .append( createKeyValuePair( \"list\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#list [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#list [data-request-path]\") .append( createKeyValuePair( \"list\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#list [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#list [data-request-headers]\") .append( createKeyValuePair( \"list\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#list [data-request-auth]\") .append( createKeyValuePair( \"list\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#list [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#list [data-method]\").value auth = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-auth]\") ) path = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-path]\") ) headers = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#list [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#list [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#list [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#list [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"list\", response.status) updateResponseBody(\"list\", response.data) updateRequestBody(\"list\", myRequest) }) .then(() = { document.querySelector(\"#list [data-json-response-body]\") document.querySelector(\"#list [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   FETCH  Fetch an Account.\n  console.log(\"API PARAMS: ..\\/params\\/accounts\\/fetch.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#fetch [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch [data-query-params]\") .append(createKeyValuePair(\"fetch\")) }) document .querySelector(\"#fetch [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch [data-request-headers]\") .append(createKeyValuePair(\"fetch\")) }) document.querySelector(\"#fetch [data-url]\").value = apiParams.url document.querySelector(\"#fetch [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#fetch [data-query-params]\") .append( createKeyValuePair( \"fetch\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#fetch [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#fetch [data-request-path]\") .append( createKeyValuePair( \"fetch\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#fetch [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#fetch [data-request-headers]\") .append( createKeyValuePair( \"fetch\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#fetch [data-request-auth]\") .append( createKeyValuePair( \"fetch\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#fetch [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#fetch [data-method]\").value auth = keyValuePairsToObjects( \"fetch\", document.querySelector(\"#fetch [data-request-auth]\") ) path = keyValuePairsToObjects( \"fetch\", document.querySelector(\"#fetch [data-request-path]\") ) headers = keyValuePairsToObjects( \"fetch\", document.querySelector(\"#fetch [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"fetch\", document.querySelector(\"#fetch [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"fetch\", document.querySelector(\"#fetch [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#fetch [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#fetch [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#fetch [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#fetch [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"fetch\", response.status) updateResponseBody(\"fetch\", response.data) updateRequestBody(\"fetch\", myRequest) }) .then(() = { document.querySelector(\"#fetch [data-json-response-body]\") document.querySelector(\"#fetch [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   SUSPEND  Suspend a Subaccount.\n  console.log(\"API PARAMS: ..\\/params\\/accounts\\/suspend.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#suspend [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#suspend [data-query-params]\") .append(createKeyValuePair(\"suspend\")) }) document .querySelector(\"#suspend [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#suspend [data-request-headers]\") .append(createKeyValuePair(\"suspend\")) }) document.querySelector(\"#suspend [data-url]\").value = apiParams.url document.querySelector(\"#suspend [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#suspend [data-query-params]\") .append( createKeyValuePair( \"suspend\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#suspend [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#suspend [data-request-path]\") .append( createKeyValuePair( \"suspend\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#suspend [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#suspend [data-request-headers]\") .append( createKeyValuePair( \"suspend\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#suspend [data-request-auth]\") .append( createKeyValuePair( \"suspend\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#suspend [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#suspend [data-method]\").value auth = keyValuePairsToObjects( \"suspend\", document.querySelector(\"#suspend [data-request-auth]\") ) path = keyValuePairsToObjects( \"suspend\", document.querySelector(\"#suspend [data-request-path]\") ) headers = keyValuePairsToObjects( \"suspend\", document.querySelector(\"#suspend [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"suspend\", document.querySelector(\"#suspend [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"suspend\", document.querySelector(\"#suspend [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#suspend [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#suspend [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#suspend [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#suspend [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"suspend\", response.status) updateResponseBody(\"suspend\", response.data) updateRequestBody(\"suspend\", myRequest) }) .then(() = { document.querySelector(\"#suspend [data-json-response-body]\") document.querySelector(\"#suspend [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   ACTIVATE  Re-activate a Suspended Subaccount.\n  console.log(\"API PARAMS: ..\\/params\\/accounts\\/activate.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#activate [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#activate [data-query-params]\") .append(createKeyValuePair(\"activate\")) }) document .querySelector(\"#activate [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#activate [data-request-headers]\") .append(createKeyValuePair(\"activate\")) }) document.querySelector(\"#activate [data-url]\").value = apiParams.url document.querySelector(\"#activate [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#activate [data-query-params]\") .append( createKeyValuePair( \"activate\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#activate [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#activate [data-request-path]\") .append( createKeyValuePair( \"activate\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#activate [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#activate [data-request-headers]\") .append( createKeyValuePair( \"activate\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#activate [data-request-auth]\") .append( createKeyValuePair( \"activate\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#activate [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#activate [data-method]\").value auth = keyValuePairsToObjects( \"activate\", document.querySelector(\"#activate [data-request-auth]\") ) path = keyValuePairsToObjects( \"activate\", document.querySelector(\"#activate [data-request-path]\") ) headers = keyValuePairsToObjects( \"activate\", document.querySelector(\"#activate [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"activate\", document.querySelector(\"#activate [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"activate\", document.querySelector(\"#activate [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#activate [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#activate [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#activate [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#activate [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"activate\", response.status) updateResponseBody(\"activate\", response.data) updateRequestBody(\"activate\", myRequest) }) .then(() = { document.querySelector(\"#activate [data-json-response-body]\") document.querySelector(\"#activate [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   CLOSE  Permanently Close a Subaccount.\n  console.log(\"API PARAMS: ..\\/params\\/accounts\\/close.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#close [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#close [data-query-params]\") .append(createKeyValuePair(\"close\")) }) document .querySelector(\"#close [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#close [data-request-headers]\") .append(createKeyValuePair(\"close\")) }) document.querySelector(\"#close [data-url]\").value = apiParams.url document.querySelector(\"#close [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#close [data-query-params]\") .append( createKeyValuePair( \"close\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#close [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#close [data-request-path]\") .append( createKeyValuePair( \"close\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#close [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#close [data-request-headers]\") .append( createKeyValuePair( \"close\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#close [data-request-auth]\") .append( createKeyValuePair( \"close\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#close [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#close [data-method]\").value auth = keyValuePairsToObjects( \"close\", document.querySelector(\"#close [data-request-auth]\") ) path = keyValuePairsToObjects( \"close\", document.querySelector(\"#close [data-request-path]\") ) headers = keyValuePairsToObjects( \"close\", document.querySelector(\"#close [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"close\", document.querySelector(\"#close [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"close\", document.querySelector(\"#close [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#close [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#close [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#close [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#close [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"close\", response.status) updateResponseBody(\"close\", response.data) updateRequestBody(\"close\", myRequest) }) .then(() = { document.querySelector(\"#close [data-json-response-body]\") document.querySelector(\"#close [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":1,"href":"/twilio-apis/api/conversations/conversations/","title":"Conversations","parent":"Conversations","content":"Create and manage conversations.\nCreate    console.log(\"API PARAMS: ..\\/params\\/create-conversation.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#create-conversation [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-conversation [data-query-params]\") .append(createKeyValuePair(\"create-conversation\")) }) document .querySelector(\"#create-conversation [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-conversation [data-request-headers]\") .append(createKeyValuePair(\"create-conversation\")) }) document.querySelector(\"#create-conversation [data-url]\").value = apiParams.url document.querySelector(\"#create-conversation [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#create-conversation [data-query-params]\") .append( createKeyValuePair( \"create-conversation\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#create-conversation [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#create-conversation [data-request-path]\") .append( createKeyValuePair( \"create-conversation\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#create-conversation [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#create-conversation [data-request-headers]\") .append( createKeyValuePair( \"create-conversation\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#create-conversation [data-request-auth]\") .append( createKeyValuePair( \"create-conversation\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#create-conversation [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create-conversation [data-method]\").value auth = keyValuePairsToObjects( \"create-conversation\", document.querySelector(\"#create-conversation [data-request-auth]\") ) path = keyValuePairsToObjects( \"create-conversation\", document.querySelector(\"#create-conversation [data-request-path]\") ) headers = keyValuePairsToObjects( \"create-conversation\", document.querySelector(\"#create-conversation [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create-conversation\", document.querySelector(\"#create-conversation [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create-conversation\", document.querySelector(\"#create-conversation [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create-conversation [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#create-conversation [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create-conversation [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#create-conversation [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create-conversation\", response.status) updateResponseBody(\"create-conversation\", response.data) updateRequestBody(\"create-conversation\", myRequest) }) .then(() = { document.querySelector(\"#create-conversation [data-json-response-body]\") document.querySelector(\"#create-conversation [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   List    console.log(\"API PARAMS: ..\\/params\\/list-conversations.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#list-conversations [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list-conversations [data-query-params]\") .append(createKeyValuePair(\"list-conversations\")) }) document .querySelector(\"#list-conversations [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list-conversations [data-request-headers]\") .append(createKeyValuePair(\"list-conversations\")) }) document.querySelector(\"#list-conversations [data-url]\").value = apiParams.url document.querySelector(\"#list-conversations [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#list-conversations [data-query-params]\") .append( createKeyValuePair( \"list-conversations\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#list-conversations [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#list-conversations [data-request-path]\") .append( createKeyValuePair( \"list-conversations\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#list-conversations [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#list-conversations [data-request-headers]\") .append( createKeyValuePair( \"list-conversations\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#list-conversations [data-request-auth]\") .append( createKeyValuePair( \"list-conversations\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#list-conversations [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#list-conversations [data-method]\").value auth = keyValuePairsToObjects( \"list-conversations\", document.querySelector(\"#list-conversations [data-request-auth]\") ) path = keyValuePairsToObjects( \"list-conversations\", document.querySelector(\"#list-conversations [data-request-path]\") ) headers = keyValuePairsToObjects( \"list-conversations\", document.querySelector(\"#list-conversations [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"list-conversations\", document.querySelector(\"#list-conversations [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"list-conversations\", document.querySelector(\"#list-conversations [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#list-conversations [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#list-conversations [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#list-conversations [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#list-conversations [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"list-conversations\", response.status) updateResponseBody(\"list-conversations\", response.data) updateRequestBody(\"list-conversations\", myRequest) }) .then(() = { document.querySelector(\"#list-conversations [data-json-response-body]\") document.querySelector(\"#list-conversations [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Fetch    console.log(\"API PARAMS: ..\\/params\\/fetch-conversation.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#fetch-conversation [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-conversation [data-query-params]\") .append(createKeyValuePair(\"fetch-conversation\")) }) document .querySelector(\"#fetch-conversation [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-conversation [data-request-headers]\") .append(createKeyValuePair(\"fetch-conversation\")) }) document.querySelector(\"#fetch-conversation [data-url]\").value = apiParams.url document.querySelector(\"#fetch-conversation [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#fetch-conversation [data-query-params]\") .append( createKeyValuePair( \"fetch-conversation\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#fetch-conversation [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#fetch-conversation [data-request-path]\") .append( createKeyValuePair( \"fetch-conversation\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#fetch-conversation [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#fetch-conversation [data-request-headers]\") .append( createKeyValuePair( \"fetch-conversation\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#fetch-conversation [data-request-auth]\") .append( createKeyValuePair( \"fetch-conversation\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#fetch-conversation [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#fetch-conversation [data-method]\").value auth = keyValuePairsToObjects( \"fetch-conversation\", document.querySelector(\"#fetch-conversation [data-request-auth]\") ) path = keyValuePairsToObjects( \"fetch-conversation\", document.querySelector(\"#fetch-conversation [data-request-path]\") ) headers = keyValuePairsToObjects( \"fetch-conversation\", document.querySelector(\"#fetch-conversation [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"fetch-conversation\", document.querySelector(\"#fetch-conversation [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"fetch-conversation\", document.querySelector(\"#fetch-conversation [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#fetch-conversation [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#fetch-conversation [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#fetch-conversation [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#fetch-conversation [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"fetch-conversation\", response.status) updateResponseBody(\"fetch-conversation\", response.data) updateRequestBody(\"fetch-conversation\", myRequest) }) .then(() = { document.querySelector(\"#fetch-conversation [data-json-response-body]\") document.querySelector(\"#fetch-conversation [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Update    console.log(\"API PARAMS: ..\\/params\\/update-conversation.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#update-conversation [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update-conversation [data-query-params]\") .append(createKeyValuePair(\"update-conversation\")) }) document .querySelector(\"#update-conversation [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update-conversation [data-request-headers]\") .append(createKeyValuePair(\"update-conversation\")) }) document.querySelector(\"#update-conversation [data-url]\").value = apiParams.url document.querySelector(\"#update-conversation [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#update-conversation [data-query-params]\") .append( createKeyValuePair( \"update-conversation\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#update-conversation [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#update-conversation [data-request-path]\") .append( createKeyValuePair( \"update-conversation\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#update-conversation [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#update-conversation [data-request-headers]\") .append( createKeyValuePair( \"update-conversation\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#update-conversation [data-request-auth]\") .append( createKeyValuePair( \"update-conversation\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#update-conversation [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#update-conversation [data-method]\").value auth = keyValuePairsToObjects( \"update-conversation\", document.querySelector(\"#update-conversation [data-request-auth]\") ) path = keyValuePairsToObjects( \"update-conversation\", document.querySelector(\"#update-conversation [data-request-path]\") ) headers = keyValuePairsToObjects( \"update-conversation\", document.querySelector(\"#update-conversation [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"update-conversation\", document.querySelector(\"#update-conversation [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"update-conversation\", document.querySelector(\"#update-conversation [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#update-conversation [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#update-conversation [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#update-conversation [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#update-conversation [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"update-conversation\", response.status) updateResponseBody(\"update-conversation\", response.data) updateRequestBody(\"update-conversation\", myRequest) }) .then(() = { document.querySelector(\"#update-conversation [data-json-response-body]\") document.querySelector(\"#update-conversation [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Delete    console.log(\"API PARAMS: ..\\/params\\/delete-conversation.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#delete-conversation [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete-conversation [data-query-params]\") .append(createKeyValuePair(\"delete-conversation\")) }) document .querySelector(\"#delete-conversation [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete-conversation [data-request-headers]\") .append(createKeyValuePair(\"delete-conversation\")) }) document.querySelector(\"#delete-conversation [data-url]\").value = apiParams.url document.querySelector(\"#delete-conversation [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#delete-conversation [data-query-params]\") .append( createKeyValuePair( \"delete-conversation\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#delete-conversation [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#delete-conversation [data-request-path]\") .append( createKeyValuePair( \"delete-conversation\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#delete-conversation [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#delete-conversation [data-request-headers]\") .append( createKeyValuePair( \"delete-conversation\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#delete-conversation [data-request-auth]\") .append( createKeyValuePair( \"delete-conversation\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#delete-conversation [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#delete-conversation [data-method]\").value auth = keyValuePairsToObjects( \"delete-conversation\", document.querySelector(\"#delete-conversation [data-request-auth]\") ) path = keyValuePairsToObjects( \"delete-conversation\", document.querySelector(\"#delete-conversation [data-request-path]\") ) headers = keyValuePairsToObjects( \"delete-conversation\", document.querySelector(\"#delete-conversation [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"delete-conversation\", document.querySelector(\"#delete-conversation [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"delete-conversation\", document.querySelector(\"#delete-conversation [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#delete-conversation [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#delete-conversation [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#delete-conversation [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#delete-conversation [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"delete-conversation\", response.status) updateResponseBody(\"delete-conversation\", response.data) updateRequestBody(\"delete-conversation\", myRequest) }) .then(() = { document.querySelector(\"#delete-conversation [data-json-response-body]\") document.querySelector(\"#delete-conversation [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":2,"href":"/twilio-apis/api/lookup/lookup-v1/","title":"Lookup v1","parent":"Lookup","content":"The Lookup API provides a way to retrieve additional information about a phone number.\nNUMBER  Performs basic phone number validation and conversion from regional formatting to E.164 (free).\n  console.log(\"API PARAMS: ..\\/params\\/lookup\\/number.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#number [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#number [data-query-params]\") .append(createKeyValuePair(\"number\")) }) document .querySelector(\"#number [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#number [data-request-headers]\") .append(createKeyValuePair(\"number\")) }) document.querySelector(\"#number [data-url]\").value = apiParams.url document.querySelector(\"#number [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#number [data-query-params]\") .append( createKeyValuePair( \"number\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#number [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#number [data-request-path]\") .append( createKeyValuePair( \"number\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#number [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#number [data-request-headers]\") .append( createKeyValuePair( \"number\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#number [data-request-auth]\") .append( createKeyValuePair( \"number\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#number [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#number [data-method]\").value auth = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-request-auth]\") ) path = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-request-path]\") ) headers = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#number [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#number [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#number [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#number [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"number\", response.status) updateResponseBody(\"number\", response.data) updateRequestBody(\"number\", myRequest) }) .then(() = { document.querySelector(\"#number [data-json-response-body]\") document.querySelector(\"#number [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   CARRIER  Provides carrier info and type (mobile, landline or voip). Costs $0.005 per lookup.\n  console.log(\"API PARAMS: ..\\/params\\/lookup\\/carrier.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#carrier [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#carrier [data-query-params]\") .append(createKeyValuePair(\"carrier\")) }) document .querySelector(\"#carrier [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#carrier [data-request-headers]\") .append(createKeyValuePair(\"carrier\")) }) document.querySelector(\"#carrier [data-url]\").value = apiParams.url document.querySelector(\"#carrier [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#carrier [data-query-params]\") .append( createKeyValuePair( \"carrier\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#carrier [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#carrier [data-request-path]\") .append( createKeyValuePair( \"carrier\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#carrier [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#carrier [data-request-headers]\") .append( createKeyValuePair( \"carrier\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#carrier [data-request-auth]\") .append( createKeyValuePair( \"carrier\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#carrier [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#carrier [data-method]\").value auth = keyValuePairsToObjects( \"carrier\", document.querySelector(\"#carrier [data-request-auth]\") ) path = keyValuePairsToObjects( \"carrier\", document.querySelector(\"#carrier [data-request-path]\") ) headers = keyValuePairsToObjects( \"carrier\", document.querySelector(\"#carrier [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"carrier\", document.querySelector(\"#carrier [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"carrier\", document.querySelector(\"#carrier [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#carrier [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#carrier [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#carrier [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#carrier [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"carrier\", response.status) updateResponseBody(\"carrier\", response.data) updateRequestBody(\"carrier\", myRequest) }) .then(() = { document.querySelector(\"#carrier [data-json-response-body]\") document.querySelector(\"#carrier [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   CALLER NAME  Provides Caller Name and type (BUSINESS or CONSUMER). Currently available only in the US and costs $0.01 per lookup.\n  console.log(\"API PARAMS: ..\\/params\\/lookup\\/caller-name.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#caller-name [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#caller-name [data-query-params]\") .append(createKeyValuePair(\"caller-name\")) }) document .querySelector(\"#caller-name [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#caller-name [data-request-headers]\") .append(createKeyValuePair(\"caller-name\")) }) document.querySelector(\"#caller-name [data-url]\").value = apiParams.url document.querySelector(\"#caller-name [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#caller-name [data-query-params]\") .append( createKeyValuePair( \"caller-name\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#caller-name [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#caller-name [data-request-path]\") .append( createKeyValuePair( \"caller-name\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#caller-name [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#caller-name [data-request-headers]\") .append( createKeyValuePair( \"caller-name\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#caller-name [data-request-auth]\") .append( createKeyValuePair( \"caller-name\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#caller-name [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#caller-name [data-method]\").value auth = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-request-auth]\") ) path = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-request-path]\") ) headers = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#caller-name [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#caller-name [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#caller-name [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#caller-name [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"caller-name\", response.status) updateResponseBody(\"caller-name\", response.data) updateRequestBody(\"caller-name\", myRequest) }) .then(() = { document.querySelector(\"#caller-name [data-json-response-body]\") document.querySelector(\"#caller-name [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":3,"href":"/twilio-apis/api/phone-numbers/phone-numbers-v1/","title":"Numbers v1","parent":"Phone Numbers","content":"Phone Numbers API lets you search for available numbers, purchase and manage numbers.\nACTIVE  List all active phone numbers.\n  console.log(\"API PARAMS: ..\\/params\\/phone-numbers\\/incoming.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#active [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active [data-query-params]\") .append(createKeyValuePair(\"active\")) }) document .querySelector(\"#active [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active [data-request-headers]\") .append(createKeyValuePair(\"active\")) }) document.querySelector(\"#active [data-url]\").value = apiParams.url document.querySelector(\"#active [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#active [data-query-params]\") .append( createKeyValuePair( \"active\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#active [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#active [data-request-path]\") .append( createKeyValuePair( \"active\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#active [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#active [data-request-headers]\") .append( createKeyValuePair( \"active\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#active [data-request-auth]\") .append( createKeyValuePair( \"active\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#active [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active [data-method]\").value auth = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-request-auth]\") ) path = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-request-path]\") ) headers = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#active [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#active [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active\", response.status) updateResponseBody(\"active\", response.data) updateRequestBody(\"active\", myRequest) }) .then(() = { document.querySelector(\"#active [data-json-response-body]\") document.querySelector(\"#active [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   TYPES  List available phone number types by country.\n  console.log(\"API PARAMS: ..\\/params\\/phone-numbers\\/available-country.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#country [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#country [data-query-params]\") .append(createKeyValuePair(\"country\")) }) document .querySelector(\"#country [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#country [data-request-headers]\") .append(createKeyValuePair(\"country\")) }) document.querySelector(\"#country [data-url]\").value = apiParams.url document.querySelector(\"#country [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#country [data-query-params]\") .append( createKeyValuePair( \"country\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#country [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#country [data-request-path]\") .append( createKeyValuePair( \"country\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#country [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#country [data-request-headers]\") .append( createKeyValuePair( \"country\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#country [data-request-auth]\") .append( createKeyValuePair( \"country\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#country [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#country [data-method]\").value auth = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-request-auth]\") ) path = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-request-path]\") ) headers = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#country [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#country [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#country [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#country [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"country\", response.status) updateResponseBody(\"country\", response.data) updateRequestBody(\"country\", myRequest) }) .then(() = { document.querySelector(\"#country [data-json-response-body]\") document.querySelector(\"#country [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   LOCAL  List available local phone numbers by country.\n  console.log(\"API PARAMS: ..\\/params\\/phone-numbers\\/available-local.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#local [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#local [data-query-params]\") .append(createKeyValuePair(\"local\")) }) document .querySelector(\"#local [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#local [data-request-headers]\") .append(createKeyValuePair(\"local\")) }) document.querySelector(\"#local [data-url]\").value = apiParams.url document.querySelector(\"#local [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#local [data-query-params]\") .append( createKeyValuePair( \"local\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#local [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#local [data-request-path]\") .append( createKeyValuePair( \"local\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#local [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#local [data-request-headers]\") .append( createKeyValuePair( \"local\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#local [data-request-auth]\") .append( createKeyValuePair( \"local\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#local [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#local [data-method]\").value auth = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-request-auth]\") ) path = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-request-path]\") ) headers = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#local [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#local [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#local [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#local [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"local\", response.status) updateResponseBody(\"local\", response.data) updateRequestBody(\"local\", myRequest) }) .then(() = { document.querySelector(\"#local [data-json-response-body]\") document.querySelector(\"#local [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   TOLL FREE  List available toll-free phone numbers by country.\n  console.log(\"API PARAMS: ..\\/params\\/phone-numbers\\/available-tollfree.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#tollfree [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#tollfree [data-query-params]\") .append(createKeyValuePair(\"tollfree\")) }) document .querySelector(\"#tollfree [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#tollfree [data-request-headers]\") .append(createKeyValuePair(\"tollfree\")) }) document.querySelector(\"#tollfree [data-url]\").value = apiParams.url document.querySelector(\"#tollfree [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#tollfree [data-query-params]\") .append( createKeyValuePair( \"tollfree\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#tollfree [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#tollfree [data-request-path]\") .append( createKeyValuePair( \"tollfree\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#tollfree [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#tollfree [data-request-headers]\") .append( createKeyValuePair( \"tollfree\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#tollfree [data-request-auth]\") .append( createKeyValuePair( \"tollfree\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#tollfree [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#tollfree [data-method]\").value auth = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-request-auth]\") ) path = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-request-path]\") ) headers = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#tollfree [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#tollfree [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#tollfree [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#tollfree [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"tollfree\", response.status) updateResponseBody(\"tollfree\", response.data) updateRequestBody(\"tollfree\", myRequest) }) .then(() = { document.querySelector(\"#tollfree [data-json-response-body]\") document.querySelector(\"#tollfree [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   MOBILE  List available mobile phone numbers by country.\n  console.log(\"API PARAMS: ..\\/params\\/phone-numbers\\/available-mobile.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#mobile [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#mobile [data-query-params]\") .append(createKeyValuePair(\"mobile\")) }) document .querySelector(\"#mobile [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#mobile [data-request-headers]\") .append(createKeyValuePair(\"mobile\")) }) document.querySelector(\"#mobile [data-url]\").value = apiParams.url document.querySelector(\"#mobile [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#mobile [data-query-params]\") .append( createKeyValuePair( \"mobile\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#mobile [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#mobile [data-request-path]\") .append( createKeyValuePair( \"mobile\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#mobile [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#mobile [data-request-headers]\") .append( createKeyValuePair( \"mobile\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#mobile [data-request-auth]\") .append( createKeyValuePair( \"mobile\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#mobile [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#mobile [data-method]\").value auth = keyValuePairsToObjects( \"mobile\", document.querySelector(\"#mobile [data-request-auth]\") ) path = keyValuePairsToObjects( \"mobile\", document.querySelector(\"#mobile [data-request-path]\") ) headers = keyValuePairsToObjects( \"mobile\", document.querySelector(\"#mobile [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"mobile\", document.querySelector(\"#mobile [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"mobile\", document.querySelector(\"#mobile [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#mobile [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#mobile [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#mobile [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#mobile [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"mobile\", response.status) updateResponseBody(\"mobile\", response.data) updateRequestBody(\"mobile\", myRequest) }) .then(() = { document.querySelector(\"#mobile [data-json-response-body]\") document.querySelector(\"#mobile [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":4,"href":"/twilio-apis/api/messages/send/","title":"Send Message","parent":"Messages","content":"Send messages with the Twilio Messaging API.\nSMS    console.log(\"API PARAMS: ..\\/params\\/send\\/sms.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#sms [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#sms [data-query-params]\") .append(createKeyValuePair(\"sms\")) }) document .querySelector(\"#sms [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#sms [data-request-headers]\") .append(createKeyValuePair(\"sms\")) }) document.querySelector(\"#sms [data-url]\").value = apiParams.url document.querySelector(\"#sms [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#sms [data-query-params]\") .append( createKeyValuePair( \"sms\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#sms [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#sms [data-request-path]\") .append( createKeyValuePair( \"sms\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#sms [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#sms [data-request-headers]\") .append( createKeyValuePair( \"sms\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#sms [data-request-auth]\") .append( createKeyValuePair( \"sms\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#sms [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#sms [data-method]\").value auth = keyValuePairsToObjects( \"sms\", document.querySelector(\"#sms [data-request-auth]\") ) path = keyValuePairsToObjects( \"sms\", document.querySelector(\"#sms [data-request-path]\") ) headers = keyValuePairsToObjects( \"sms\", document.querySelector(\"#sms [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"sms\", document.querySelector(\"#sms [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"sms\", document.querySelector(\"#sms [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#sms [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#sms [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#sms [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#sms [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"sms\", response.status) updateResponseBody(\"sms\", response.data) updateRequestBody(\"sms\", myRequest) }) .then(() = { document.querySelector(\"#sms [data-json-response-body]\") document.querySelector(\"#sms [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   SCHEDULED    console.log(\"API PARAMS: ..\\/params\\/send\\/scheduled.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#scheduled [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#scheduled [data-query-params]\") .append(createKeyValuePair(\"scheduled\")) }) document .querySelector(\"#scheduled [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#scheduled [data-request-headers]\") .append(createKeyValuePair(\"scheduled\")) }) document.querySelector(\"#scheduled [data-url]\").value = apiParams.url document.querySelector(\"#scheduled [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#scheduled [data-query-params]\") .append( createKeyValuePair( \"scheduled\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#scheduled [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#scheduled [data-request-path]\") .append( createKeyValuePair( \"scheduled\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#scheduled [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#scheduled [data-request-headers]\") .append( createKeyValuePair( \"scheduled\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#scheduled [data-request-auth]\") .append( createKeyValuePair( \"scheduled\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#scheduled [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#scheduled [data-method]\").value auth = keyValuePairsToObjects( \"scheduled\", document.querySelector(\"#scheduled [data-request-auth]\") ) path = keyValuePairsToObjects( \"scheduled\", document.querySelector(\"#scheduled [data-request-path]\") ) headers = keyValuePairsToObjects( \"scheduled\", document.querySelector(\"#scheduled [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"scheduled\", document.querySelector(\"#scheduled [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"scheduled\", document.querySelector(\"#scheduled [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#scheduled [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#scheduled [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#scheduled [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#scheduled [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"scheduled\", response.status) updateResponseBody(\"scheduled\", response.data) updateRequestBody(\"scheduled\", myRequest) }) .then(() = { document.querySelector(\"#scheduled [data-json-response-body]\") document.querySelector(\"#scheduled [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   MMS    console.log(\"API PARAMS: ..\\/params\\/send\\/mms.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#mms [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#mms [data-query-params]\") .append(createKeyValuePair(\"mms\")) }) document .querySelector(\"#mms [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#mms [data-request-headers]\") .append(createKeyValuePair(\"mms\")) }) document.querySelector(\"#mms [data-url]\").value = apiParams.url document.querySelector(\"#mms [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#mms [data-query-params]\") .append( createKeyValuePair( \"mms\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#mms [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#mms [data-request-path]\") .append( createKeyValuePair( \"mms\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#mms [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#mms [data-request-headers]\") .append( createKeyValuePair( \"mms\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#mms [data-request-auth]\") .append( createKeyValuePair( \"mms\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#mms [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#mms [data-method]\").value auth = keyValuePairsToObjects( \"mms\", document.querySelector(\"#mms [data-request-auth]\") ) path = keyValuePairsToObjects( \"mms\", document.querySelector(\"#mms [data-request-path]\") ) headers = keyValuePairsToObjects( \"mms\", document.querySelector(\"#mms [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"mms\", document.querySelector(\"#mms [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"mms\", document.querySelector(\"#mms [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#mms [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#mms [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#mms [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#mms [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"mms\", response.status) updateResponseBody(\"mms\", response.data) updateRequestBody(\"mms\", myRequest) }) .then(() = { document.querySelector(\"#mms [data-json-response-body]\") document.querySelector(\"#mms [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   WHATSAPP  The mobile customer must send a WhatsApp message to +14155238886 with a message body of join immediately-finger to opt-in to receiving WhatsApp messages.\n  console.log(\"API PARAMS: ..\\/params\\/send\\/whatsapp.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#whatsapp [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#whatsapp [data-query-params]\") .append(createKeyValuePair(\"whatsapp\")) }) document .querySelector(\"#whatsapp [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#whatsapp [data-request-headers]\") .append(createKeyValuePair(\"whatsapp\")) }) document.querySelector(\"#whatsapp [data-url]\").value = apiParams.url document.querySelector(\"#whatsapp [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#whatsapp [data-query-params]\") .append( createKeyValuePair( \"whatsapp\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#whatsapp [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#whatsapp [data-request-path]\") .append( createKeyValuePair( \"whatsapp\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#whatsapp [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#whatsapp [data-request-headers]\") .append( createKeyValuePair( \"whatsapp\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#whatsapp [data-request-auth]\") .append( createKeyValuePair( \"whatsapp\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#whatsapp [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#whatsapp [data-method]\").value auth = keyValuePairsToObjects( \"whatsapp\", document.querySelector(\"#whatsapp [data-request-auth]\") ) path = keyValuePairsToObjects( \"whatsapp\", document.querySelector(\"#whatsapp [data-request-path]\") ) headers = keyValuePairsToObjects( \"whatsapp\", document.querySelector(\"#whatsapp [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"whatsapp\", document.querySelector(\"#whatsapp [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"whatsapp\", document.querySelector(\"#whatsapp [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#whatsapp [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#whatsapp [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#whatsapp [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#whatsapp [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"whatsapp\", response.status) updateResponseBody(\"whatsapp\", response.data) updateRequestBody(\"whatsapp\", myRequest) }) .then(() = { document.querySelector(\"#whatsapp [data-json-response-body]\") document.querySelector(\"#whatsapp [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   FACEBOOK  The mobile customer must initiate a conversation with the business by sending a Facebook Messenger message to Owl-Taxis at https://www.facebook.com/Owl-Taxis-100633889146611.\n  console.log(\"API PARAMS: ..\\/params\\/send\\/facebook.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#facebook [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#facebook [data-query-params]\") .append(createKeyValuePair(\"facebook\")) }) document .querySelector(\"#facebook [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#facebook [data-request-headers]\") .append(createKeyValuePair(\"facebook\")) }) document.querySelector(\"#facebook [data-url]\").value = apiParams.url document.querySelector(\"#facebook [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#facebook [data-query-params]\") .append( createKeyValuePair( \"facebook\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#facebook [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#facebook [data-request-path]\") .append( createKeyValuePair( \"facebook\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#facebook [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#facebook [data-request-headers]\") .append( createKeyValuePair( \"facebook\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#facebook [data-request-auth]\") .append( createKeyValuePair( \"facebook\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#facebook [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#facebook [data-method]\").value auth = keyValuePairsToObjects( \"facebook\", document.querySelector(\"#facebook [data-request-auth]\") ) path = keyValuePairsToObjects( \"facebook\", document.querySelector(\"#facebook [data-request-path]\") ) headers = keyValuePairsToObjects( \"facebook\", document.querySelector(\"#facebook [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"facebook\", document.querySelector(\"#facebook [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"facebook\", document.querySelector(\"#facebook [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#facebook [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#facebook [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#facebook [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#facebook [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"facebook\", response.status) updateResponseBody(\"facebook\", response.data) updateRequestBody(\"facebook\", myRequest) }) .then(() = { document.querySelector(\"#facebook [data-json-response-body]\") document.querySelector(\"#facebook [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   GOOGLE    console.log(\"API PARAMS: ..\\/params\\/send\\/google.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#google [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#google [data-query-params]\") .append(createKeyValuePair(\"google\")) }) document .querySelector(\"#google [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#google [data-request-headers]\") .append(createKeyValuePair(\"google\")) }) document.querySelector(\"#google [data-url]\").value = apiParams.url document.querySelector(\"#google [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#google [data-query-params]\") .append( createKeyValuePair( \"google\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#google [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#google [data-request-path]\") .append( createKeyValuePair( \"google\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#google [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#google [data-request-headers]\") .append( createKeyValuePair( \"google\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#google [data-request-auth]\") .append( createKeyValuePair( \"google\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#google [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#google [data-method]\").value auth = keyValuePairsToObjects( \"google\", document.querySelector(\"#google [data-request-auth]\") ) path = keyValuePairsToObjects( \"google\", document.querySelector(\"#google [data-request-path]\") ) headers = keyValuePairsToObjects( \"google\", document.querySelector(\"#google [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"google\", document.querySelector(\"#google [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"google\", document.querySelector(\"#google [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#google [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#google [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#google [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#google [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"google\", response.status) updateResponseBody(\"google\", response.data) updateRequestBody(\"google\", myRequest) }) .then(() = { document.querySelector(\"#google [data-json-response-body]\") document.querySelector(\"#google [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":5,"href":"/twilio-apis/api/messaging-services/services/","title":"Services","parent":"Messaging Services","content":" CREATE    console.log(\"API PARAMS: ..\\/params\\/create.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#create [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-query-params]\") .append(createKeyValuePair(\"create\")) }) document .querySelector(\"#create [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-request-headers]\") .append(createKeyValuePair(\"create\")) }) document.querySelector(\"#create [data-url]\").value = apiParams.url document.querySelector(\"#create [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#create [data-query-params]\") .append( createKeyValuePair( \"create\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#create [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#create [data-request-path]\") .append( createKeyValuePair( \"create\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#create [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#create [data-request-headers]\") .append( createKeyValuePair( \"create\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#create [data-request-auth]\") .append( createKeyValuePair( \"create\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#create [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create [data-method]\").value auth = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-auth]\") ) path = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-path]\") ) headers = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#create [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#create [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create\", response.status) updateResponseBody(\"create\", response.data) updateRequestBody(\"create\", myRequest) }) .then(() = { document.querySelector(\"#create [data-json-response-body]\") document.querySelector(\"#create [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   LIST    console.log(\"API PARAMS: ..\\/params\\/list.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#list [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list [data-query-params]\") .append(createKeyValuePair(\"list\")) }) document .querySelector(\"#list [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list [data-request-headers]\") .append(createKeyValuePair(\"list\")) }) document.querySelector(\"#list [data-url]\").value = apiParams.url document.querySelector(\"#list [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#list [data-query-params]\") .append( createKeyValuePair( \"list\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#list [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#list [data-request-path]\") .append( createKeyValuePair( \"list\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#list [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#list [data-request-headers]\") .append( createKeyValuePair( \"list\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#list [data-request-auth]\") .append( createKeyValuePair( \"list\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#list [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#list [data-method]\").value auth = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-auth]\") ) path = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-path]\") ) headers = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#list [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#list [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#list [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#list [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"list\", response.status) updateResponseBody(\"list\", response.data) updateRequestBody(\"list\", myRequest) }) .then(() = { document.querySelector(\"#list [data-json-response-body]\") document.querySelector(\"#list [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   GET    console.log(\"API PARAMS: ..\\/params\\/get.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#get [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#get [data-query-params]\") .append(createKeyValuePair(\"get\")) }) document .querySelector(\"#get [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#get [data-request-headers]\") .append(createKeyValuePair(\"get\")) }) document.querySelector(\"#get [data-url]\").value = apiParams.url document.querySelector(\"#get [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#get [data-query-params]\") .append( createKeyValuePair( \"get\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#get [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#get [data-request-path]\") .append( createKeyValuePair( \"get\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#get [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#get [data-request-headers]\") .append( createKeyValuePair( \"get\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#get [data-request-auth]\") .append( createKeyValuePair( \"get\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#get [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#get [data-method]\").value auth = keyValuePairsToObjects( \"get\", document.querySelector(\"#get [data-request-auth]\") ) path = keyValuePairsToObjects( \"get\", document.querySelector(\"#get [data-request-path]\") ) headers = keyValuePairsToObjects( \"get\", document.querySelector(\"#get [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"get\", document.querySelector(\"#get [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"get\", document.querySelector(\"#get [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#get [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#get [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#get [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#get [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"get\", response.status) updateResponseBody(\"get\", response.data) updateRequestBody(\"get\", myRequest) }) .then(() = { document.querySelector(\"#get [data-json-response-body]\") document.querySelector(\"#get [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   UPDATE    console.log(\"API PARAMS: ..\\/params\\/update.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#update [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update [data-query-params]\") .append(createKeyValuePair(\"update\")) }) document .querySelector(\"#update [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update [data-request-headers]\") .append(createKeyValuePair(\"update\")) }) document.querySelector(\"#update [data-url]\").value = apiParams.url document.querySelector(\"#update [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#update [data-query-params]\") .append( createKeyValuePair( \"update\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#update [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#update [data-request-path]\") .append( createKeyValuePair( \"update\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#update [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#update [data-request-headers]\") .append( createKeyValuePair( \"update\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#update [data-request-auth]\") .append( createKeyValuePair( \"update\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#update [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#update [data-method]\").value auth = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-request-auth]\") ) path = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-request-path]\") ) headers = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#update [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#update [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#update [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#update [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"update\", response.status) updateResponseBody(\"update\", response.data) updateRequestBody(\"update\", myRequest) }) .then(() = { document.querySelector(\"#update [data-json-response-body]\") document.querySelector(\"#update [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   DELETE    console.log(\"API PARAMS: ..\\/params\\/delete.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#delete [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete [data-query-params]\") .append(createKeyValuePair(\"delete\")) }) document .querySelector(\"#delete [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete [data-request-headers]\") .append(createKeyValuePair(\"delete\")) }) document.querySelector(\"#delete [data-url]\").value = apiParams.url document.querySelector(\"#delete [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#delete [data-query-params]\") .append( createKeyValuePair( \"delete\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#delete [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#delete [data-request-path]\") .append( createKeyValuePair( \"delete\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#delete [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#delete [data-request-headers]\") .append( createKeyValuePair( \"delete\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#delete [data-request-auth]\") .append( createKeyValuePair( \"delete\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#delete [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#delete [data-method]\").value auth = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-auth]\") ) path = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-path]\") ) headers = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#delete [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#delete [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#delete [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#delete [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"delete\", response.status) updateResponseBody(\"delete\", response.data) updateRequestBody(\"delete\", myRequest) }) .then(() = { document.querySelector(\"#delete [data-json-response-body]\") document.querySelector(\"#delete [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":6,"href":"/twilio-apis/api/accounts/addresses/","title":"Addresses","parent":"Accounts","content":"Create and manage addresses.\nCREATE  Create an Address.\n  console.log(\"API PARAMS: ..\\/params\\/addresses\\/create.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#create [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-query-params]\") .append(createKeyValuePair(\"create\")) }) document .querySelector(\"#create [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-request-headers]\") .append(createKeyValuePair(\"create\")) }) document.querySelector(\"#create [data-url]\").value = apiParams.url document.querySelector(\"#create [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#create [data-query-params]\") .append( createKeyValuePair( \"create\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#create [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#create [data-request-path]\") .append( createKeyValuePair( \"create\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#create [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#create [data-request-headers]\") .append( createKeyValuePair( \"create\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#create [data-request-auth]\") .append( createKeyValuePair( \"create\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#create [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create [data-method]\").value auth = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-auth]\") ) path = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-path]\") ) headers = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#create [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#create [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create\", response.status) updateResponseBody(\"create\", response.data) updateRequestBody(\"create\", myRequest) }) .then(() = { document.querySelector(\"#create [data-json-response-body]\") document.querySelector(\"#create [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   LIST  Show all addresses.\n  console.log(\"API PARAMS: ..\\/params\\/addresses\\/list.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#list [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list [data-query-params]\") .append(createKeyValuePair(\"list\")) }) document .querySelector(\"#list [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list [data-request-headers]\") .append(createKeyValuePair(\"list\")) }) document.querySelector(\"#list [data-url]\").value = apiParams.url document.querySelector(\"#list [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#list [data-query-params]\") .append( createKeyValuePair( \"list\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#list [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#list [data-request-path]\") .append( createKeyValuePair( \"list\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#list [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#list [data-request-headers]\") .append( createKeyValuePair( \"list\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#list [data-request-auth]\") .append( createKeyValuePair( \"list\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#list [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#list [data-method]\").value auth = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-auth]\") ) path = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-path]\") ) headers = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#list [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#list [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#list [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#list [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"list\", response.status) updateResponseBody(\"list\", response.data) updateRequestBody(\"list\", myRequest) }) .then(() = { document.querySelector(\"#list [data-json-response-body]\") document.querySelector(\"#list [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   FETCH  Fetch an Address.\n  console.log(\"API PARAMS: ..\\/params\\/addresses\\/fetch.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#fetch [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch [data-query-params]\") .append(createKeyValuePair(\"fetch\")) }) document .querySelector(\"#fetch [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch [data-request-headers]\") .append(createKeyValuePair(\"fetch\")) }) document.querySelector(\"#fetch [data-url]\").value = apiParams.url document.querySelector(\"#fetch [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#fetch [data-query-params]\") .append( createKeyValuePair( \"fetch\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#fetch [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#fetch [data-request-path]\") .append( createKeyValuePair( \"fetch\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#fetch [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#fetch [data-request-headers]\") .append( createKeyValuePair( \"fetch\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#fetch [data-request-auth]\") .append( createKeyValuePair( \"fetch\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#fetch [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#fetch [data-method]\").value auth = keyValuePairsToObjects( \"fetch\", document.querySelector(\"#fetch [data-request-auth]\") ) path = keyValuePairsToObjects( \"fetch\", document.querySelector(\"#fetch [data-request-path]\") ) headers = keyValuePairsToObjects( \"fetch\", document.querySelector(\"#fetch [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"fetch\", document.querySelector(\"#fetch [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"fetch\", document.querySelector(\"#fetch [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#fetch [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#fetch [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#fetch [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#fetch [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"fetch\", response.status) updateResponseBody(\"fetch\", response.data) updateRequestBody(\"fetch\", myRequest) }) .then(() = { document.querySelector(\"#fetch [data-json-response-body]\") document.querySelector(\"#fetch [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   PHONE NUMBERS  List Dependent Phone Number Subresources.\n  console.log(\"API PARAMS: ..\\/params\\/addresses\\/pns.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#pns [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#pns [data-query-params]\") .append(createKeyValuePair(\"pns\")) }) document .querySelector(\"#pns [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#pns [data-request-headers]\") .append(createKeyValuePair(\"pns\")) }) document.querySelector(\"#pns [data-url]\").value = apiParams.url document.querySelector(\"#pns [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#pns [data-query-params]\") .append( createKeyValuePair( \"pns\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#pns [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#pns [data-request-path]\") .append( createKeyValuePair( \"pns\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#pns [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#pns [data-request-headers]\") .append( createKeyValuePair( \"pns\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#pns [data-request-auth]\") .append( createKeyValuePair( \"pns\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#pns [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#pns [data-method]\").value auth = keyValuePairsToObjects( \"pns\", document.querySelector(\"#pns [data-request-auth]\") ) path = keyValuePairsToObjects( \"pns\", document.querySelector(\"#pns [data-request-path]\") ) headers = keyValuePairsToObjects( \"pns\", document.querySelector(\"#pns [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"pns\", document.querySelector(\"#pns [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"pns\", document.querySelector(\"#pns [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#pns [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#pns [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#pns [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#pns [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"pns\", response.status) updateResponseBody(\"pns\", response.data) updateRequestBody(\"pns\", myRequest) }) .then(() = { document.querySelector(\"#pns [data-json-response-body]\") document.querySelector(\"#pns [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   UPDATE  Update a customer name and street address.\n  console.log(\"API PARAMS: ..\\/params\\/addresses\\/update.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#update [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update [data-query-params]\") .append(createKeyValuePair(\"update\")) }) document .querySelector(\"#update [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update [data-request-headers]\") .append(createKeyValuePair(\"update\")) }) document.querySelector(\"#update [data-url]\").value = apiParams.url document.querySelector(\"#update [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#update [data-query-params]\") .append( createKeyValuePair( \"update\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#update [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#update [data-request-path]\") .append( createKeyValuePair( \"update\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#update [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#update [data-request-headers]\") .append( createKeyValuePair( \"update\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#update [data-request-auth]\") .append( createKeyValuePair( \"update\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#update [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#update [data-method]\").value auth = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-request-auth]\") ) path = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-request-path]\") ) headers = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#update [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#update [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#update [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#update [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"update\", response.status) updateResponseBody(\"update\", response.data) updateRequestBody(\"update\", myRequest) }) .then(() = { document.querySelector(\"#update [data-json-response-body]\") document.querySelector(\"#update [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   DELETE  Delete an Address.\n  console.log(\"API PARAMS: ..\\/params\\/addresses\\/delete.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#delete [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete [data-query-params]\") .append(createKeyValuePair(\"delete\")) }) document .querySelector(\"#delete [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete [data-request-headers]\") .append(createKeyValuePair(\"delete\")) }) document.querySelector(\"#delete [data-url]\").value = apiParams.url document.querySelector(\"#delete [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#delete [data-query-params]\") .append( createKeyValuePair( \"delete\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#delete [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#delete [data-request-path]\") .append( createKeyValuePair( \"delete\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#delete [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#delete [data-request-headers]\") .append( createKeyValuePair( \"delete\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#delete [data-request-auth]\") .append( createKeyValuePair( \"delete\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#delete [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#delete [data-method]\").value auth = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-auth]\") ) path = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-path]\") ) headers = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#delete [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#delete [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#delete [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#delete [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"delete\", response.status) updateResponseBody(\"delete\", response.data) updateRequestBody(\"delete\", myRequest) }) .then(() = { document.querySelector(\"#delete [data-json-response-body]\") document.querySelector(\"#delete [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":7,"href":"/twilio-apis/api/lookup/lookup-v2/","title":"Lookup v2","parent":"Lookup","content":"The Lookup v2 API provides a way to retrieve additional information about a phone number.\nNUMBER  Performs basic phone number validation and conversion from regional formatting to E.164 (free).\n  console.log(\"API PARAMS: ..\\/params\\/lookup-v2\\/number.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#number [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#number [data-query-params]\") .append(createKeyValuePair(\"number\")) }) document .querySelector(\"#number [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#number [data-request-headers]\") .append(createKeyValuePair(\"number\")) }) document.querySelector(\"#number [data-url]\").value = apiParams.url document.querySelector(\"#number [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#number [data-query-params]\") .append( createKeyValuePair( \"number\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#number [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#number [data-request-path]\") .append( createKeyValuePair( \"number\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#number [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#number [data-request-headers]\") .append( createKeyValuePair( \"number\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#number [data-request-auth]\") .append( createKeyValuePair( \"number\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#number [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#number [data-method]\").value auth = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-request-auth]\") ) path = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-request-path]\") ) headers = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"number\", document.querySelector(\"#number [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#number [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#number [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#number [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#number [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"number\", response.status) updateResponseBody(\"number\", response.data) updateRequestBody(\"number\", myRequest) }) .then(() = { document.querySelector(\"#number [data-json-response-body]\") document.querySelector(\"#number [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   INVALID  Performs basic phone number validation and conversion from regional formatting to E.164 (free).\n  console.log(\"API PARAMS: ..\\/params\\/lookup-v2\\/invalid-number.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#invalid-number [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#invalid-number [data-query-params]\") .append(createKeyValuePair(\"invalid-number\")) }) document .querySelector(\"#invalid-number [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#invalid-number [data-request-headers]\") .append(createKeyValuePair(\"invalid-number\")) }) document.querySelector(\"#invalid-number [data-url]\").value = apiParams.url document.querySelector(\"#invalid-number [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#invalid-number [data-query-params]\") .append( createKeyValuePair( \"invalid-number\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#invalid-number [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#invalid-number [data-request-path]\") .append( createKeyValuePair( \"invalid-number\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#invalid-number [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#invalid-number [data-request-headers]\") .append( createKeyValuePair( \"invalid-number\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#invalid-number [data-request-auth]\") .append( createKeyValuePair( \"invalid-number\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#invalid-number [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#invalid-number [data-method]\").value auth = keyValuePairsToObjects( \"invalid-number\", document.querySelector(\"#invalid-number [data-request-auth]\") ) path = keyValuePairsToObjects( \"invalid-number\", document.querySelector(\"#invalid-number [data-request-path]\") ) headers = keyValuePairsToObjects( \"invalid-number\", document.querySelector(\"#invalid-number [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"invalid-number\", document.querySelector(\"#invalid-number [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"invalid-number\", document.querySelector(\"#invalid-number [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#invalid-number [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#invalid-number [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#invalid-number [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#invalid-number [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"invalid-number\", response.status) updateResponseBody(\"invalid-number\", response.data) updateRequestBody(\"invalid-number\", myRequest) }) .then(() = { document.querySelector(\"#invalid-number [data-json-response-body]\") document.querySelector(\"#invalid-number [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   LINE TYPE  Provides carrier info and type (mobile, landline or voip). Costs $0.005 per lookup.\n  console.log(\"API PARAMS: ..\\/params\\/lookup-v2\\/line-type.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#line-type [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#line-type [data-query-params]\") .append(createKeyValuePair(\"line-type\")) }) document .querySelector(\"#line-type [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#line-type [data-request-headers]\") .append(createKeyValuePair(\"line-type\")) }) document.querySelector(\"#line-type [data-url]\").value = apiParams.url document.querySelector(\"#line-type [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#line-type [data-query-params]\") .append( createKeyValuePair( \"line-type\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#line-type [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#line-type [data-request-path]\") .append( createKeyValuePair( \"line-type\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#line-type [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#line-type [data-request-headers]\") .append( createKeyValuePair( \"line-type\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#line-type [data-request-auth]\") .append( createKeyValuePair( \"line-type\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#line-type [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#line-type [data-method]\").value auth = keyValuePairsToObjects( \"line-type\", document.querySelector(\"#line-type [data-request-auth]\") ) path = keyValuePairsToObjects( \"line-type\", document.querySelector(\"#line-type [data-request-path]\") ) headers = keyValuePairsToObjects( \"line-type\", document.querySelector(\"#line-type [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"line-type\", document.querySelector(\"#line-type [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"line-type\", document.querySelector(\"#line-type [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#line-type [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#line-type [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#line-type [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#line-type [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"line-type\", response.status) updateResponseBody(\"line-type\", response.data) updateRequestBody(\"line-type\", myRequest) }) .then(() = { document.querySelector(\"#line-type [data-json-response-body]\") document.querySelector(\"#line-type [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   CALLER NAME  Provides Caller Name and type (BUSINESS or CONSUMER). Currently available only in the US and costs $0.01 per lookup.\n  console.log(\"API PARAMS: ..\\/params\\/lookup-v2\\/caller-name.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#caller-name [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#caller-name [data-query-params]\") .append(createKeyValuePair(\"caller-name\")) }) document .querySelector(\"#caller-name [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#caller-name [data-request-headers]\") .append(createKeyValuePair(\"caller-name\")) }) document.querySelector(\"#caller-name [data-url]\").value = apiParams.url document.querySelector(\"#caller-name [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#caller-name [data-query-params]\") .append( createKeyValuePair( \"caller-name\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#caller-name [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#caller-name [data-request-path]\") .append( createKeyValuePair( \"caller-name\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#caller-name [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#caller-name [data-request-headers]\") .append( createKeyValuePair( \"caller-name\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#caller-name [data-request-auth]\") .append( createKeyValuePair( \"caller-name\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#caller-name [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#caller-name [data-method]\").value auth = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-request-auth]\") ) path = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-request-path]\") ) headers = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"caller-name\", document.querySelector(\"#caller-name [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#caller-name [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#caller-name [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#caller-name [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#caller-name [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"caller-name\", response.status) updateResponseBody(\"caller-name\", response.data) updateRequestBody(\"caller-name\", myRequest) }) .then(() = { document.querySelector(\"#caller-name [data-json-response-body]\") document.querySelector(\"#caller-name [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   MULTIPLE FIELDS  A comma-separated list of fields to return. Possible values are caller_name, sim_swap, call_forwarding, live_activity, enhanced_line_type or line_type_intelligence.\n  console.log(\"API PARAMS: ..\\/params\\/lookup-v2\\/multiple.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#multiple [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#multiple [data-query-params]\") .append(createKeyValuePair(\"multiple\")) }) document .querySelector(\"#multiple [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#multiple [data-request-headers]\") .append(createKeyValuePair(\"multiple\")) }) document.querySelector(\"#multiple [data-url]\").value = apiParams.url document.querySelector(\"#multiple [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#multiple [data-query-params]\") .append( createKeyValuePair( \"multiple\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#multiple [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#multiple [data-request-path]\") .append( createKeyValuePair( \"multiple\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#multiple [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#multiple [data-request-headers]\") .append( createKeyValuePair( \"multiple\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#multiple [data-request-auth]\") .append( createKeyValuePair( \"multiple\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#multiple [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#multiple [data-method]\").value auth = keyValuePairsToObjects( \"multiple\", document.querySelector(\"#multiple [data-request-auth]\") ) path = keyValuePairsToObjects( \"multiple\", document.querySelector(\"#multiple [data-request-path]\") ) headers = keyValuePairsToObjects( \"multiple\", document.querySelector(\"#multiple [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"multiple\", document.querySelector(\"#multiple [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"multiple\", document.querySelector(\"#multiple [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#multiple [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#multiple [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#multiple [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#multiple [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"multiple\", response.status) updateResponseBody(\"multiple\", response.data) updateRequestBody(\"multiple\", myRequest) }) .then(() = { document.querySelector(\"#multiple [data-json-response-body]\") document.querySelector(\"#multiple [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":8,"href":"/twilio-apis/api/phone-numbers/available-numbers-v2-available/","title":"Numbers v2 - Available","parent":"Phone Numbers","content":"The new Global Phone Numbers Catalog API lets you search for available numbers to purchase and to manage active numbers.\nTYPE  Search for available phone numbers by type (e.g. local, mobile, tollfree, shortcode.)\n  console.log(\"API PARAMS: ..\\/params\\/phone-numbers-v2\\/available-type.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#available-type [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#available-type [data-query-params]\") .append(createKeyValuePair(\"available-type\")) }) document .querySelector(\"#available-type [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#available-type [data-request-headers]\") .append(createKeyValuePair(\"available-type\")) }) document.querySelector(\"#available-type [data-url]\").value = apiParams.url document.querySelector(\"#available-type [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#available-type [data-query-params]\") .append( createKeyValuePair( \"available-type\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#available-type [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#available-type [data-request-path]\") .append( createKeyValuePair( \"available-type\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#available-type [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#available-type [data-request-headers]\") .append( createKeyValuePair( \"available-type\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#available-type [data-request-auth]\") .append( createKeyValuePair( \"available-type\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#available-type [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#available-type [data-method]\").value auth = keyValuePairsToObjects( \"available-type\", document.querySelector(\"#available-type [data-request-auth]\") ) path = keyValuePairsToObjects( \"available-type\", document.querySelector(\"#available-type [data-request-path]\") ) headers = keyValuePairsToObjects( \"available-type\", document.querySelector(\"#available-type [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"available-type\", document.querySelector(\"#available-type [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"available-type\", document.querySelector(\"#available-type [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#available-type [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#available-type [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#available-type [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#available-type [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"available-type\", response.status) updateResponseBody(\"available-type\", response.data) updateRequestBody(\"available-type\", myRequest) }) .then(() = { document.querySelector(\"#available-type [data-json-response-body]\") document.querySelector(\"#available-type [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   USE CASE  Search for available phone numbers by use case (e.g. twilio.use-case.conversations.sms, twilio.use-case.marketing.sms, twilio.use-case.notifications.sms, twilio.use-case.verifications.sms, twilio.use-case.contact-centers.sms.)\n  console.log(\"API PARAMS: ..\\/params\\/phone-numbers-v2\\/available-use-case.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#available-use-case [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#available-use-case [data-query-params]\") .append(createKeyValuePair(\"available-use-case\")) }) document .querySelector(\"#available-use-case [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#available-use-case [data-request-headers]\") .append(createKeyValuePair(\"available-use-case\")) }) document.querySelector(\"#available-use-case [data-url]\").value = apiParams.url document.querySelector(\"#available-use-case [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#available-use-case [data-query-params]\") .append( createKeyValuePair( \"available-use-case\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#available-use-case [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#available-use-case [data-request-path]\") .append( createKeyValuePair( \"available-use-case\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#available-use-case [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#available-use-case [data-request-headers]\") .append( createKeyValuePair( \"available-use-case\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#available-use-case [data-request-auth]\") .append( createKeyValuePair( \"available-use-case\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#available-use-case [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#available-use-case [data-method]\").value auth = keyValuePairsToObjects( \"available-use-case\", document.querySelector(\"#available-use-case [data-request-auth]\") ) path = keyValuePairsToObjects( \"available-use-case\", document.querySelector(\"#available-use-case [data-request-path]\") ) headers = keyValuePairsToObjects( \"available-use-case\", document.querySelector(\"#available-use-case [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"available-use-case\", document.querySelector(\"#available-use-case [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"available-use-case\", document.querySelector(\"#available-use-case [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#available-use-case [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#available-use-case [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#available-use-case [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#available-use-case [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"available-use-case\", response.status) updateResponseBody(\"available-use-case\", response.data) updateRequestBody(\"available-use-case\", myRequest) }) .then(() = { document.querySelector(\"#available-use-case [data-json-response-body]\") document.querySelector(\"#available-use-case [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   CAPABILITIES    console.log(\"API PARAMS: ..\\/params\\/phone-numbers-v2\\/available-capabilities.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#available-capabilities [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#available-capabilities [data-query-params]\") .append(createKeyValuePair(\"available-capabilities\")) }) document .querySelector(\"#available-capabilities [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#available-capabilities [data-request-headers]\") .append(createKeyValuePair(\"available-capabilities\")) }) document.querySelector(\"#available-capabilities [data-url]\").value = apiParams.url document.querySelector(\"#available-capabilities [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#available-capabilities [data-query-params]\") .append( createKeyValuePair( \"available-capabilities\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#available-capabilities [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#available-capabilities [data-request-path]\") .append( createKeyValuePair( \"available-capabilities\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#available-capabilities [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#available-capabilities [data-request-headers]\") .append( createKeyValuePair( \"available-capabilities\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#available-capabilities [data-request-auth]\") .append( createKeyValuePair( \"available-capabilities\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#available-capabilities [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#available-capabilities [data-method]\").value auth = keyValuePairsToObjects( \"available-capabilities\", document.querySelector(\"#available-capabilities [data-request-auth]\") ) path = keyValuePairsToObjects( \"available-capabilities\", document.querySelector(\"#available-capabilities [data-request-path]\") ) headers = keyValuePairsToObjects( \"available-capabilities\", document.querySelector(\"#available-capabilities [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"available-capabilities\", document.querySelector(\"#available-capabilities [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"available-capabilities\", document.querySelector(\"#available-capabilities [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#available-capabilities [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#available-capabilities [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#available-capabilities [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#available-capabilities [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"available-capabilities\", response.status) updateResponseBody(\"available-capabilities\", response.data) updateRequestBody(\"available-capabilities\", myRequest) }) .then(() = { document.querySelector(\"#available-capabilities [data-json-response-body]\") document.querySelector(\"#available-capabilities [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":9,"href":"/twilio-apis/api/conversations/participants/","title":"Participants","parent":"Conversations","content":"Add/remove participants to/from a conversation.\nAdd SMS Participant    console.log(\"API PARAMS: ..\\/params\\/create-sms-participant.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#create-sms-participant [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-sms-participant [data-query-params]\") .append(createKeyValuePair(\"create-sms-participant\")) }) document .querySelector(\"#create-sms-participant [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-sms-participant [data-request-headers]\") .append(createKeyValuePair(\"create-sms-participant\")) }) document.querySelector(\"#create-sms-participant [data-url]\").value = apiParams.url document.querySelector(\"#create-sms-participant [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#create-sms-participant [data-query-params]\") .append( createKeyValuePair( \"create-sms-participant\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#create-sms-participant [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#create-sms-participant [data-request-path]\") .append( createKeyValuePair( \"create-sms-participant\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#create-sms-participant [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#create-sms-participant [data-request-headers]\") .append( createKeyValuePair( \"create-sms-participant\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#create-sms-participant [data-request-auth]\") .append( createKeyValuePair( \"create-sms-participant\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#create-sms-participant [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create-sms-participant [data-method]\").value auth = keyValuePairsToObjects( \"create-sms-participant\", document.querySelector(\"#create-sms-participant [data-request-auth]\") ) path = keyValuePairsToObjects( \"create-sms-participant\", document.querySelector(\"#create-sms-participant [data-request-path]\") ) headers = keyValuePairsToObjects( \"create-sms-participant\", document.querySelector(\"#create-sms-participant [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create-sms-participant\", document.querySelector(\"#create-sms-participant [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create-sms-participant\", document.querySelector(\"#create-sms-participant [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create-sms-participant [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#create-sms-participant [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create-sms-participant [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#create-sms-participant [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create-sms-participant\", response.status) updateResponseBody(\"create-sms-participant\", response.data) updateRequestBody(\"create-sms-participant\", myRequest) }) .then(() = { document.querySelector(\"#create-sms-participant [data-json-response-body]\") document.querySelector(\"#create-sms-participant [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Add Chat Participant    console.log(\"API PARAMS: ..\\/params\\/create-chat-participant.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#create-chat-participant [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-chat-participant [data-query-params]\") .append(createKeyValuePair(\"create-chat-participant\")) }) document .querySelector(\"#create-chat-participant [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-chat-participant [data-request-headers]\") .append(createKeyValuePair(\"create-chat-participant\")) }) document.querySelector(\"#create-chat-participant [data-url]\").value = apiParams.url document.querySelector(\"#create-chat-participant [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#create-chat-participant [data-query-params]\") .append( createKeyValuePair( \"create-chat-participant\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#create-chat-participant [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#create-chat-participant [data-request-path]\") .append( createKeyValuePair( \"create-chat-participant\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#create-chat-participant [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#create-chat-participant [data-request-headers]\") .append( createKeyValuePair( \"create-chat-participant\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#create-chat-participant [data-request-auth]\") .append( createKeyValuePair( \"create-chat-participant\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#create-chat-participant [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create-chat-participant [data-method]\").value auth = keyValuePairsToObjects( \"create-chat-participant\", document.querySelector(\"#create-chat-participant [data-request-auth]\") ) path = keyValuePairsToObjects( \"create-chat-participant\", document.querySelector(\"#create-chat-participant [data-request-path]\") ) headers = keyValuePairsToObjects( \"create-chat-participant\", document.querySelector(\"#create-chat-participant [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create-chat-participant\", document.querySelector(\"#create-chat-participant [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create-chat-participant\", document.querySelector(\"#create-chat-participant [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create-chat-participant [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#create-chat-participant [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create-chat-participant [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#create-chat-participant [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create-chat-participant\", response.status) updateResponseBody(\"create-chat-participant\", response.data) updateRequestBody(\"create-chat-participant\", myRequest) }) .then(() = { document.querySelector(\"#create-chat-participant [data-json-response-body]\") document.querySelector(\"#create-chat-participant [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   List    console.log(\"API PARAMS: ..\\/params\\/list-participants.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#list-participants [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list-participants [data-query-params]\") .append(createKeyValuePair(\"list-participants\")) }) document .querySelector(\"#list-participants [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list-participants [data-request-headers]\") .append(createKeyValuePair(\"list-participants\")) }) document.querySelector(\"#list-participants [data-url]\").value = apiParams.url document.querySelector(\"#list-participants [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#list-participants [data-query-params]\") .append( createKeyValuePair( \"list-participants\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#list-participants [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#list-participants [data-request-path]\") .append( createKeyValuePair( \"list-participants\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#list-participants [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#list-participants [data-request-headers]\") .append( createKeyValuePair( \"list-participants\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#list-participants [data-request-auth]\") .append( createKeyValuePair( \"list-participants\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#list-participants [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#list-participants [data-method]\").value auth = keyValuePairsToObjects( \"list-participants\", document.querySelector(\"#list-participants [data-request-auth]\") ) path = keyValuePairsToObjects( \"list-participants\", document.querySelector(\"#list-participants [data-request-path]\") ) headers = keyValuePairsToObjects( \"list-participants\", document.querySelector(\"#list-participants [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"list-participants\", document.querySelector(\"#list-participants [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"list-participants\", document.querySelector(\"#list-participants [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#list-participants [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#list-participants [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#list-participants [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#list-participants [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"list-participants\", response.status) updateResponseBody(\"list-participants\", response.data) updateRequestBody(\"list-participants\", myRequest) }) .then(() = { document.querySelector(\"#list-participants [data-json-response-body]\") document.querySelector(\"#list-participants [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Fetch    console.log(\"API PARAMS: ..\\/params\\/fetch-participant.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#fetch-participant [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-participant [data-query-params]\") .append(createKeyValuePair(\"fetch-participant\")) }) document .querySelector(\"#fetch-participant [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-participant [data-request-headers]\") .append(createKeyValuePair(\"fetch-participant\")) }) document.querySelector(\"#fetch-participant [data-url]\").value = apiParams.url document.querySelector(\"#fetch-participant [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#fetch-participant [data-query-params]\") .append( createKeyValuePair( \"fetch-participant\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#fetch-participant [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#fetch-participant [data-request-path]\") .append( createKeyValuePair( \"fetch-participant\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#fetch-participant [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#fetch-participant [data-request-headers]\") .append( createKeyValuePair( \"fetch-participant\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#fetch-participant [data-request-auth]\") .append( createKeyValuePair( \"fetch-participant\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#fetch-participant [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#fetch-participant [data-method]\").value auth = keyValuePairsToObjects( \"fetch-participant\", document.querySelector(\"#fetch-participant [data-request-auth]\") ) path = keyValuePairsToObjects( \"fetch-participant\", document.querySelector(\"#fetch-participant [data-request-path]\") ) headers = keyValuePairsToObjects( \"fetch-participant\", document.querySelector(\"#fetch-participant [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"fetch-participant\", document.querySelector(\"#fetch-participant [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"fetch-participant\", document.querySelector(\"#fetch-participant [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#fetch-participant [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#fetch-participant [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#fetch-participant [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#fetch-participant [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"fetch-participant\", response.status) updateResponseBody(\"fetch-participant\", response.data) updateRequestBody(\"fetch-participant\", myRequest) }) .then(() = { document.querySelector(\"#fetch-participant [data-json-response-body]\") document.querySelector(\"#fetch-participant [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Update    console.log(\"API PARAMS: ..\\/params\\/update-participant.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#update-participant [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update-participant [data-query-params]\") .append(createKeyValuePair(\"update-participant\")) }) document .querySelector(\"#update-participant [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update-participant [data-request-headers]\") .append(createKeyValuePair(\"update-participant\")) }) document.querySelector(\"#update-participant [data-url]\").value = apiParams.url document.querySelector(\"#update-participant [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#update-participant [data-query-params]\") .append( createKeyValuePair( \"update-participant\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#update-participant [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#update-participant [data-request-path]\") .append( createKeyValuePair( \"update-participant\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#update-participant [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#update-participant [data-request-headers]\") .append( createKeyValuePair( \"update-participant\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#update-participant [data-request-auth]\") .append( createKeyValuePair( \"update-participant\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#update-participant [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#update-participant [data-method]\").value auth = keyValuePairsToObjects( \"update-participant\", document.querySelector(\"#update-participant [data-request-auth]\") ) path = keyValuePairsToObjects( \"update-participant\", document.querySelector(\"#update-participant [data-request-path]\") ) headers = keyValuePairsToObjects( \"update-participant\", document.querySelector(\"#update-participant [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"update-participant\", document.querySelector(\"#update-participant [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"update-participant\", document.querySelector(\"#update-participant [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#update-participant [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#update-participant [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#update-participant [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#update-participant [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"update-participant\", response.status) updateResponseBody(\"update-participant\", response.data) updateRequestBody(\"update-participant\", myRequest) }) .then(() = { document.querySelector(\"#update-participant [data-json-response-body]\") document.querySelector(\"#update-participant [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Delete    console.log(\"API PARAMS: ..\\/params\\/delete-participant.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#delete-participant [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete-participant [data-query-params]\") .append(createKeyValuePair(\"delete-participant\")) }) document .querySelector(\"#delete-participant [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete-participant [data-request-headers]\") .append(createKeyValuePair(\"delete-participant\")) }) document.querySelector(\"#delete-participant [data-url]\").value = apiParams.url document.querySelector(\"#delete-participant [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#delete-participant [data-query-params]\") .append( createKeyValuePair( \"delete-participant\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#delete-participant [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#delete-participant [data-request-path]\") .append( createKeyValuePair( \"delete-participant\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#delete-participant [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#delete-participant [data-request-headers]\") .append( createKeyValuePair( \"delete-participant\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#delete-participant [data-request-auth]\") .append( createKeyValuePair( \"delete-participant\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#delete-participant [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#delete-participant [data-method]\").value auth = keyValuePairsToObjects( \"delete-participant\", document.querySelector(\"#delete-participant [data-request-auth]\") ) path = keyValuePairsToObjects( \"delete-participant\", document.querySelector(\"#delete-participant [data-request-path]\") ) headers = keyValuePairsToObjects( \"delete-participant\", document.querySelector(\"#delete-participant [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"delete-participant\", document.querySelector(\"#delete-participant [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"delete-participant\", document.querySelector(\"#delete-participant [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#delete-participant [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#delete-participant [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#delete-participant [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#delete-participant [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"delete-participant\", response.status) updateResponseBody(\"delete-participant\", response.data) updateRequestBody(\"delete-participant\", myRequest) }) .then(() = { document.querySelector(\"#delete-participant [data-json-response-body]\") document.querySelector(\"#delete-participant [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":10,"href":"/twilio-apis/api/messages/crud/","title":"Read, Update, Delete","parent":"Messages","content":"Read, Update and Delete messages with the Twilio Messaging API.\nLIST  You may optionally query by To, From and DateSent.\nSpecify a date as YYYY-MM-DD in GMT to read only messages sent on this date, such as DateSent 2022-08-25 . You can also specify an inequality, such as DateSent\u0026gt; YYYY-MM-DD to read messages sent on or after midnight on a date or DateSent\u0026gt; 2022-08-25T22:00:00 to read messages sent on or after a specific time. Use DateSent\u0026lt;, to find messages sent before a specific date or time.\n  console.log(\"API PARAMS: ..\\/params\\/crud\\/list.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#list [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list [data-query-params]\") .append(createKeyValuePair(\"list\")) }) document .querySelector(\"#list [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list [data-request-headers]\") .append(createKeyValuePair(\"list\")) }) document.querySelector(\"#list [data-url]\").value = apiParams.url document.querySelector(\"#list [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#list [data-query-params]\") .append( createKeyValuePair( \"list\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#list [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#list [data-request-path]\") .append( createKeyValuePair( \"list\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#list [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#list [data-request-headers]\") .append( createKeyValuePair( \"list\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#list [data-request-auth]\") .append( createKeyValuePair( \"list\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#list [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#list [data-method]\").value auth = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-auth]\") ) path = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-path]\") ) headers = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#list [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#list [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#list [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#list [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"list\", response.status) updateResponseBody(\"list\", response.data) updateRequestBody(\"list\", myRequest) }) .then(() = { document.querySelector(\"#list [data-json-response-body]\") document.querySelector(\"#list [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   READ    console.log(\"API PARAMS: ..\\/params\\/crud\\/read.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#read [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#read [data-query-params]\") .append(createKeyValuePair(\"read\")) }) document .querySelector(\"#read [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#read [data-request-headers]\") .append(createKeyValuePair(\"read\")) }) document.querySelector(\"#read [data-url]\").value = apiParams.url document.querySelector(\"#read [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#read [data-query-params]\") .append( createKeyValuePair( \"read\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#read [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#read [data-request-path]\") .append( createKeyValuePair( \"read\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#read [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#read [data-request-headers]\") .append( createKeyValuePair( \"read\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#read [data-request-auth]\") .append( createKeyValuePair( \"read\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#read [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#read [data-method]\").value auth = keyValuePairsToObjects( \"read\", document.querySelector(\"#read [data-request-auth]\") ) path = keyValuePairsToObjects( \"read\", document.querySelector(\"#read [data-request-path]\") ) headers = keyValuePairsToObjects( \"read\", document.querySelector(\"#read [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"read\", document.querySelector(\"#read [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"read\", document.querySelector(\"#read [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#read [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#read [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#read [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#read [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"read\", response.status) updateResponseBody(\"read\", response.data) updateRequestBody(\"read\", myRequest) }) .then(() = { document.querySelector(\"#read [data-json-response-body]\") document.querySelector(\"#read [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   UPDATE  To redact a message-body from a post-flight message, post an empty body to the message instance resource.\n  console.log(\"API PARAMS: ..\\/params\\/crud\\/update.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#update [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update [data-query-params]\") .append(createKeyValuePair(\"update\")) }) document .querySelector(\"#update [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update [data-request-headers]\") .append(createKeyValuePair(\"update\")) }) document.querySelector(\"#update [data-url]\").value = apiParams.url document.querySelector(\"#update [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#update [data-query-params]\") .append( createKeyValuePair( \"update\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#update [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#update [data-request-path]\") .append( createKeyValuePair( \"update\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#update [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#update [data-request-headers]\") .append( createKeyValuePair( \"update\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#update [data-request-auth]\") .append( createKeyValuePair( \"update\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#update [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#update [data-method]\").value auth = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-request-auth]\") ) path = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-request-path]\") ) headers = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"update\", document.querySelector(\"#update [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#update [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#update [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#update [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#update [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"update\", response.status) updateResponseBody(\"update\", response.data) updateRequestBody(\"update\", myRequest) }) .then(() = { document.querySelector(\"#update [data-json-response-body]\") document.querySelector(\"#update [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   DELETE    console.log(\"API PARAMS: ..\\/params\\/crud\\/delete.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#delete [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete [data-query-params]\") .append(createKeyValuePair(\"delete\")) }) document .querySelector(\"#delete [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete [data-request-headers]\") .append(createKeyValuePair(\"delete\")) }) document.querySelector(\"#delete [data-url]\").value = apiParams.url document.querySelector(\"#delete [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#delete [data-query-params]\") .append( createKeyValuePair( \"delete\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#delete [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#delete [data-request-path]\") .append( createKeyValuePair( \"delete\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#delete [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#delete [data-request-headers]\") .append( createKeyValuePair( \"delete\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#delete [data-request-auth]\") .append( createKeyValuePair( \"delete\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#delete [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#delete [data-method]\").value auth = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-auth]\") ) path = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-path]\") ) headers = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#delete [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#delete [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#delete [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#delete [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"delete\", response.status) updateResponseBody(\"delete\", response.data) updateRequestBody(\"delete\", myRequest) }) .then(() = { document.querySelector(\"#delete [data-json-response-body]\") document.querySelector(\"#delete [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":11,"href":"/twilio-apis/api/messaging-services/senders/","title":"Senders","parent":"Messaging Services","content":" LIST A2P    console.log(\"API PARAMS: ..\\/params\\/a2p.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#create [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-query-params]\") .append(createKeyValuePair(\"create\")) }) document .querySelector(\"#create [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-request-headers]\") .append(createKeyValuePair(\"create\")) }) document.querySelector(\"#create [data-url]\").value = apiParams.url document.querySelector(\"#create [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#create [data-query-params]\") .append( createKeyValuePair( \"create\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#create [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#create [data-request-path]\") .append( createKeyValuePair( \"create\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#create [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#create [data-request-headers]\") .append( createKeyValuePair( \"create\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#create [data-request-auth]\") .append( createKeyValuePair( \"create\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#create [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create [data-method]\").value auth = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-auth]\") ) path = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-path]\") ) headers = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#create [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#create [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create\", response.status) updateResponseBody(\"create\", response.data) updateRequestBody(\"create\", myRequest) }) .then(() = { document.querySelector(\"#create [data-json-response-body]\") document.querySelector(\"#create [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   LIST PHONE NUMBERS    console.log(\"API PARAMS: ..\\/params\\/phone-numbers.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#phone-numbers [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#phone-numbers [data-query-params]\") .append(createKeyValuePair(\"phone-numbers\")) }) document .querySelector(\"#phone-numbers [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#phone-numbers [data-request-headers]\") .append(createKeyValuePair(\"phone-numbers\")) }) document.querySelector(\"#phone-numbers [data-url]\").value = apiParams.url document.querySelector(\"#phone-numbers [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#phone-numbers [data-query-params]\") .append( createKeyValuePair( \"phone-numbers\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#phone-numbers [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#phone-numbers [data-request-path]\") .append( createKeyValuePair( \"phone-numbers\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#phone-numbers [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#phone-numbers [data-request-headers]\") .append( createKeyValuePair( \"phone-numbers\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#phone-numbers [data-request-auth]\") .append( createKeyValuePair( \"phone-numbers\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#phone-numbers [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#phone-numbers [data-method]\").value auth = keyValuePairsToObjects( \"phone-numbers\", document.querySelector(\"#phone-numbers [data-request-auth]\") ) path = keyValuePairsToObjects( \"phone-numbers\", document.querySelector(\"#phone-numbers [data-request-path]\") ) headers = keyValuePairsToObjects( \"phone-numbers\", document.querySelector(\"#phone-numbers [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"phone-numbers\", document.querySelector(\"#phone-numbers [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"phone-numbers\", document.querySelector(\"#phone-numbers [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#phone-numbers [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#phone-numbers [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#phone-numbers [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#phone-numbers [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"phone-numbers\", response.status) updateResponseBody(\"phone-numbers\", response.data) updateRequestBody(\"phone-numbers\", myRequest) }) .then(() = { document.querySelector(\"#phone-numbers [data-json-response-body]\") document.querySelector(\"#phone-numbers [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   ADD PHONE NUMBER    console.log(\"API PARAMS: ..\\/params\\/add-phone-number.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#add-phone-number [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#add-phone-number [data-query-params]\") .append(createKeyValuePair(\"add-phone-number\")) }) document .querySelector(\"#add-phone-number [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#add-phone-number [data-request-headers]\") .append(createKeyValuePair(\"add-phone-number\")) }) document.querySelector(\"#add-phone-number [data-url]\").value = apiParams.url document.querySelector(\"#add-phone-number [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#add-phone-number [data-query-params]\") .append( createKeyValuePair( \"add-phone-number\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#add-phone-number [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#add-phone-number [data-request-path]\") .append( createKeyValuePair( \"add-phone-number\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#add-phone-number [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#add-phone-number [data-request-headers]\") .append( createKeyValuePair( \"add-phone-number\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#add-phone-number [data-request-auth]\") .append( createKeyValuePair( \"add-phone-number\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#add-phone-number [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#add-phone-number [data-method]\").value auth = keyValuePairsToObjects( \"add-phone-number\", document.querySelector(\"#add-phone-number [data-request-auth]\") ) path = keyValuePairsToObjects( \"add-phone-number\", document.querySelector(\"#add-phone-number [data-request-path]\") ) headers = keyValuePairsToObjects( \"add-phone-number\", document.querySelector(\"#add-phone-number [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"add-phone-number\", document.querySelector(\"#add-phone-number [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"add-phone-number\", document.querySelector(\"#add-phone-number [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#add-phone-number [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#add-phone-number [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#add-phone-number [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#add-phone-number [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"add-phone-number\", response.status) updateResponseBody(\"add-phone-number\", response.data) updateRequestBody(\"add-phone-number\", myRequest) }) .then(() = { document.querySelector(\"#add-phone-number [data-json-response-body]\") document.querySelector(\"#add-phone-number [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   LIST SHORT CODES    console.log(\"API PARAMS: ..\\/params\\/short-codes.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#short-codes [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#short-codes [data-query-params]\") .append(createKeyValuePair(\"short-codes\")) }) document .querySelector(\"#short-codes [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#short-codes [data-request-headers]\") .append(createKeyValuePair(\"short-codes\")) }) document.querySelector(\"#short-codes [data-url]\").value = apiParams.url document.querySelector(\"#short-codes [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#short-codes [data-query-params]\") .append( createKeyValuePair( \"short-codes\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#short-codes [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#short-codes [data-request-path]\") .append( createKeyValuePair( \"short-codes\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#short-codes [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#short-codes [data-request-headers]\") .append( createKeyValuePair( \"short-codes\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#short-codes [data-request-auth]\") .append( createKeyValuePair( \"short-codes\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#short-codes [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#short-codes [data-method]\").value auth = keyValuePairsToObjects( \"short-codes\", document.querySelector(\"#short-codes [data-request-auth]\") ) path = keyValuePairsToObjects( \"short-codes\", document.querySelector(\"#short-codes [data-request-path]\") ) headers = keyValuePairsToObjects( \"short-codes\", document.querySelector(\"#short-codes [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"short-codes\", document.querySelector(\"#short-codes [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"short-codes\", document.querySelector(\"#short-codes [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#short-codes [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#short-codes [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#short-codes [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#short-codes [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"short-codes\", response.status) updateResponseBody(\"short-codes\", response.data) updateRequestBody(\"short-codes\", myRequest) }) .then(() = { document.querySelector(\"#short-codes [data-json-response-body]\") document.querySelector(\"#short-codes [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   LIST ALPHA SENDERS    console.log(\"API PARAMS: ..\\/params\\/alpha-senders.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#alpha-senders [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#alpha-senders [data-query-params]\") .append(createKeyValuePair(\"alpha-senders\")) }) document .querySelector(\"#alpha-senders [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#alpha-senders [data-request-headers]\") .append(createKeyValuePair(\"alpha-senders\")) }) document.querySelector(\"#alpha-senders [data-url]\").value = apiParams.url document.querySelector(\"#alpha-senders [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#alpha-senders [data-query-params]\") .append( createKeyValuePair( \"alpha-senders\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#alpha-senders [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#alpha-senders [data-request-path]\") .append( createKeyValuePair( \"alpha-senders\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#alpha-senders [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#alpha-senders [data-request-headers]\") .append( createKeyValuePair( \"alpha-senders\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#alpha-senders [data-request-auth]\") .append( createKeyValuePair( \"alpha-senders\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#alpha-senders [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#alpha-senders [data-method]\").value auth = keyValuePairsToObjects( \"alpha-senders\", document.querySelector(\"#alpha-senders [data-request-auth]\") ) path = keyValuePairsToObjects( \"alpha-senders\", document.querySelector(\"#alpha-senders [data-request-path]\") ) headers = keyValuePairsToObjects( \"alpha-senders\", document.querySelector(\"#alpha-senders [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"alpha-senders\", document.querySelector(\"#alpha-senders [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"alpha-senders\", document.querySelector(\"#alpha-senders [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#alpha-senders [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#alpha-senders [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#alpha-senders [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#alpha-senders [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"alpha-senders\", response.status) updateResponseBody(\"alpha-senders\", response.data) updateRequestBody(\"alpha-senders\", myRequest) }) .then(() = { document.querySelector(\"#alpha-senders [data-json-response-body]\") document.querySelector(\"#alpha-senders [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":12,"href":"/twilio-apis/api/messages/feedback/","title":"Feedback","parent":"Messages","content":"Provide feedback to Twilio on the deliverability of messages through different messaging channels.\nPROVIDE FEEDABACK  Send an SMS for which to provide feedback with ProvideFeedback=true param.\n  console.log(\"API PARAMS: ..\\/params\\/feedback\\/create.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#create [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-query-params]\") .append(createKeyValuePair(\"create\")) }) document .querySelector(\"#create [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-request-headers]\") .append(createKeyValuePair(\"create\")) }) document.querySelector(\"#create [data-url]\").value = apiParams.url document.querySelector(\"#create [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#create [data-query-params]\") .append( createKeyValuePair( \"create\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#create [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#create [data-request-path]\") .append( createKeyValuePair( \"create\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#create [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#create [data-request-headers]\") .append( createKeyValuePair( \"create\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#create [data-request-auth]\") .append( createKeyValuePair( \"create\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#create [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create [data-method]\").value auth = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-auth]\") ) path = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-path]\") ) headers = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#create [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#create [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create\", response.status) updateResponseBody(\"create\", response.data) updateRequestBody(\"create\", myRequest) }) .then(() = { document.querySelector(\"#create [data-json-response-body]\") document.querySelector(\"#create [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   CONFIRM FEEDBACK  Send Delivery Confirmation Feedack with with MessageSid + Outcome=confirmed params.\n  console.log(\"API PARAMS: ..\\/params\\/feedback\\/confirm.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#confirm [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#confirm [data-query-params]\") .append(createKeyValuePair(\"confirm\")) }) document .querySelector(\"#confirm [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#confirm [data-request-headers]\") .append(createKeyValuePair(\"confirm\")) }) document.querySelector(\"#confirm [data-url]\").value = apiParams.url document.querySelector(\"#confirm [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#confirm [data-query-params]\") .append( createKeyValuePair( \"confirm\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#confirm [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#confirm [data-request-path]\") .append( createKeyValuePair( \"confirm\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#confirm [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#confirm [data-request-headers]\") .append( createKeyValuePair( \"confirm\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#confirm [data-request-auth]\") .append( createKeyValuePair( \"confirm\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#confirm [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#confirm [data-method]\").value auth = keyValuePairsToObjects( \"confirm\", document.querySelector(\"#confirm [data-request-auth]\") ) path = keyValuePairsToObjects( \"confirm\", document.querySelector(\"#confirm [data-request-path]\") ) headers = keyValuePairsToObjects( \"confirm\", document.querySelector(\"#confirm [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"confirm\", document.querySelector(\"#confirm [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"confirm\", document.querySelector(\"#confirm [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#confirm [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#confirm [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#confirm [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#confirm [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"confirm\", response.status) updateResponseBody(\"confirm\", response.data) updateRequestBody(\"confirm\", myRequest) }) .then(() = { document.querySelector(\"#confirm [data-json-response-body]\") document.querySelector(\"#confirm [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":13,"href":"/twilio-apis/api/conversations/messages/","title":"Messages","parent":"Conversations","content":"Add messages to a conversation.\nCreate    console.log(\"API PARAMS: ..\\/params\\/create-message.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#create-message [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-message [data-query-params]\") .append(createKeyValuePair(\"create-message\")) }) document .querySelector(\"#create-message [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create-message [data-request-headers]\") .append(createKeyValuePair(\"create-message\")) }) document.querySelector(\"#create-message [data-url]\").value = apiParams.url document.querySelector(\"#create-message [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#create-message [data-query-params]\") .append( createKeyValuePair( \"create-message\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#create-message [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#create-message [data-request-path]\") .append( createKeyValuePair( \"create-message\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#create-message [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#create-message [data-request-headers]\") .append( createKeyValuePair( \"create-message\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#create-message [data-request-auth]\") .append( createKeyValuePair( \"create-message\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#create-message [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create-message [data-method]\").value auth = keyValuePairsToObjects( \"create-message\", document.querySelector(\"#create-message [data-request-auth]\") ) path = keyValuePairsToObjects( \"create-message\", document.querySelector(\"#create-message [data-request-path]\") ) headers = keyValuePairsToObjects( \"create-message\", document.querySelector(\"#create-message [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create-message\", document.querySelector(\"#create-message [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create-message\", document.querySelector(\"#create-message [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create-message [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#create-message [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create-message [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#create-message [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create-message\", response.status) updateResponseBody(\"create-message\", response.data) updateRequestBody(\"create-message\", myRequest) }) .then(() = { document.querySelector(\"#create-message [data-json-response-body]\") document.querySelector(\"#create-message [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   List    console.log(\"API PARAMS: ..\\/params\\/list-messages.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#list-messages [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list-messages [data-query-params]\") .append(createKeyValuePair(\"list-messages\")) }) document .querySelector(\"#list-messages [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list-messages [data-request-headers]\") .append(createKeyValuePair(\"list-messages\")) }) document.querySelector(\"#list-messages [data-url]\").value = apiParams.url document.querySelector(\"#list-messages [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#list-messages [data-query-params]\") .append( createKeyValuePair( \"list-messages\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#list-messages [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#list-messages [data-request-path]\") .append( createKeyValuePair( \"list-messages\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#list-messages [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#list-messages [data-request-headers]\") .append( createKeyValuePair( \"list-messages\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#list-messages [data-request-auth]\") .append( createKeyValuePair( \"list-messages\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#list-messages [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#list-messages [data-method]\").value auth = keyValuePairsToObjects( \"list-messages\", document.querySelector(\"#list-messages [data-request-auth]\") ) path = keyValuePairsToObjects( \"list-messages\", document.querySelector(\"#list-messages [data-request-path]\") ) headers = keyValuePairsToObjects( \"list-messages\", document.querySelector(\"#list-messages [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"list-messages\", document.querySelector(\"#list-messages [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"list-messages\", document.querySelector(\"#list-messages [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#list-messages [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#list-messages [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#list-messages [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#list-messages [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"list-messages\", response.status) updateResponseBody(\"list-messages\", response.data) updateRequestBody(\"list-messages\", myRequest) }) .then(() = { document.querySelector(\"#list-messages [data-json-response-body]\") document.querySelector(\"#list-messages [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Fetch    console.log(\"API PARAMS: ..\\/params\\/fetch-message.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#fetch-message [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-message [data-query-params]\") .append(createKeyValuePair(\"fetch-message\")) }) document .querySelector(\"#fetch-message [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-message [data-request-headers]\") .append(createKeyValuePair(\"fetch-message\")) }) document.querySelector(\"#fetch-message [data-url]\").value = apiParams.url document.querySelector(\"#fetch-message [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#fetch-message [data-query-params]\") .append( createKeyValuePair( \"fetch-message\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#fetch-message [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#fetch-message [data-request-path]\") .append( createKeyValuePair( \"fetch-message\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#fetch-message [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#fetch-message [data-request-headers]\") .append( createKeyValuePair( \"fetch-message\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#fetch-message [data-request-auth]\") .append( createKeyValuePair( \"fetch-message\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#fetch-message [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#fetch-message [data-method]\").value auth = keyValuePairsToObjects( \"fetch-message\", document.querySelector(\"#fetch-message [data-request-auth]\") ) path = keyValuePairsToObjects( \"fetch-message\", document.querySelector(\"#fetch-message [data-request-path]\") ) headers = keyValuePairsToObjects( \"fetch-message\", document.querySelector(\"#fetch-message [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"fetch-message\", document.querySelector(\"#fetch-message [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"fetch-message\", document.querySelector(\"#fetch-message [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#fetch-message [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#fetch-message [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#fetch-message [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#fetch-message [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"fetch-message\", response.status) updateResponseBody(\"fetch-message\", response.data) updateRequestBody(\"fetch-message\", myRequest) }) .then(() = { document.querySelector(\"#fetch-message [data-json-response-body]\") document.querySelector(\"#fetch-message [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Update    console.log(\"API PARAMS: ..\\/params\\/update-message.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#update-message [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update-message [data-query-params]\") .append(createKeyValuePair(\"update-message\")) }) document .querySelector(\"#update-message [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#update-message [data-request-headers]\") .append(createKeyValuePair(\"update-message\")) }) document.querySelector(\"#update-message [data-url]\").value = apiParams.url document.querySelector(\"#update-message [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#update-message [data-query-params]\") .append( createKeyValuePair( \"update-message\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#update-message [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#update-message [data-request-path]\") .append( createKeyValuePair( \"update-message\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#update-message [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#update-message [data-request-headers]\") .append( createKeyValuePair( \"update-message\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#update-message [data-request-auth]\") .append( createKeyValuePair( \"update-message\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#update-message [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#update-message [data-method]\").value auth = keyValuePairsToObjects( \"update-message\", document.querySelector(\"#update-message [data-request-auth]\") ) path = keyValuePairsToObjects( \"update-message\", document.querySelector(\"#update-message [data-request-path]\") ) headers = keyValuePairsToObjects( \"update-message\", document.querySelector(\"#update-message [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"update-message\", document.querySelector(\"#update-message [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"update-message\", document.querySelector(\"#update-message [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#update-message [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#update-message [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#update-message [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#update-message [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"update-message\", response.status) updateResponseBody(\"update-message\", response.data) updateRequestBody(\"update-message\", myRequest) }) .then(() = { document.querySelector(\"#update-message [data-json-response-body]\") document.querySelector(\"#update-message [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Delete    console.log(\"API PARAMS: ..\\/params\\/delete-message.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#delete-message [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete-message [data-query-params]\") .append(createKeyValuePair(\"delete-message\")) }) document .querySelector(\"#delete-message [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete-message [data-request-headers]\") .append(createKeyValuePair(\"delete-message\")) }) document.querySelector(\"#delete-message [data-url]\").value = apiParams.url document.querySelector(\"#delete-message [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#delete-message [data-query-params]\") .append( createKeyValuePair( \"delete-message\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#delete-message [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#delete-message [data-request-path]\") .append( createKeyValuePair( \"delete-message\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#delete-message [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#delete-message [data-request-headers]\") .append( createKeyValuePair( \"delete-message\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#delete-message [data-request-auth]\") .append( createKeyValuePair( \"delete-message\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#delete-message [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#delete-message [data-method]\").value auth = keyValuePairsToObjects( \"delete-message\", document.querySelector(\"#delete-message [data-request-auth]\") ) path = keyValuePairsToObjects( \"delete-message\", document.querySelector(\"#delete-message [data-request-path]\") ) headers = keyValuePairsToObjects( \"delete-message\", document.querySelector(\"#delete-message [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"delete-message\", document.querySelector(\"#delete-message [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"delete-message\", document.querySelector(\"#delete-message [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#delete-message [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#delete-message [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#delete-message [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#delete-message [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"delete-message\", response.status) updateResponseBody(\"delete-message\", response.data) updateRequestBody(\"delete-message\", myRequest) }) .then(() = { document.querySelector(\"#delete-message [data-json-response-body]\") document.querySelector(\"#delete-message [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":14,"href":"/twilio-apis/api/phone-numbers/phone-numbers-v2-active/","title":"Numbers v2 - Active","parent":"Phone Numbers","content":"The new Global Phone Numbers Catalog API lets you search for available numbers to purchase and to manage active numbers.\nLIST  List all active phone numbers. Optionally filter by PhoneNumber, Geography, and Type (e.g. local, mobile, tollfree, shortcode.)\n  console.log(\"API PARAMS: ..\\/params\\/phone-numbers-v2\\/active-list.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#active-list [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-list [data-query-params]\") .append(createKeyValuePair(\"active-list\")) }) document .querySelector(\"#active-list [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-list [data-request-headers]\") .append(createKeyValuePair(\"active-list\")) }) document.querySelector(\"#active-list [data-url]\").value = apiParams.url document.querySelector(\"#active-list [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#active-list [data-query-params]\") .append( createKeyValuePair( \"active-list\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#active-list [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#active-list [data-request-path]\") .append( createKeyValuePair( \"active-list\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#active-list [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#active-list [data-request-headers]\") .append( createKeyValuePair( \"active-list\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#active-list [data-request-auth]\") .append( createKeyValuePair( \"active-list\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#active-list [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active-list [data-method]\").value auth = keyValuePairsToObjects( \"active-list\", document.querySelector(\"#active-list [data-request-auth]\") ) path = keyValuePairsToObjects( \"active-list\", document.querySelector(\"#active-list [data-request-path]\") ) headers = keyValuePairsToObjects( \"active-list\", document.querySelector(\"#active-list [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active-list\", document.querySelector(\"#active-list [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active-list\", document.querySelector(\"#active-list [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active-list [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#active-list [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active-list [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#active-list [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active-list\", response.status) updateResponseBody(\"active-list\", response.data) updateRequestBody(\"active-list\", myRequest) }) .then(() = { document.querySelector(\"#active-list [data-json-response-body]\") document.querySelector(\"#active-list [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   GET    console.log(\"API PARAMS: ..\\/params\\/phone-numbers-v2\\/active-get.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#active-get [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-get [data-query-params]\") .append(createKeyValuePair(\"active-get\")) }) document .querySelector(\"#active-get [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-get [data-request-headers]\") .append(createKeyValuePair(\"active-get\")) }) document.querySelector(\"#active-get [data-url]\").value = apiParams.url document.querySelector(\"#active-get [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#active-get [data-query-params]\") .append( createKeyValuePair( \"active-get\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#active-get [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#active-get [data-request-path]\") .append( createKeyValuePair( \"active-get\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#active-get [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#active-get [data-request-headers]\") .append( createKeyValuePair( \"active-get\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#active-get [data-request-auth]\") .append( createKeyValuePair( \"active-get\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#active-get [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active-get [data-method]\").value auth = keyValuePairsToObjects( \"active-get\", document.querySelector(\"#active-get [data-request-auth]\") ) path = keyValuePairsToObjects( \"active-get\", document.querySelector(\"#active-get [data-request-path]\") ) headers = keyValuePairsToObjects( \"active-get\", document.querySelector(\"#active-get [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active-get\", document.querySelector(\"#active-get [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active-get\", document.querySelector(\"#active-get [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active-get [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#active-get [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active-get [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#active-get [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active-get\", response.status) updateResponseBody(\"active-get\", response.data) updateRequestBody(\"active-get\", myRequest) }) .then(() = { document.querySelector(\"#active-get [data-json-response-body]\") document.querySelector(\"#active-get [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   PURCHASE    console.log(\"API PARAMS: ..\\/params\\/phone-numbers-v2\\/active-purchase.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#active-purchase [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-purchase [data-query-params]\") .append(createKeyValuePair(\"active-purchase\")) }) document .querySelector(\"#active-purchase [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-purchase [data-request-headers]\") .append(createKeyValuePair(\"active-purchase\")) }) document.querySelector(\"#active-purchase [data-url]\").value = apiParams.url document.querySelector(\"#active-purchase [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#active-purchase [data-query-params]\") .append( createKeyValuePair( \"active-purchase\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#active-purchase [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#active-purchase [data-request-path]\") .append( createKeyValuePair( \"active-purchase\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#active-purchase [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#active-purchase [data-request-headers]\") .append( createKeyValuePair( \"active-purchase\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#active-purchase [data-request-auth]\") .append( createKeyValuePair( \"active-purchase\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#active-purchase [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active-purchase [data-method]\").value auth = keyValuePairsToObjects( \"active-purchase\", document.querySelector(\"#active-purchase [data-request-auth]\") ) path = keyValuePairsToObjects( \"active-purchase\", document.querySelector(\"#active-purchase [data-request-path]\") ) headers = keyValuePairsToObjects( \"active-purchase\", document.querySelector(\"#active-purchase [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active-purchase\", document.querySelector(\"#active-purchase [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active-purchase\", document.querySelector(\"#active-purchase [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active-purchase [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#active-purchase [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active-purchase [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#active-purchase [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active-purchase\", response.status) updateResponseBody(\"active-purchase\", response.data) updateRequestBody(\"active-purchase\", myRequest) }) .then(() = { document.querySelector(\"#active-purchase [data-json-response-body]\") document.querySelector(\"#active-purchase [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   CONFIG    console.log(\"API PARAMS: ..\\/params\\/phone-numbers-v2\\/active-config.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#active-config [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-config [data-query-params]\") .append(createKeyValuePair(\"active-config\")) }) document .querySelector(\"#active-config [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-config [data-request-headers]\") .append(createKeyValuePair(\"active-config\")) }) document.querySelector(\"#active-config [data-url]\").value = apiParams.url document.querySelector(\"#active-config [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#active-config [data-query-params]\") .append( createKeyValuePair( \"active-config\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#active-config [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#active-config [data-request-path]\") .append( createKeyValuePair( \"active-config\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#active-config [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#active-config [data-request-headers]\") .append( createKeyValuePair( \"active-config\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#active-config [data-request-auth]\") .append( createKeyValuePair( \"active-config\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#active-config [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active-config [data-method]\").value auth = keyValuePairsToObjects( \"active-config\", document.querySelector(\"#active-config [data-request-auth]\") ) path = keyValuePairsToObjects( \"active-config\", document.querySelector(\"#active-config [data-request-path]\") ) headers = keyValuePairsToObjects( \"active-config\", document.querySelector(\"#active-config [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active-config\", document.querySelector(\"#active-config [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active-config\", document.querySelector(\"#active-config [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active-config [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#active-config [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active-config [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#active-config [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active-config\", response.status) updateResponseBody(\"active-config\", response.data) updateRequestBody(\"active-config\", myRequest) }) .then(() = { document.querySelector(\"#active-config [data-json-response-body]\") document.querySelector(\"#active-config [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   TRANSFER    console.log(\"API PARAMS: ..\\/params\\/phone-numbers-v2\\/active-transfer.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#active-transfer [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-transfer [data-query-params]\") .append(createKeyValuePair(\"active-transfer\")) }) document .querySelector(\"#active-transfer [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-transfer [data-request-headers]\") .append(createKeyValuePair(\"active-transfer\")) }) document.querySelector(\"#active-transfer [data-url]\").value = apiParams.url document.querySelector(\"#active-transfer [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#active-transfer [data-query-params]\") .append( createKeyValuePair( \"active-transfer\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#active-transfer [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#active-transfer [data-request-path]\") .append( createKeyValuePair( \"active-transfer\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#active-transfer [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#active-transfer [data-request-headers]\") .append( createKeyValuePair( \"active-transfer\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#active-transfer [data-request-auth]\") .append( createKeyValuePair( \"active-transfer\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#active-transfer [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active-transfer [data-method]\").value auth = keyValuePairsToObjects( \"active-transfer\", document.querySelector(\"#active-transfer [data-request-auth]\") ) path = keyValuePairsToObjects( \"active-transfer\", document.querySelector(\"#active-transfer [data-request-path]\") ) headers = keyValuePairsToObjects( \"active-transfer\", document.querySelector(\"#active-transfer [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active-transfer\", document.querySelector(\"#active-transfer [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active-transfer\", document.querySelector(\"#active-transfer [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active-transfer [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#active-transfer [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active-transfer [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#active-transfer [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active-transfer\", response.status) updateResponseBody(\"active-transfer\", response.data) updateRequestBody(\"active-transfer\", myRequest) }) .then(() = { document.querySelector(\"#active-transfer [data-json-response-body]\") document.querySelector(\"#active-transfer [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   DELETE    console.log(\"API PARAMS: ..\\/params\\/phone-numbers-v2\\/active-delete.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#active-delete [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-delete [data-query-params]\") .append(createKeyValuePair(\"active-delete\")) }) document .querySelector(\"#active-delete [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active-delete [data-request-headers]\") .append(createKeyValuePair(\"active-delete\")) }) document.querySelector(\"#active-delete [data-url]\").value = apiParams.url document.querySelector(\"#active-delete [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#active-delete [data-query-params]\") .append( createKeyValuePair( \"active-delete\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#active-delete [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#active-delete [data-request-path]\") .append( createKeyValuePair( \"active-delete\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#active-delete [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#active-delete [data-request-headers]\") .append( createKeyValuePair( \"active-delete\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#active-delete [data-request-auth]\") .append( createKeyValuePair( \"active-delete\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#active-delete [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active-delete [data-method]\").value auth = keyValuePairsToObjects( \"active-delete\", document.querySelector(\"#active-delete [data-request-auth]\") ) path = keyValuePairsToObjects( \"active-delete\", document.querySelector(\"#active-delete [data-request-path]\") ) headers = keyValuePairsToObjects( \"active-delete\", document.querySelector(\"#active-delete [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active-delete\", document.querySelector(\"#active-delete [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active-delete\", document.querySelector(\"#active-delete [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active-delete [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#active-delete [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active-delete [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#active-delete [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active-delete\", response.status) updateResponseBody(\"active-delete\", response.data) updateRequestBody(\"active-delete\", myRequest) }) .then(() = { document.querySelector(\"#active-delete [data-json-response-body]\") document.querySelector(\"#active-delete [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":15,"href":"/twilio-apis/api/phone-numbers/hosted-numbers/","title":"Hosted Numbers","parent":"Phone Numbers","content":"Create and manage Hosted Numbers.\nCREATE  Create a Hosted Numbers Order request.\n  console.log(\"API PARAMS: ..\\/params\\/hosted-numbers\\/create.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#active [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active [data-query-params]\") .append(createKeyValuePair(\"active\")) }) document .querySelector(\"#active [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#active [data-request-headers]\") .append(createKeyValuePair(\"active\")) }) document.querySelector(\"#active [data-url]\").value = apiParams.url document.querySelector(\"#active [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#active [data-query-params]\") .append( createKeyValuePair( \"active\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#active [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#active [data-request-path]\") .append( createKeyValuePair( \"active\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#active [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#active [data-request-headers]\") .append( createKeyValuePair( \"active\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#active [data-request-auth]\") .append( createKeyValuePair( \"active\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#active [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#active [data-method]\").value auth = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-request-auth]\") ) path = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-request-path]\") ) headers = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"active\", document.querySelector(\"#active [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#active [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#active [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#active [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#active [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"active\", response.status) updateResponseBody(\"active\", response.data) updateRequestBody(\"active\", myRequest) }) .then(() = { document.querySelector(\"#active [data-json-response-body]\") document.querySelector(\"#active [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   STATUS  Check Hosted Numbers Order status.\n  console.log(\"API PARAMS: ..\\/params\\/hosted-numbers\\/status.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#country [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#country [data-query-params]\") .append(createKeyValuePair(\"country\")) }) document .querySelector(\"#country [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#country [data-request-headers]\") .append(createKeyValuePair(\"country\")) }) document.querySelector(\"#country [data-url]\").value = apiParams.url document.querySelector(\"#country [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#country [data-query-params]\") .append( createKeyValuePair( \"country\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#country [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#country [data-request-path]\") .append( createKeyValuePair( \"country\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#country [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#country [data-request-headers]\") .append( createKeyValuePair( \"country\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#country [data-request-auth]\") .append( createKeyValuePair( \"country\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#country [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#country [data-method]\").value auth = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-request-auth]\") ) path = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-request-path]\") ) headers = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"country\", document.querySelector(\"#country [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#country [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#country [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#country [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#country [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"country\", response.status) updateResponseBody(\"country\", response.data) updateRequestBody(\"country\", myRequest) }) .then(() = { document.querySelector(\"#country [data-json-response-body]\") document.querySelector(\"#country [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   VERIFY  Verify phone number ownership with an automated phone call.\nWhen requesting a verification phone call, a 6-digit verification_code will be returned, which must be entered by the end user who answers the phone.\n  console.log(\"API PARAMS: ..\\/params\\/hosted-numbers\\/verify.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#local [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#local [data-query-params]\") .append(createKeyValuePair(\"local\")) }) document .querySelector(\"#local [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#local [data-request-headers]\") .append(createKeyValuePair(\"local\")) }) document.querySelector(\"#local [data-url]\").value = apiParams.url document.querySelector(\"#local [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#local [data-query-params]\") .append( createKeyValuePair( \"local\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#local [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#local [data-request-path]\") .append( createKeyValuePair( \"local\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#local [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#local [data-request-headers]\") .append( createKeyValuePair( \"local\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#local [data-request-auth]\") .append( createKeyValuePair( \"local\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#local [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#local [data-method]\").value auth = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-request-auth]\") ) path = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-request-path]\") ) headers = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"local\", document.querySelector(\"#local [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#local [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#local [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#local [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#local [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"local\", response.status) updateResponseBody(\"local\", response.data) updateRequestBody(\"local\", myRequest) }) .then(() = { document.querySelector(\"#local [data-json-response-body]\") document.querySelector(\"#local [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   LOA  Submit Letter of Authorization.\nYou must provide an AddressSid created using the Addresses API.\n  console.log(\"API PARAMS: ..\\/params\\/hosted-numbers\\/loa.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#tollfree [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#tollfree [data-query-params]\") .append(createKeyValuePair(\"tollfree\")) }) document .querySelector(\"#tollfree [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#tollfree [data-request-headers]\") .append(createKeyValuePair(\"tollfree\")) }) document.querySelector(\"#tollfree [data-url]\").value = apiParams.url document.querySelector(\"#tollfree [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#tollfree [data-query-params]\") .append( createKeyValuePair( \"tollfree\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#tollfree [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#tollfree [data-request-path]\") .append( createKeyValuePair( \"tollfree\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#tollfree [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#tollfree [data-request-headers]\") .append( createKeyValuePair( \"tollfree\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#tollfree [data-request-auth]\") .append( createKeyValuePair( \"tollfree\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#tollfree [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#tollfree [data-method]\").value auth = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-request-auth]\") ) path = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-request-path]\") ) headers = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"tollfree\", document.querySelector(\"#tollfree [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#tollfree [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#tollfree [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#tollfree [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#tollfree [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"tollfree\", response.status) updateResponseBody(\"tollfree\", response.data) updateRequestBody(\"tollfree\", myRequest) }) .then(() = { document.querySelector(\"#tollfree [data-json-response-body]\") document.querySelector(\"#tollfree [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   DELETE  Remove Hosted Number from your inventory and remove Twilio\u0026rsquo;s SMS Routing Profile.\n  console.log(\"API PARAMS: ..\\/params\\/hosted-numbers\\/delete.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#delete [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete [data-query-params]\") .append(createKeyValuePair(\"delete\")) }) document .querySelector(\"#delete [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete [data-request-headers]\") .append(createKeyValuePair(\"delete\")) }) document.querySelector(\"#delete [data-url]\").value = apiParams.url document.querySelector(\"#delete [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#delete [data-query-params]\") .append( createKeyValuePair( \"delete\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#delete [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#delete [data-request-path]\") .append( createKeyValuePair( \"delete\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#delete [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#delete [data-request-headers]\") .append( createKeyValuePair( \"delete\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#delete [data-request-auth]\") .append( createKeyValuePair( \"delete\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#delete [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#delete [data-method]\").value auth = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-auth]\") ) path = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-path]\") ) headers = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#delete [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#delete [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#delete [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#delete [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"delete\", response.status) updateResponseBody(\"delete\", response.data) updateRequestBody(\"delete\", myRequest) }) .then(() = { document.querySelector(\"#delete [data-json-response-body]\") document.querySelector(\"#delete [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":16,"href":"/twilio-apis/api/conversations/participant-conversations/","title":"Participant Conversations","parent":"Conversations","content":"Fetch conversations by participant.\nFetch SMS Conversations    console.log(\"API PARAMS: ..\\/params\\/fetch-sms-conversations.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#fetch-sms-conversations [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-sms-conversations [data-query-params]\") .append(createKeyValuePair(\"fetch-sms-conversations\")) }) document .querySelector(\"#fetch-sms-conversations [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-sms-conversations [data-request-headers]\") .append(createKeyValuePair(\"fetch-sms-conversations\")) }) document.querySelector(\"#fetch-sms-conversations [data-url]\").value = apiParams.url document.querySelector(\"#fetch-sms-conversations [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#fetch-sms-conversations [data-query-params]\") .append( createKeyValuePair( \"fetch-sms-conversations\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#fetch-sms-conversations [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#fetch-sms-conversations [data-request-path]\") .append( createKeyValuePair( \"fetch-sms-conversations\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#fetch-sms-conversations [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#fetch-sms-conversations [data-request-headers]\") .append( createKeyValuePair( \"fetch-sms-conversations\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#fetch-sms-conversations [data-request-auth]\") .append( createKeyValuePair( \"fetch-sms-conversations\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#fetch-sms-conversations [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#fetch-sms-conversations [data-method]\").value auth = keyValuePairsToObjects( \"fetch-sms-conversations\", document.querySelector(\"#fetch-sms-conversations [data-request-auth]\") ) path = keyValuePairsToObjects( \"fetch-sms-conversations\", document.querySelector(\"#fetch-sms-conversations [data-request-path]\") ) headers = keyValuePairsToObjects( \"fetch-sms-conversations\", document.querySelector(\"#fetch-sms-conversations [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"fetch-sms-conversations\", document.querySelector(\"#fetch-sms-conversations [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"fetch-sms-conversations\", document.querySelector(\"#fetch-sms-conversations [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#fetch-sms-conversations [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#fetch-sms-conversations [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#fetch-sms-conversations [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#fetch-sms-conversations [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"fetch-sms-conversations\", response.status) updateResponseBody(\"fetch-sms-conversations\", response.data) updateRequestBody(\"fetch-sms-conversations\", myRequest) }) .then(() = { document.querySelector(\"#fetch-sms-conversations [data-json-response-body]\") document.querySelector(\"#fetch-sms-conversations [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   Fetch Chat Conversations    console.log(\"API PARAMS: ..\\/params\\/fetch-chat-conversations.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#fetch-chat-conversations [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-chat-conversations [data-query-params]\") .append(createKeyValuePair(\"fetch-chat-conversations\")) }) document .querySelector(\"#fetch-chat-conversations [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#fetch-chat-conversations [data-request-headers]\") .append(createKeyValuePair(\"fetch-chat-conversations\")) }) document.querySelector(\"#fetch-chat-conversations [data-url]\").value = apiParams.url document.querySelector(\"#fetch-chat-conversations [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#fetch-chat-conversations [data-query-params]\") .append( createKeyValuePair( \"fetch-chat-conversations\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#fetch-chat-conversations [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#fetch-chat-conversations [data-request-path]\") .append( createKeyValuePair( \"fetch-chat-conversations\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#fetch-chat-conversations [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#fetch-chat-conversations [data-request-headers]\") .append( createKeyValuePair( \"fetch-chat-conversations\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#fetch-chat-conversations [data-request-auth]\") .append( createKeyValuePair( \"fetch-chat-conversations\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#fetch-chat-conversations [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#fetch-chat-conversations [data-method]\").value auth = keyValuePairsToObjects( \"fetch-chat-conversations\", document.querySelector(\"#fetch-chat-conversations [data-request-auth]\") ) path = keyValuePairsToObjects( \"fetch-chat-conversations\", document.querySelector(\"#fetch-chat-conversations [data-request-path]\") ) headers = keyValuePairsToObjects( \"fetch-chat-conversations\", document.querySelector(\"#fetch-chat-conversations [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"fetch-chat-conversations\", document.querySelector(\"#fetch-chat-conversations [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"fetch-chat-conversations\", document.querySelector(\"#fetch-chat-conversations [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#fetch-chat-conversations [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#fetch-chat-conversations [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#fetch-chat-conversations [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#fetch-chat-conversations [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"fetch-chat-conversations\", response.status) updateResponseBody(\"fetch-chat-conversations\", response.data) updateRequestBody(\"fetch-chat-conversations\", myRequest) }) .then(() = { document.querySelector(\"#fetch-chat-conversations [data-json-response-body]\") document.querySelector(\"#fetch-chat-conversations [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":17,"href":"/twilio-apis/api/messages/test/","title":"Test Credentials","parent":"Messages","content":"Send messages with test credentials to simulate different responses. This API uses the test credentials and test phone numbers described here.\nSUCCESS    console.log(\"API PARAMS: ..\\/params\\/test\\/success.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#success [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#success [data-query-params]\") .append(createKeyValuePair(\"success\")) }) document .querySelector(\"#success [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#success [data-request-headers]\") .append(createKeyValuePair(\"success\")) }) document.querySelector(\"#success [data-url]\").value = apiParams.url document.querySelector(\"#success [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#success [data-query-params]\") .append( createKeyValuePair( \"success\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#success [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#success [data-request-path]\") .append( createKeyValuePair( \"success\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#success [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#success [data-request-headers]\") .append( createKeyValuePair( \"success\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#success [data-request-auth]\") .append( createKeyValuePair( \"success\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#success [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#success [data-method]\").value auth = keyValuePairsToObjects( \"success\", document.querySelector(\"#success [data-request-auth]\") ) path = keyValuePairsToObjects( \"success\", document.querySelector(\"#success [data-request-path]\") ) headers = keyValuePairsToObjects( \"success\", document.querySelector(\"#success [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"success\", document.querySelector(\"#success [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"success\", document.querySelector(\"#success [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#success [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#success [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#success [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#success [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"success\", response.status) updateResponseBody(\"success\", response.data) updateRequestBody(\"success\", myRequest) }) .then(() = { document.querySelector(\"#success [data-json-response-body]\") document.querySelector(\"#success [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   UNSUBSCRIBED  Error Code 21610 - The To phone number is blocked (opted-out) for your account.\n  console.log(\"API PARAMS: ..\\/params\\/test\\/unsubscribed.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#unsubscribed [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#unsubscribed [data-query-params]\") .append(createKeyValuePair(\"unsubscribed\")) }) document .querySelector(\"#unsubscribed [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#unsubscribed [data-request-headers]\") .append(createKeyValuePair(\"unsubscribed\")) }) document.querySelector(\"#unsubscribed [data-url]\").value = apiParams.url document.querySelector(\"#unsubscribed [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#unsubscribed [data-query-params]\") .append( createKeyValuePair( \"unsubscribed\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#unsubscribed [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#unsubscribed [data-request-path]\") .append( createKeyValuePair( \"unsubscribed\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#unsubscribed [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#unsubscribed [data-request-headers]\") .append( createKeyValuePair( \"unsubscribed\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#unsubscribed [data-request-auth]\") .append( createKeyValuePair( \"unsubscribed\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#unsubscribed [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#unsubscribed [data-method]\").value auth = keyValuePairsToObjects( \"unsubscribed\", document.querySelector(\"#unsubscribed [data-request-auth]\") ) path = keyValuePairsToObjects( \"unsubscribed\", document.querySelector(\"#unsubscribed [data-request-path]\") ) headers = keyValuePairsToObjects( \"unsubscribed\", document.querySelector(\"#unsubscribed [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"unsubscribed\", document.querySelector(\"#unsubscribed [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"unsubscribed\", document.querySelector(\"#unsubscribed [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#unsubscribed [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#unsubscribed [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#unsubscribed [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#unsubscribed [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"unsubscribed\", response.status) updateResponseBody(\"unsubscribed\", response.data) updateRequestBody(\"unsubscribed\", myRequest) }) .then(() = { document.querySelector(\"#unsubscribed [data-json-response-body]\") document.querySelector(\"#unsubscribed [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   INVALID TO  Error Code 21212 - The To phone number is invalid.\n  console.log(\"API PARAMS: ..\\/params\\/test\\/invalid-to.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#invalid-to [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#invalid-to [data-query-params]\") .append(createKeyValuePair(\"invalid-to\")) }) document .querySelector(\"#invalid-to [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#invalid-to [data-request-headers]\") .append(createKeyValuePair(\"invalid-to\")) }) document.querySelector(\"#invalid-to [data-url]\").value = apiParams.url document.querySelector(\"#invalid-to [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#invalid-to [data-query-params]\") .append( createKeyValuePair( \"invalid-to\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#invalid-to [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#invalid-to [data-request-path]\") .append( createKeyValuePair( \"invalid-to\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#invalid-to [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#invalid-to [data-request-headers]\") .append( createKeyValuePair( \"invalid-to\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#invalid-to [data-request-auth]\") .append( createKeyValuePair( \"invalid-to\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#invalid-to [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#invalid-to [data-method]\").value auth = keyValuePairsToObjects( \"invalid-to\", document.querySelector(\"#invalid-to [data-request-auth]\") ) path = keyValuePairsToObjects( \"invalid-to\", document.querySelector(\"#invalid-to [data-request-path]\") ) headers = keyValuePairsToObjects( \"invalid-to\", document.querySelector(\"#invalid-to [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"invalid-to\", document.querySelector(\"#invalid-to [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"invalid-to\", document.querySelector(\"#invalid-to [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#invalid-to [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#invalid-to [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#invalid-to [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#invalid-to [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"invalid-to\", response.status) updateResponseBody(\"invalid-to\", response.data) updateRequestBody(\"invalid-to\", myRequest) }) .then(() = { document.querySelector(\"#invalid-to [data-json-response-body]\") document.querySelector(\"#invalid-to [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   INVALID REGION  Error Code 21408 - Your account doesn’t have the international permissions necessary to SMS this number.\n  console.log(\"API PARAMS: ..\\/params\\/test\\/invalid-region.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#invalid-region [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#invalid-region [data-query-params]\") .append(createKeyValuePair(\"invalid-region\")) }) document .querySelector(\"#invalid-region [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#invalid-region [data-request-headers]\") .append(createKeyValuePair(\"invalid-region\")) }) document.querySelector(\"#invalid-region [data-url]\").value = apiParams.url document.querySelector(\"#invalid-region [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#invalid-region [data-query-params]\") .append( createKeyValuePair( \"invalid-region\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#invalid-region [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#invalid-region [data-request-path]\") .append( createKeyValuePair( \"invalid-region\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#invalid-region [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#invalid-region [data-request-headers]\") .append( createKeyValuePair( \"invalid-region\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#invalid-region [data-request-auth]\") .append( createKeyValuePair( \"invalid-region\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#invalid-region [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#invalid-region [data-method]\").value auth = keyValuePairsToObjects( \"invalid-region\", document.querySelector(\"#invalid-region [data-request-auth]\") ) path = keyValuePairsToObjects( \"invalid-region\", document.querySelector(\"#invalid-region [data-request-path]\") ) headers = keyValuePairsToObjects( \"invalid-region\", document.querySelector(\"#invalid-region [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"invalid-region\", document.querySelector(\"#invalid-region [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"invalid-region\", document.querySelector(\"#invalid-region [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#invalid-region [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#invalid-region [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#invalid-region [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#invalid-region [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"invalid-region\", response.status) updateResponseBody(\"invalid-region\", response.data) updateRequestBody(\"invalid-region\", myRequest) }) .then(() = { document.querySelector(\"#invalid-region [data-json-response-body]\") document.querySelector(\"#invalid-region [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   QUEUE FULL  Status Code 429, Error Code 21611 - This number has an SMS message queue that is full.\n  console.log(\"API PARAMS: ..\\/params\\/test\\/queue-full.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#queue-full [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#queue-full [data-query-params]\") .append(createKeyValuePair(\"queue-full\")) }) document .querySelector(\"#queue-full [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#queue-full [data-request-headers]\") .append(createKeyValuePair(\"queue-full\")) }) document.querySelector(\"#queue-full [data-url]\").value = apiParams.url document.querySelector(\"#queue-full [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#queue-full [data-query-params]\") .append( createKeyValuePair( \"queue-full\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#queue-full [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#queue-full [data-request-path]\") .append( createKeyValuePair( \"queue-full\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#queue-full [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#queue-full [data-request-headers]\") .append( createKeyValuePair( \"queue-full\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#queue-full [data-request-auth]\") .append( createKeyValuePair( \"queue-full\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#queue-full [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#queue-full [data-method]\").value auth = keyValuePairsToObjects( \"queue-full\", document.querySelector(\"#queue-full [data-request-auth]\") ) path = keyValuePairsToObjects( \"queue-full\", document.querySelector(\"#queue-full [data-request-path]\") ) headers = keyValuePairsToObjects( \"queue-full\", document.querySelector(\"#queue-full [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"queue-full\", document.querySelector(\"#queue-full [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"queue-full\", document.querySelector(\"#queue-full [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#queue-full [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#queue-full [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#queue-full [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#queue-full [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"queue-full\", response.status) updateResponseBody(\"queue-full\", response.data) updateRequestBody(\"queue-full\", myRequest) }) .then(() = { document.querySelector(\"#queue-full [data-json-response-body]\") document.querySelector(\"#queue-full [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":18,"href":"/twilio-apis/api/accounts/","title":"Accounts","parent":"API Explorer","content":"    Accounts      Addresses      "},{"id":19,"href":"/twilio-apis/tags/accounts/","title":"accounts","parent":"Tags","content":""},{"id":20,"href":"/twilio-apis/tags/addresses/","title":"addresses","parent":"Tags","content":""},{"id":21,"href":"/twilio-apis/tags/api/","title":"api","parent":"Tags","content":""},{"id":22,"href":"/twilio-apis/api/","title":"API Explorer","parent":"Twilio API Explorer","content":"    Accounts      Accounts      Addresses        Conversations      Conversations      Participants      Messages      Participant Conversations        Lookup      Lookup v1      Lookup v2        Messages      Send Message      Read, Update, Delete      Feedback      Test Credentials        Messaging Services      Services      Senders        Phone Numbers      Numbers v1      Numbers v2 - Available      Numbers v2 - Active      Hosted Numbers        Verify      Service      Verify        "},{"id":23,"href":"/twilio-apis/api/conversations/","title":"Conversations","parent":"API Explorer","content":"    Conversations      Participants      Messages      Participant Conversations      "},{"id":24,"href":"/twilio-apis/tags/conversations/","title":"conversations","parent":"Tags","content":""},{"id":25,"href":"/twilio-apis/tags/environment/","title":"environment","parent":"Tags","content":""},{"id":26,"href":"/twilio-apis/tags/feedback/","title":"feedback","parent":"Tags","content":""},{"id":27,"href":"/twilio-apis/tags/hosted-numbers/","title":"hosted-numbers","parent":"Tags","content":""},{"id":28,"href":"/twilio-apis/api/lookup/","title":"Lookup","parent":"API Explorer","content":"    Lookup v1      Lookup v2      "},{"id":29,"href":"/twilio-apis/tags/lookup/","title":"lookup","parent":"Tags","content":""},{"id":30,"href":"/twilio-apis/api/messages/","title":"Messages","parent":"API Explorer","content":"    Send Message      Read, Update, Delete      Feedback      Test Credentials      "},{"id":31,"href":"/twilio-apis/tags/messages/","title":"messages","parent":"Tags","content":""},{"id":32,"href":"/twilio-apis/api/messaging-services/","title":"Messaging Services","parent":"API Explorer","content":"    Services      Senders      "},{"id":33,"href":"/twilio-apis/tags/messaging-services/","title":"messaging services","parent":"Tags","content":""},{"id":34,"href":"/twilio-apis/open-api/","title":"Open API","parent":"Twilio API Explorer","content":"Open API specs in various formats\nTwilio OpenAPI Specs      twilio-oai - Twilio OpenAPI Repo  Swagger Docs        Swagger Doc Description     Twilio API Send messages and manage accounts and phone numbers   Twilio Lookups v2 API Validate Phone Number formats and types   Twilio Verify API Send and validate one-time-passcodes   Twilio Messaging Services API Manage Messaging Services and Number Pools   Twilio Conversations API Manage 2-way human-to-human conversations    Postman Collections     Something goes here\n   -- "},{"id":35,"href":"/twilio-apis/api/phone-numbers/","title":"Phone Numbers","parent":"API Explorer","content":"    Numbers v1      Numbers v2 - Available      Numbers v2 - Active      Hosted Numbers      "},{"id":36,"href":"/twilio-apis/tags/phone-numbers/","title":"phone-numbers","parent":"Tags","content":""},{"id":37,"href":"/twilio-apis/tags/postman/","title":"postman","parent":"Tags","content":""},{"id":38,"href":"/twilio-apis/tags/preferences/","title":"preferences","parent":"Tags","content":""},{"id":39,"href":"/twilio-apis/sdk/","title":"SDKs","parent":"Twilio API Explorer","content":"    Libraries \u0026amp; Tools      Twilio Console - API Explorer  Twilo Console Postman-like app   Twilio SDKs  node, python, ruby, java, c#, php   Twilio CLI  Provides access to all APIs from the command line   Open API  Swagger Spec   Postman  Beta. Limited methods: find phone number, buy phone number, send message, fetch message.    "},{"id":40,"href":"/twilio-apis/api/verify/service/","title":"Service","parent":"Verify","content":"Create and manage Twilio Verify services.\nCreate a Verification Service (once).\nCREATE    console.log(\"API PARAMS: ..\\/params\\/create.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#create [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-query-params]\") .append(createKeyValuePair(\"create\")) }) document .querySelector(\"#create [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#create [data-request-headers]\") .append(createKeyValuePair(\"create\")) }) document.querySelector(\"#create [data-url]\").value = apiParams.url document.querySelector(\"#create [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#create [data-query-params]\") .append( createKeyValuePair( \"create\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#create [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#create [data-request-path]\") .append( createKeyValuePair( \"create\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#create [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#create [data-request-headers]\") .append( createKeyValuePair( \"create\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#create [data-request-auth]\") .append( createKeyValuePair( \"create\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#create [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#create [data-method]\").value auth = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-auth]\") ) path = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-path]\") ) headers = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"create\", document.querySelector(\"#create [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#create [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#create [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#create [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#create [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"create\", response.status) updateResponseBody(\"create\", response.data) updateRequestBody(\"create\", myRequest) }) .then(() = { document.querySelector(\"#create [data-json-response-body]\") document.querySelector(\"#create [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   LIST    console.log(\"API PARAMS: ..\\/params\\/list.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#list [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list [data-query-params]\") .append(createKeyValuePair(\"list\")) }) document .querySelector(\"#list [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#list [data-request-headers]\") .append(createKeyValuePair(\"list\")) }) document.querySelector(\"#list [data-url]\").value = apiParams.url document.querySelector(\"#list [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#list [data-query-params]\") .append( createKeyValuePair( \"list\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#list [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#list [data-request-path]\") .append( createKeyValuePair( \"list\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#list [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#list [data-request-headers]\") .append( createKeyValuePair( \"list\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#list [data-request-auth]\") .append( createKeyValuePair( \"list\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#list [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#list [data-method]\").value auth = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-auth]\") ) path = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-path]\") ) headers = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"list\", document.querySelector(\"#list [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#list [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#list [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#list [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#list [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"list\", response.status) updateResponseBody(\"list\", response.data) updateRequestBody(\"list\", myRequest) }) .then(() = { document.querySelector(\"#list [data-json-response-body]\") document.querySelector(\"#list [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   GET    console.log(\"API PARAMS: ..\\/params\\/get.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#get [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#get [data-query-params]\") .append(createKeyValuePair(\"get\")) }) document .querySelector(\"#get [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#get [data-request-headers]\") .append(createKeyValuePair(\"get\")) }) document.querySelector(\"#get [data-url]\").value = apiParams.url document.querySelector(\"#get [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#get [data-query-params]\") .append( createKeyValuePair( \"get\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#get [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#get [data-request-path]\") .append( createKeyValuePair( \"get\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#get [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#get [data-request-headers]\") .append( createKeyValuePair( \"get\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#get [data-request-auth]\") .append( createKeyValuePair( \"get\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#get [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#get [data-method]\").value auth = keyValuePairsToObjects( \"get\", document.querySelector(\"#get [data-request-auth]\") ) path = keyValuePairsToObjects( \"get\", document.querySelector(\"#get [data-request-path]\") ) headers = keyValuePairsToObjects( \"get\", document.querySelector(\"#get [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"get\", document.querySelector(\"#get [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"get\", document.querySelector(\"#get [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#get [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#get [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#get [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#get [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"get\", response.status) updateResponseBody(\"get\", response.data) updateRequestBody(\"get\", myRequest) }) .then(() = { document.querySelector(\"#get [data-json-response-body]\") document.querySelector(\"#get [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   DELETE    console.log(\"API PARAMS: ..\\/params\\/delete.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#delete [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete [data-query-params]\") .append(createKeyValuePair(\"delete\")) }) document .querySelector(\"#delete [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#delete [data-request-headers]\") .append(createKeyValuePair(\"delete\")) }) document.querySelector(\"#delete [data-url]\").value = apiParams.url document.querySelector(\"#delete [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#delete [data-query-params]\") .append( createKeyValuePair( \"delete\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#delete [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#delete [data-request-path]\") .append( createKeyValuePair( \"delete\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#delete [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#delete [data-request-headers]\") .append( createKeyValuePair( \"delete\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#delete [data-request-auth]\") .append( createKeyValuePair( \"delete\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#delete [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#delete [data-method]\").value auth = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-auth]\") ) path = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-path]\") ) headers = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"delete\", document.querySelector(\"#delete [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#delete [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#delete [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#delete [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#delete [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"delete\", response.status) updateResponseBody(\"delete\", response.data) updateRequestBody(\"delete\", myRequest) }) .then(() = { document.querySelector(\"#delete [data-json-response-body]\") document.querySelector(\"#delete [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":41,"href":"/twilio-apis/settings/","title":"Settings","parent":"Twilio API Explorer","content":"Enter key/value environment variables to use in Postman API requests.\nAdd Custom Environment Variable    Environment Variables    Edit  Delete      const newEnvVarDialog = document.getElementById(\"newEnvVarDialog\") let keyElement = newEnvVarDialog.querySelector(\"[modal-data-key]\") let valueElement = newEnvVarDialog.querySelector(\"[modal-data-value]\") const keys = Object.keys(localStorage).sort(function (a, b) { return a.toLowerCase().localeCompare(b.toLowerCase()) }) let envVars = [] let envObj = {} keys.forEach((key) = { envObj = {} envObj.key = key envObj.value = localStorage[key] envVars.push(envObj) }) envVars.forEach((envVar) = { document .querySelector(\"#settings [data-query-params]\") .append(createKeyValuePair(\"settings\", envVar.key, envVar.value)) }) document .querySelector(\"#newEnvVarBtn\") .addEventListener(\"click\", function onOpen() { console.log(\"CLICK ENV VAR BTN\") if (typeof newEnvVarDialog.showModal === \"function\") { console.log(\"NEW ENV VAR DIALOG\", newEnvVarDialog) newEnvVarDialog.showModal() } }) newEnvVarDialog.addEventListener(\"keydown\", (e) = { if (e.code === \"Enter\") { setLocalStorage() } }) newEnvVarDialog.addEventListener(\"close\", function onClose() { if (newEnvVarDialog.returnValue !== \"cancel\") { setLocalStorage() } }) function setLocalStorage() { if (keyElement.value !== \"\" \u0026\u0026 valueElement.value !== \"\") { localStorage.setItem(keyElement.value, valueElement.value) window.location = window.location.href } }  "},{"id":42,"href":"/twilio-apis/tags/settings/","title":"settings","parent":"Tags","content":""},{"id":43,"href":"/twilio-apis/tags/","title":"Tags","parent":"Twilio API Explorer","content":""},{"id":44,"href":"/twilio-apis/tags/twilio/","title":"twilio","parent":"Tags","content":""},{"id":45,"href":"/twilio-apis/","title":"Twilio API Explorer","parent":"","content":"    API Explorer      Accounts      Accounts      Addresses        Conversations      Conversations      Participants      Messages      Participant Conversations        Lookup      Lookup v1      Lookup v2        Messages      Send Message      Read, Update, Delete      Feedback      Test Credentials        Messaging Services      Services      Senders        Phone Numbers      Numbers v1      Numbers v2 - Available      Numbers v2 - Active      Hosted Numbers        Verify      Service      Verify          Open API      SDKs      "},{"id":46,"href":"/twilio-apis/tags/variables/","title":"variables","parent":"Tags","content":""},{"id":47,"href":"/twilio-apis/api/verify/","title":"Verify","parent":"API Explorer","content":"    Service      Verify      "},{"id":48,"href":"/twilio-apis/api/verify/verify/","title":"Verify","parent":"Verify","content":"Sending and verifying One-Time-Passcodes (OTPs) with Twilio Verify.\nSend OTP, Check OTP.\nSEND OTP  Channel options include sms, whatsapp, call, and email.\n  console.log(\"API PARAMS: ..\\/params\\/send.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#send [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#send [data-query-params]\") .append(createKeyValuePair(\"send\")) }) document .querySelector(\"#send [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#send [data-request-headers]\") .append(createKeyValuePair(\"send\")) }) document.querySelector(\"#send [data-url]\").value = apiParams.url document.querySelector(\"#send [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#send [data-query-params]\") .append( createKeyValuePair( \"send\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#send [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#send [data-request-path]\") .append( createKeyValuePair( \"send\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#send [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#send [data-request-headers]\") .append( createKeyValuePair( \"send\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#send [data-request-auth]\") .append( createKeyValuePair( \"send\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#send [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#send [data-method]\").value auth = keyValuePairsToObjects( \"send\", document.querySelector(\"#send [data-request-auth]\") ) path = keyValuePairsToObjects( \"send\", document.querySelector(\"#send [data-request-path]\") ) headers = keyValuePairsToObjects( \"send\", document.querySelector(\"#send [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"send\", document.querySelector(\"#send [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"send\", document.querySelector(\"#send [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#send [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#send [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#send [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#send [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"send\", response.status) updateResponseBody(\"send\", response.data) updateRequestBody(\"send\", myRequest) }) .then(() = { document.querySelector(\"#send [data-json-response-body]\") document.querySelector(\"#send [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })   CHECK OTP    console.log(\"API PARAMS: ..\\/params\\/check.js\", apiParams)  GET POST PUT PATCH DELETE  Send  Params   Headers   Auth    Path Params   Query Params  \u0026plus;     \u0026plus;       Request     Response Status:        \u0026#9998;  \u0026#10005;      document .querySelector(\"#check [data-add-query-param-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#check [data-query-params]\") .append(createKeyValuePair(\"check\")) }) document .querySelector(\"#check [data-add-request-header-btn]\") .addEventListener(\"click\", () = { document .querySelector(\"#check [data-request-headers]\") .append(createKeyValuePair(\"check\")) }) document.querySelector(\"#check [data-url]\").value = apiParams.url document.querySelector(\"#check [data-method]\").value = apiParams?.method || \"GET\" apiParams.queryParams?.forEach((queryParam) = { document .querySelector(\"#check [data-query-params]\") .append( createKeyValuePair( \"check\", queryParam.key, queryParam.value, queryParam.placeholder ) ) }) if (apiParams.queryParams?.length  0) { document .querySelector(\"#check [data-query-params-section]\") .classList.remove(\"d-none\") } apiParams.pathParams?.forEach((pathParam) = { document .querySelector(\"#check [data-request-path]\") .append( createKeyValuePair( \"check\", pathParam.key, pathParam.value, pathParam.placeholder ) ) }) if (apiParams.pathParams?.length  0) { document .querySelector(\"#check [data-request-path-section]\") .classList.remove(\"d-none\") } apiParams.headerParams?.forEach((headerParam) = { document .querySelector(\"#check [data-request-headers]\") .append( createKeyValuePair( \"check\", headerParam.key, headerParam.value, headerParam.placeholder ) ) }) apiParams.authParams?.forEach((authParam) = { document .querySelector(\"#check [data-request-auth]\") .append( createKeyValuePair( \"check\", authParam.key, authParam.value, authParam.placeholder ) ) }) document .querySelector(\"#check [data-form]\") .addEventListener(\"submit\", (e) = { e.preventDefault() let url let method let auth let path let headers let params let qs let data let myRequest method = document.querySelector(\"#check [data-method]\").value auth = keyValuePairsToObjects( \"check\", document.querySelector(\"#check [data-request-auth]\") ) path = keyValuePairsToObjects( \"check\", document.querySelector(\"#check [data-request-path]\") ) headers = keyValuePairsToObjects( \"check\", document.querySelector(\"#check [data-request-headers]\") ) if (method === \"GET\") { params = keyValuePairsToObjects( \"check\", document.querySelector(\"#check [data-query-params]\") ) } if (method === \"POST\") { params = keyValuePairsToObjects( \"check\", document.querySelector(\"#check [data-query-params]\") ) qs = new URLSearchParams(params).toString() console.log(\"QS:\", qs) data = qs } url = document.querySelector(\"#check [data-url]\").value console.log(\"URL BEFORE:\", url) let urlSplit = url.split(\"/\") console.log(\"URL SPLIT BEFORE:\", urlSplit) let count = 0 let urlEnvVar let urlKey let urlVal urlSplit.forEach((word) = { if (word.match(/\\{\\{\\w+}}/)) { urlEnvVar = word.match(/\\{\\{\\w+}}/).toString() urlKey = urlEnvVar.replaceAll(/[{}]/g, \"\") Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) if (key == urlKey) { console.log(\"key == urlKey\") urlVal = value urlSplit[count] = word.replace(/\\{\\{\\w+}}/, urlVal) } }) } count += 1 }) console.log(\"URL SPLIT AFTER\", urlSplit) url = urlSplit.join(\"/\") console.log(\"URL AFTER\", url) console.log(\"METHOD:\", method) console.log(\"AUTH:\", auth) console.log(\"PATH:\", path) Object.entries(path).forEach((entry) = { const [key, value] = entry console.log(`${key}: ${value}`) }) console.log(\"HEADERS:\", headers) console.log(\"PARAMS:\", params) console.log(\"DATA:\", data) document .querySelector(\"#check [data-response-section]\") .classList.add(\"d-none\") axios({ url, method, auth, params, headers, data, }) .catch((e) = e.response) .then((response) = { console.log(\"RESPONSE:\", response) console.log( `.querySelector(\"#check [data-response-section]\")` ) myRequest = { url, method, auth, } if (auth.password) { myRequest.auth.password = \"**********\" } if (path \u0026\u0026 Object.entries(path).length  0) { console.log(\"Object.entries(path)\", Object.entries(path)) myRequest.path_params = path } if (params \u0026\u0026 Object.entries(params).length  0) { console.log(\"Object.entries(params)\", Object.entries(params)) myRequest.query_params = params if (params.StatusCallback) { myRequest.query_params.StatusCallback = \"**********\" } } console.log(\"MY REQUEST\", myRequest) document .querySelector(\"#check [data-response-section]\") .classList.remove(\"d-none\") updateResponseStatus(\"check\", response.status) updateResponseBody(\"check\", response.data) updateRequestBody(\"check\", myRequest) }) .then(() = { document.querySelector(\"#check [data-json-response-body]\") document.querySelector(\"#check [data-json-request-body]\") console.log(`Prism.highlightAll()`) Prism.highlightAll() }) })    "},{"id":49,"href":"/twilio-apis/tags/verify/","title":"verify","parent":"Tags","content":""},{"id":50,"href":"/twilio-apis/webhook/event-streams/","title":"Webhook - Event Streams","parent":"Webhooks","content":""},{"id":51,"href":"/twilio-apis/webhook/flex/","title":"Webhook - Flex Event Streams","parent":"Webhooks","content":""},{"id":52,"href":"/twilio-apis/webhook/hosted-num/","title":"Webhook - Hosted Numbers","parent":"Webhooks","content":""},{"id":53,"href":"/twilio-apis/webhook/incoming-msg/","title":"Webhook - Incoming Message","parent":"Webhooks","content":""},{"id":54,"href":"/twilio-apis/webhook/outgoing-msg/","title":"Webhook - Outgoing Message","parent":"Webhooks","content":""},{"id":55,"href":"/twilio-apis/webhook/voice/","title":"Webhook - Voice","parent":"Webhooks","content":""},{"id":56,"href":"/twilio-apis/webhook/","title":"Webhooks","parent":"Twilio API Explorer","content":""}]